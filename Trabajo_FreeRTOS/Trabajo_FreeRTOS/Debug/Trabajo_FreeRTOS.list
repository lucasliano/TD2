
Trabajo_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b8c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001c9c  08001c9c  00011c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cc4  08001cc4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001cc4  08001cc4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cc4  08001cc4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cc4  08001cc4  00011cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cc8  08001cc8  00011cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000000c  08001cd8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08001cd8  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f750  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022bb  00000000  00000000  0002f785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00031a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  000327c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001e55  00000000  00000000  00033448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e2fd  00000000  00000000  0003529d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090ded  00000000  00000000  0004359a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4387  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c8  00000000  00000000  000d43dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08001c84 	.word	0x08001c84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08001c84 	.word	0x08001c84

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b09c      	sub	sp, #112	; 0x70
 8000154:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000156:	f000 f9e9 	bl	800052c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800015a:	f000 f80d 	bl	8000178 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800015e:	f000 f887 	bl	8000270 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000162:	f000 f84f 	bl	8000204 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */


	for(uint8_t i=0;i<1000000;i++);
 8000166:	2300      	movs	r3, #0
 8000168:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800016c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000170:	3301      	adds	r3, #1
 8000172:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000176:	e7f9      	b.n	800016c <main+0x1c>

08000178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b090      	sub	sp, #64	; 0x40
 800017c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017e:	f107 0318 	add.w	r3, r7, #24
 8000182:	2228      	movs	r2, #40	; 0x28
 8000184:	2100      	movs	r1, #0
 8000186:	4618      	mov	r0, r3
 8000188:	f001 fd74 	bl	8001c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018c:	1d3b      	adds	r3, r7, #4
 800018e:	2200      	movs	r2, #0
 8000190:	601a      	str	r2, [r3, #0]
 8000192:	605a      	str	r2, [r3, #4]
 8000194:	609a      	str	r2, [r3, #8]
 8000196:	60da      	str	r2, [r3, #12]
 8000198:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800019a:	2301      	movs	r3, #1
 800019c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800019e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a4:	2300      	movs	r3, #0
 80001a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a8:	2301      	movs	r3, #1
 80001aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ac:	2302      	movs	r3, #2
 80001ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001bc:	f107 0318 	add.w	r3, r7, #24
 80001c0:	4618      	mov	r0, r3
 80001c2:	f000 fc49 	bl	8000a58 <HAL_RCC_OscConfig>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d001      	beq.n	80001d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001cc:	f000 f884 	bl	80002d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d0:	230f      	movs	r3, #15
 80001d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d4:	2302      	movs	r3, #2
 80001d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d8:	2300      	movs	r3, #0
 80001da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e2:	2300      	movs	r3, #0
 80001e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	2102      	movs	r1, #2
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 feb4 	bl	8000f58 <HAL_RCC_ClockConfig>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001f6:	f000 f86f 	bl	80002d8 <Error_Handler>
  }
}
 80001fa:	bf00      	nop
 80001fc:	3740      	adds	r7, #64	; 0x40
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
	...

08000204 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000208:	4b17      	ldr	r3, [pc, #92]	; (8000268 <MX_SPI1_Init+0x64>)
 800020a:	4a18      	ldr	r2, [pc, #96]	; (800026c <MX_SPI1_Init+0x68>)
 800020c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800020e:	4b16      	ldr	r3, [pc, #88]	; (8000268 <MX_SPI1_Init+0x64>)
 8000210:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000214:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000216:	4b14      	ldr	r3, [pc, #80]	; (8000268 <MX_SPI1_Init+0x64>)
 8000218:	2200      	movs	r2, #0
 800021a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800021c:	4b12      	ldr	r3, [pc, #72]	; (8000268 <MX_SPI1_Init+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000222:	4b11      	ldr	r3, [pc, #68]	; (8000268 <MX_SPI1_Init+0x64>)
 8000224:	2200      	movs	r2, #0
 8000226:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000228:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <MX_SPI1_Init+0x64>)
 800022a:	2200      	movs	r2, #0
 800022c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800022e:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <MX_SPI1_Init+0x64>)
 8000230:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000234:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000236:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <MX_SPI1_Init+0x64>)
 8000238:	2208      	movs	r2, #8
 800023a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800023c:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <MX_SPI1_Init+0x64>)
 800023e:	2200      	movs	r2, #0
 8000240:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000242:	4b09      	ldr	r3, [pc, #36]	; (8000268 <MX_SPI1_Init+0x64>)
 8000244:	2200      	movs	r2, #0
 8000246:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000248:	4b07      	ldr	r3, [pc, #28]	; (8000268 <MX_SPI1_Init+0x64>)
 800024a:	2200      	movs	r2, #0
 800024c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800024e:	4b06      	ldr	r3, [pc, #24]	; (8000268 <MX_SPI1_Init+0x64>)
 8000250:	220a      	movs	r2, #10
 8000252:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000254:	4804      	ldr	r0, [pc, #16]	; (8000268 <MX_SPI1_Init+0x64>)
 8000256:	f001 f835 	bl	80012c4 <HAL_SPI_Init>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000260:	f000 f83a 	bl	80002d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}
 8000268:	200000e0 	.word	0x200000e0
 800026c:	40013000 	.word	0x40013000

08000270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <MX_GPIO_Init+0x40>)
 8000278:	699b      	ldr	r3, [r3, #24]
 800027a:	4a0d      	ldr	r2, [pc, #52]	; (80002b0 <MX_GPIO_Init+0x40>)
 800027c:	f043 0320 	orr.w	r3, r3, #32
 8000280:	6193      	str	r3, [r2, #24]
 8000282:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <MX_GPIO_Init+0x40>)
 8000284:	699b      	ldr	r3, [r3, #24]
 8000286:	f003 0320 	and.w	r3, r3, #32
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <MX_GPIO_Init+0x40>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	4a07      	ldr	r2, [pc, #28]	; (80002b0 <MX_GPIO_Init+0x40>)
 8000294:	f043 0304 	orr.w	r3, r3, #4
 8000298:	6193      	str	r3, [r2, #24]
 800029a:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <MX_GPIO_Init+0x40>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	f003 0304 	and.w	r3, r3, #4
 80002a2:	603b      	str	r3, [r7, #0]
 80002a4:	683b      	ldr	r3, [r7, #0]

}
 80002a6:	bf00      	nop
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr
 80002b0:	40021000 	.word	0x40021000

080002b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a04      	ldr	r2, [pc, #16]	; (80002d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d101      	bne.n	80002ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80002c6:	f000 f947 	bl	8000558 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40012c00 	.word	0x40012c00

080002d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002dc:	b672      	cpsid	i
}
 80002de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002e0:	e7fe      	b.n	80002e0 <Error_Handler+0x8>
	...

080002e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002ea:	4b18      	ldr	r3, [pc, #96]	; (800034c <HAL_MspInit+0x68>)
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	4a17      	ldr	r2, [pc, #92]	; (800034c <HAL_MspInit+0x68>)
 80002f0:	f043 0301 	orr.w	r3, r3, #1
 80002f4:	6193      	str	r3, [r2, #24]
 80002f6:	4b15      	ldr	r3, [pc, #84]	; (800034c <HAL_MspInit+0x68>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	f003 0301 	and.w	r3, r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
 8000300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000302:	4b12      	ldr	r3, [pc, #72]	; (800034c <HAL_MspInit+0x68>)
 8000304:	69db      	ldr	r3, [r3, #28]
 8000306:	4a11      	ldr	r2, [pc, #68]	; (800034c <HAL_MspInit+0x68>)
 8000308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800030c:	61d3      	str	r3, [r2, #28]
 800030e:	4b0f      	ldr	r3, [pc, #60]	; (800034c <HAL_MspInit+0x68>)
 8000310:	69db      	ldr	r3, [r3, #28]
 8000312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000316:	607b      	str	r3, [r7, #4]
 8000318:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800031a:	2200      	movs	r2, #0
 800031c:	210f      	movs	r1, #15
 800031e:	f06f 0001 	mvn.w	r0, #1
 8000322:	f000 f9ea 	bl	80006fa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000326:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <HAL_MspInit+0x6c>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <HAL_MspInit+0x6c>)
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000342:	bf00      	nop
 8000344:	3710      	adds	r7, #16
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40021000 	.word	0x40021000
 8000350:	40010000 	.word	0x40010000

08000354 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b088      	sub	sp, #32
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035c:	f107 0310 	add.w	r3, r7, #16
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	609a      	str	r2, [r3, #8]
 8000368:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a1b      	ldr	r2, [pc, #108]	; (80003dc <HAL_SPI_MspInit+0x88>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d12f      	bne.n	80003d4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000374:	4b1a      	ldr	r3, [pc, #104]	; (80003e0 <HAL_SPI_MspInit+0x8c>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a19      	ldr	r2, [pc, #100]	; (80003e0 <HAL_SPI_MspInit+0x8c>)
 800037a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <HAL_SPI_MspInit+0x8c>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000388:	60fb      	str	r3, [r7, #12]
 800038a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800038c:	4b14      	ldr	r3, [pc, #80]	; (80003e0 <HAL_SPI_MspInit+0x8c>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a13      	ldr	r2, [pc, #76]	; (80003e0 <HAL_SPI_MspInit+0x8c>)
 8000392:	f043 0304 	orr.w	r3, r3, #4
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <HAL_SPI_MspInit+0x8c>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0304 	and.w	r3, r3, #4
 80003a0:	60bb      	str	r3, [r7, #8]
 80003a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80003a4:	23a0      	movs	r3, #160	; 0xa0
 80003a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003a8:	2302      	movs	r3, #2
 80003aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ac:	2303      	movs	r3, #3
 80003ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b0:	f107 0310 	add.w	r3, r7, #16
 80003b4:	4619      	mov	r1, r3
 80003b6:	480b      	ldr	r0, [pc, #44]	; (80003e4 <HAL_SPI_MspInit+0x90>)
 80003b8:	f000 f9ca 	bl	8000750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80003bc:	2340      	movs	r3, #64	; 0x40
 80003be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c4:	2300      	movs	r3, #0
 80003c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c8:	f107 0310 	add.w	r3, r7, #16
 80003cc:	4619      	mov	r1, r3
 80003ce:	4805      	ldr	r0, [pc, #20]	; (80003e4 <HAL_SPI_MspInit+0x90>)
 80003d0:	f000 f9be 	bl	8000750 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80003d4:	bf00      	nop
 80003d6:	3720      	adds	r7, #32
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40013000 	.word	0x40013000
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40010800 	.word	0x40010800

080003e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b08c      	sub	sp, #48	; 0x30
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80003f8:	2200      	movs	r2, #0
 80003fa:	6879      	ldr	r1, [r7, #4]
 80003fc:	2019      	movs	r0, #25
 80003fe:	f000 f97c 	bl	80006fa <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000402:	2019      	movs	r0, #25
 8000404:	f000 f995 	bl	8000732 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000408:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <HAL_InitTick+0x9c>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a1d      	ldr	r2, [pc, #116]	; (8000484 <HAL_InitTick+0x9c>)
 800040e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <HAL_InitTick+0x9c>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000420:	f107 0210 	add.w	r2, r7, #16
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	4611      	mov	r1, r2
 800042a:	4618      	mov	r0, r3
 800042c:	f000 fefc 	bl	8001228 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000430:	f000 fee6 	bl	8001200 <HAL_RCC_GetPCLK2Freq>
 8000434:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000438:	4a13      	ldr	r2, [pc, #76]	; (8000488 <HAL_InitTick+0xa0>)
 800043a:	fba2 2303 	umull	r2, r3, r2, r3
 800043e:	0c9b      	lsrs	r3, r3, #18
 8000440:	3b01      	subs	r3, #1
 8000442:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <HAL_InitTick+0xa4>)
 8000446:	4a12      	ldr	r2, [pc, #72]	; (8000490 <HAL_InitTick+0xa8>)
 8000448:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800044a:	4b10      	ldr	r3, [pc, #64]	; (800048c <HAL_InitTick+0xa4>)
 800044c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000450:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000452:	4a0e      	ldr	r2, [pc, #56]	; (800048c <HAL_InitTick+0xa4>)
 8000454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000456:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <HAL_InitTick+0xa4>)
 800045a:	2200      	movs	r2, #0
 800045c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <HAL_InitTick+0xa4>)
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000464:	4809      	ldr	r0, [pc, #36]	; (800048c <HAL_InitTick+0xa4>)
 8000466:	f000 ffb1 	bl	80013cc <HAL_TIM_Base_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d104      	bne.n	800047a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000470:	4806      	ldr	r0, [pc, #24]	; (800048c <HAL_InitTick+0xa4>)
 8000472:	f001 f803 	bl	800147c <HAL_TIM_Base_Start_IT>
 8000476:	4603      	mov	r3, r0
 8000478:	e000      	b.n	800047c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800047a:	2301      	movs	r3, #1
}
 800047c:	4618      	mov	r0, r3
 800047e:	3730      	adds	r7, #48	; 0x30
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40021000 	.word	0x40021000
 8000488:	431bde83 	.word	0x431bde83
 800048c:	20000138 	.word	0x20000138
 8000490:	40012c00 	.word	0x40012c00

08000494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000498:	e7fe      	b.n	8000498 <NMI_Handler+0x4>

0800049a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800049e:	e7fe      	b.n	800049e <HardFault_Handler+0x4>

080004a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <MemManage_Handler+0x4>

080004a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004aa:	e7fe      	b.n	80004aa <BusFault_Handler+0x4>

080004ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <UsageFault_Handler+0x4>

080004b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr
	...

080004c0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80004c4:	4802      	ldr	r0, [pc, #8]	; (80004d0 <TIM1_UP_IRQHandler+0x10>)
 80004c6:	f001 f82b 	bl	8001520 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000138 	.word	0x20000138

080004d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e0:	480c      	ldr	r0, [pc, #48]	; (8000514 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004e2:	490d      	ldr	r1, [pc, #52]	; (8000518 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004e4:	4a0d      	ldr	r2, [pc, #52]	; (800051c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e8:	e002      	b.n	80004f0 <LoopCopyDataInit>

080004ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ee:	3304      	adds	r3, #4

080004f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f4:	d3f9      	bcc.n	80004ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f6:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004f8:	4c0a      	ldr	r4, [pc, #40]	; (8000524 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004fc:	e001      	b.n	8000502 <LoopFillZerobss>

080004fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000500:	3204      	adds	r2, #4

08000502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000504:	d3fb      	bcc.n	80004fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000506:	f7ff ffe5 	bl	80004d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800050a:	f001 fb8f 	bl	8001c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800050e:	f7ff fe1f 	bl	8000150 <main>
  bx lr
 8000512:	4770      	bx	lr
  ldr r0, =_sdata
 8000514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000518:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800051c:	08001ccc 	.word	0x08001ccc
  ldr r2, =_sbss
 8000520:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000524:	20000184 	.word	0x20000184

08000528 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000528:	e7fe      	b.n	8000528 <ADC1_2_IRQHandler>
	...

0800052c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_Init+0x28>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a07      	ldr	r2, [pc, #28]	; (8000554 <HAL_Init+0x28>)
 8000536:	f043 0310 	orr.w	r3, r3, #16
 800053a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f8d1 	bl	80006e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ff50 	bl	80003e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f7ff fecc 	bl	80002e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40022000 	.word	0x40022000

08000558 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <HAL_IncTick+0x1c>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	461a      	mov	r2, r3
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <HAL_IncTick+0x20>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4413      	add	r3, r2
 8000568:	4a03      	ldr	r2, [pc, #12]	; (8000578 <HAL_IncTick+0x20>)
 800056a:	6013      	str	r3, [r2, #0]
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	20000008 	.word	0x20000008
 8000578:	20000180 	.word	0x20000180

0800057c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  return uwTick;
 8000580:	4b02      	ldr	r3, [pc, #8]	; (800058c <HAL_GetTick+0x10>)
 8000582:	681b      	ldr	r3, [r3, #0]
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	20000180 	.word	0x20000180

08000590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f003 0307 	and.w	r3, r3, #7
 800059e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <__NVIC_SetPriorityGrouping+0x44>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005ac:	4013      	ands	r3, r2
 80005ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005c2:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <__NVIC_SetPriorityGrouping+0x44>)
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	60d3      	str	r3, [r2, #12]
}
 80005c8:	bf00      	nop
 80005ca:	3714      	adds	r7, #20
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <__NVIC_GetPriorityGrouping+0x18>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	0a1b      	lsrs	r3, r3, #8
 80005e2:	f003 0307 	and.w	r3, r3, #7
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000602:	2b00      	cmp	r3, #0
 8000604:	db0b      	blt.n	800061e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	f003 021f 	and.w	r2, r3, #31
 800060c:	4906      	ldr	r1, [pc, #24]	; (8000628 <__NVIC_EnableIRQ+0x34>)
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	095b      	lsrs	r3, r3, #5
 8000614:	2001      	movs	r0, #1
 8000616:	fa00 f202 	lsl.w	r2, r0, r2
 800061a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	e000e100 	.word	0xe000e100

0800062c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	6039      	str	r1, [r7, #0]
 8000636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063c:	2b00      	cmp	r3, #0
 800063e:	db0a      	blt.n	8000656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	b2da      	uxtb	r2, r3
 8000644:	490c      	ldr	r1, [pc, #48]	; (8000678 <__NVIC_SetPriority+0x4c>)
 8000646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064a:	0112      	lsls	r2, r2, #4
 800064c:	b2d2      	uxtb	r2, r2
 800064e:	440b      	add	r3, r1
 8000650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000654:	e00a      	b.n	800066c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4908      	ldr	r1, [pc, #32]	; (800067c <__NVIC_SetPriority+0x50>)
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	f003 030f 	and.w	r3, r3, #15
 8000662:	3b04      	subs	r3, #4
 8000664:	0112      	lsls	r2, r2, #4
 8000666:	b2d2      	uxtb	r2, r2
 8000668:	440b      	add	r3, r1
 800066a:	761a      	strb	r2, [r3, #24]
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000e100 	.word	0xe000e100
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000680:	b480      	push	{r7}
 8000682:	b089      	sub	sp, #36	; 0x24
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	f1c3 0307 	rsb	r3, r3, #7
 800069a:	2b04      	cmp	r3, #4
 800069c:	bf28      	it	cs
 800069e:	2304      	movcs	r3, #4
 80006a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	3304      	adds	r3, #4
 80006a6:	2b06      	cmp	r3, #6
 80006a8:	d902      	bls.n	80006b0 <NVIC_EncodePriority+0x30>
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	3b03      	subs	r3, #3
 80006ae:	e000      	b.n	80006b2 <NVIC_EncodePriority+0x32>
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	fa02 f303 	lsl.w	r3, r2, r3
 80006be:	43da      	mvns	r2, r3
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	401a      	ands	r2, r3
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	fa01 f303 	lsl.w	r3, r1, r3
 80006d2:	43d9      	mvns	r1, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	4313      	orrs	r3, r2
         );
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3724      	adds	r7, #36	; 0x24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f7ff ff4f 	bl	8000590 <__NVIC_SetPriorityGrouping>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b086      	sub	sp, #24
 80006fe:	af00      	add	r7, sp, #0
 8000700:	4603      	mov	r3, r0
 8000702:	60b9      	str	r1, [r7, #8]
 8000704:	607a      	str	r2, [r7, #4]
 8000706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800070c:	f7ff ff64 	bl	80005d8 <__NVIC_GetPriorityGrouping>
 8000710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	68b9      	ldr	r1, [r7, #8]
 8000716:	6978      	ldr	r0, [r7, #20]
 8000718:	f7ff ffb2 	bl	8000680 <NVIC_EncodePriority>
 800071c:	4602      	mov	r2, r0
 800071e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000722:	4611      	mov	r1, r2
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff81 	bl	800062c <__NVIC_SetPriority>
}
 800072a:	bf00      	nop
 800072c:	3718      	adds	r7, #24
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
 8000738:	4603      	mov	r3, r0
 800073a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800073c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff57 	bl	80005f4 <__NVIC_EnableIRQ>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000750:	b480      	push	{r7}
 8000752:	b08b      	sub	sp, #44	; 0x2c
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800075e:	2300      	movs	r3, #0
 8000760:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000762:	e169      	b.n	8000a38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000764:	2201      	movs	r2, #1
 8000766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000768:	fa02 f303 	lsl.w	r3, r2, r3
 800076c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	69fa      	ldr	r2, [r7, #28]
 8000774:	4013      	ands	r3, r2
 8000776:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000778:	69ba      	ldr	r2, [r7, #24]
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	429a      	cmp	r2, r3
 800077e:	f040 8158 	bne.w	8000a32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	4a9a      	ldr	r2, [pc, #616]	; (80009f0 <HAL_GPIO_Init+0x2a0>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d05e      	beq.n	800084a <HAL_GPIO_Init+0xfa>
 800078c:	4a98      	ldr	r2, [pc, #608]	; (80009f0 <HAL_GPIO_Init+0x2a0>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d875      	bhi.n	800087e <HAL_GPIO_Init+0x12e>
 8000792:	4a98      	ldr	r2, [pc, #608]	; (80009f4 <HAL_GPIO_Init+0x2a4>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d058      	beq.n	800084a <HAL_GPIO_Init+0xfa>
 8000798:	4a96      	ldr	r2, [pc, #600]	; (80009f4 <HAL_GPIO_Init+0x2a4>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d86f      	bhi.n	800087e <HAL_GPIO_Init+0x12e>
 800079e:	4a96      	ldr	r2, [pc, #600]	; (80009f8 <HAL_GPIO_Init+0x2a8>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d052      	beq.n	800084a <HAL_GPIO_Init+0xfa>
 80007a4:	4a94      	ldr	r2, [pc, #592]	; (80009f8 <HAL_GPIO_Init+0x2a8>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d869      	bhi.n	800087e <HAL_GPIO_Init+0x12e>
 80007aa:	4a94      	ldr	r2, [pc, #592]	; (80009fc <HAL_GPIO_Init+0x2ac>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d04c      	beq.n	800084a <HAL_GPIO_Init+0xfa>
 80007b0:	4a92      	ldr	r2, [pc, #584]	; (80009fc <HAL_GPIO_Init+0x2ac>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d863      	bhi.n	800087e <HAL_GPIO_Init+0x12e>
 80007b6:	4a92      	ldr	r2, [pc, #584]	; (8000a00 <HAL_GPIO_Init+0x2b0>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d046      	beq.n	800084a <HAL_GPIO_Init+0xfa>
 80007bc:	4a90      	ldr	r2, [pc, #576]	; (8000a00 <HAL_GPIO_Init+0x2b0>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d85d      	bhi.n	800087e <HAL_GPIO_Init+0x12e>
 80007c2:	2b12      	cmp	r3, #18
 80007c4:	d82a      	bhi.n	800081c <HAL_GPIO_Init+0xcc>
 80007c6:	2b12      	cmp	r3, #18
 80007c8:	d859      	bhi.n	800087e <HAL_GPIO_Init+0x12e>
 80007ca:	a201      	add	r2, pc, #4	; (adr r2, 80007d0 <HAL_GPIO_Init+0x80>)
 80007cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d0:	0800084b 	.word	0x0800084b
 80007d4:	08000825 	.word	0x08000825
 80007d8:	08000837 	.word	0x08000837
 80007dc:	08000879 	.word	0x08000879
 80007e0:	0800087f 	.word	0x0800087f
 80007e4:	0800087f 	.word	0x0800087f
 80007e8:	0800087f 	.word	0x0800087f
 80007ec:	0800087f 	.word	0x0800087f
 80007f0:	0800087f 	.word	0x0800087f
 80007f4:	0800087f 	.word	0x0800087f
 80007f8:	0800087f 	.word	0x0800087f
 80007fc:	0800087f 	.word	0x0800087f
 8000800:	0800087f 	.word	0x0800087f
 8000804:	0800087f 	.word	0x0800087f
 8000808:	0800087f 	.word	0x0800087f
 800080c:	0800087f 	.word	0x0800087f
 8000810:	0800087f 	.word	0x0800087f
 8000814:	0800082d 	.word	0x0800082d
 8000818:	08000841 	.word	0x08000841
 800081c:	4a79      	ldr	r2, [pc, #484]	; (8000a04 <HAL_GPIO_Init+0x2b4>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d013      	beq.n	800084a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000822:	e02c      	b.n	800087e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	623b      	str	r3, [r7, #32]
          break;
 800082a:	e029      	b.n	8000880 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	3304      	adds	r3, #4
 8000832:	623b      	str	r3, [r7, #32]
          break;
 8000834:	e024      	b.n	8000880 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	68db      	ldr	r3, [r3, #12]
 800083a:	3308      	adds	r3, #8
 800083c:	623b      	str	r3, [r7, #32]
          break;
 800083e:	e01f      	b.n	8000880 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	330c      	adds	r3, #12
 8000846:	623b      	str	r3, [r7, #32]
          break;
 8000848:	e01a      	b.n	8000880 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d102      	bne.n	8000858 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000852:	2304      	movs	r3, #4
 8000854:	623b      	str	r3, [r7, #32]
          break;
 8000856:	e013      	b.n	8000880 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d105      	bne.n	800086c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000860:	2308      	movs	r3, #8
 8000862:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	69fa      	ldr	r2, [r7, #28]
 8000868:	611a      	str	r2, [r3, #16]
          break;
 800086a:	e009      	b.n	8000880 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800086c:	2308      	movs	r3, #8
 800086e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	69fa      	ldr	r2, [r7, #28]
 8000874:	615a      	str	r2, [r3, #20]
          break;
 8000876:	e003      	b.n	8000880 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
          break;
 800087c:	e000      	b.n	8000880 <HAL_GPIO_Init+0x130>
          break;
 800087e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	2bff      	cmp	r3, #255	; 0xff
 8000884:	d801      	bhi.n	800088a <HAL_GPIO_Init+0x13a>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	e001      	b.n	800088e <HAL_GPIO_Init+0x13e>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3304      	adds	r3, #4
 800088e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	2bff      	cmp	r3, #255	; 0xff
 8000894:	d802      	bhi.n	800089c <HAL_GPIO_Init+0x14c>
 8000896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	e002      	b.n	80008a2 <HAL_GPIO_Init+0x152>
 800089c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089e:	3b08      	subs	r3, #8
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	210f      	movs	r1, #15
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	fa01 f303 	lsl.w	r3, r1, r3
 80008b0:	43db      	mvns	r3, r3
 80008b2:	401a      	ands	r2, r3
 80008b4:	6a39      	ldr	r1, [r7, #32]
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	fa01 f303 	lsl.w	r3, r1, r3
 80008bc:	431a      	orrs	r2, r3
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	f000 80b1 	beq.w	8000a32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008d0:	4b4d      	ldr	r3, [pc, #308]	; (8000a08 <HAL_GPIO_Init+0x2b8>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a4c      	ldr	r2, [pc, #304]	; (8000a08 <HAL_GPIO_Init+0x2b8>)
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b4a      	ldr	r3, [pc, #296]	; (8000a08 <HAL_GPIO_Init+0x2b8>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80008e8:	4a48      	ldr	r2, [pc, #288]	; (8000a0c <HAL_GPIO_Init+0x2bc>)
 80008ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ec:	089b      	lsrs	r3, r3, #2
 80008ee:	3302      	adds	r3, #2
 80008f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f8:	f003 0303 	and.w	r3, r3, #3
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	220f      	movs	r2, #15
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	43db      	mvns	r3, r3
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	4013      	ands	r3, r2
 800090a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a40      	ldr	r2, [pc, #256]	; (8000a10 <HAL_GPIO_Init+0x2c0>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d013      	beq.n	800093c <HAL_GPIO_Init+0x1ec>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a3f      	ldr	r2, [pc, #252]	; (8000a14 <HAL_GPIO_Init+0x2c4>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d00d      	beq.n	8000938 <HAL_GPIO_Init+0x1e8>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a3e      	ldr	r2, [pc, #248]	; (8000a18 <HAL_GPIO_Init+0x2c8>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d007      	beq.n	8000934 <HAL_GPIO_Init+0x1e4>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a3d      	ldr	r2, [pc, #244]	; (8000a1c <HAL_GPIO_Init+0x2cc>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d101      	bne.n	8000930 <HAL_GPIO_Init+0x1e0>
 800092c:	2303      	movs	r3, #3
 800092e:	e006      	b.n	800093e <HAL_GPIO_Init+0x1ee>
 8000930:	2304      	movs	r3, #4
 8000932:	e004      	b.n	800093e <HAL_GPIO_Init+0x1ee>
 8000934:	2302      	movs	r3, #2
 8000936:	e002      	b.n	800093e <HAL_GPIO_Init+0x1ee>
 8000938:	2301      	movs	r3, #1
 800093a:	e000      	b.n	800093e <HAL_GPIO_Init+0x1ee>
 800093c:	2300      	movs	r3, #0
 800093e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000940:	f002 0203 	and.w	r2, r2, #3
 8000944:	0092      	lsls	r2, r2, #2
 8000946:	4093      	lsls	r3, r2
 8000948:	68fa      	ldr	r2, [r7, #12]
 800094a:	4313      	orrs	r3, r2
 800094c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800094e:	492f      	ldr	r1, [pc, #188]	; (8000a0c <HAL_GPIO_Init+0x2bc>)
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	089b      	lsrs	r3, r3, #2
 8000954:	3302      	adds	r3, #2
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000964:	2b00      	cmp	r3, #0
 8000966:	d006      	beq.n	8000976 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000968:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <HAL_GPIO_Init+0x2d0>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	492c      	ldr	r1, [pc, #176]	; (8000a20 <HAL_GPIO_Init+0x2d0>)
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	4313      	orrs	r3, r2
 8000972:	600b      	str	r3, [r1, #0]
 8000974:	e006      	b.n	8000984 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000976:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <HAL_GPIO_Init+0x2d0>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	43db      	mvns	r3, r3
 800097e:	4928      	ldr	r1, [pc, #160]	; (8000a20 <HAL_GPIO_Init+0x2d0>)
 8000980:	4013      	ands	r3, r2
 8000982:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098c:	2b00      	cmp	r3, #0
 800098e:	d006      	beq.n	800099e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000990:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <HAL_GPIO_Init+0x2d0>)
 8000992:	685a      	ldr	r2, [r3, #4]
 8000994:	4922      	ldr	r1, [pc, #136]	; (8000a20 <HAL_GPIO_Init+0x2d0>)
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	4313      	orrs	r3, r2
 800099a:	604b      	str	r3, [r1, #4]
 800099c:	e006      	b.n	80009ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800099e:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <HAL_GPIO_Init+0x2d0>)
 80009a0:	685a      	ldr	r2, [r3, #4]
 80009a2:	69bb      	ldr	r3, [r7, #24]
 80009a4:	43db      	mvns	r3, r3
 80009a6:	491e      	ldr	r1, [pc, #120]	; (8000a20 <HAL_GPIO_Init+0x2d0>)
 80009a8:	4013      	ands	r3, r2
 80009aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d006      	beq.n	80009c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <HAL_GPIO_Init+0x2d0>)
 80009ba:	689a      	ldr	r2, [r3, #8]
 80009bc:	4918      	ldr	r1, [pc, #96]	; (8000a20 <HAL_GPIO_Init+0x2d0>)
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	608b      	str	r3, [r1, #8]
 80009c4:	e006      	b.n	80009d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009c6:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <HAL_GPIO_Init+0x2d0>)
 80009c8:	689a      	ldr	r2, [r3, #8]
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	43db      	mvns	r3, r3
 80009ce:	4914      	ldr	r1, [pc, #80]	; (8000a20 <HAL_GPIO_Init+0x2d0>)
 80009d0:	4013      	ands	r3, r2
 80009d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d021      	beq.n	8000a24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <HAL_GPIO_Init+0x2d0>)
 80009e2:	68da      	ldr	r2, [r3, #12]
 80009e4:	490e      	ldr	r1, [pc, #56]	; (8000a20 <HAL_GPIO_Init+0x2d0>)
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	60cb      	str	r3, [r1, #12]
 80009ec:	e021      	b.n	8000a32 <HAL_GPIO_Init+0x2e2>
 80009ee:	bf00      	nop
 80009f0:	10320000 	.word	0x10320000
 80009f4:	10310000 	.word	0x10310000
 80009f8:	10220000 	.word	0x10220000
 80009fc:	10210000 	.word	0x10210000
 8000a00:	10120000 	.word	0x10120000
 8000a04:	10110000 	.word	0x10110000
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40010000 	.word	0x40010000
 8000a10:	40010800 	.word	0x40010800
 8000a14:	40010c00 	.word	0x40010c00
 8000a18:	40011000 	.word	0x40011000
 8000a1c:	40011400 	.word	0x40011400
 8000a20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a24:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <HAL_GPIO_Init+0x304>)
 8000a26:	68da      	ldr	r2, [r3, #12]
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	4909      	ldr	r1, [pc, #36]	; (8000a54 <HAL_GPIO_Init+0x304>)
 8000a2e:	4013      	ands	r3, r2
 8000a30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a34:	3301      	adds	r3, #1
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	f47f ae8e 	bne.w	8000764 <HAL_GPIO_Init+0x14>
  }
}
 8000a48:	bf00      	nop
 8000a4a:	bf00      	nop
 8000a4c:	372c      	adds	r7, #44	; 0x2c
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	40010400 	.word	0x40010400

08000a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d101      	bne.n	8000a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e26c      	b.n	8000f44 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f000 8087 	beq.w	8000b86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a78:	4b92      	ldr	r3, [pc, #584]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f003 030c 	and.w	r3, r3, #12
 8000a80:	2b04      	cmp	r3, #4
 8000a82:	d00c      	beq.n	8000a9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a84:	4b8f      	ldr	r3, [pc, #572]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f003 030c 	and.w	r3, r3, #12
 8000a8c:	2b08      	cmp	r3, #8
 8000a8e:	d112      	bne.n	8000ab6 <HAL_RCC_OscConfig+0x5e>
 8000a90:	4b8c      	ldr	r3, [pc, #560]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a9c:	d10b      	bne.n	8000ab6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a9e:	4b89      	ldr	r3, [pc, #548]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d06c      	beq.n	8000b84 <HAL_RCC_OscConfig+0x12c>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d168      	bne.n	8000b84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e246      	b.n	8000f44 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000abe:	d106      	bne.n	8000ace <HAL_RCC_OscConfig+0x76>
 8000ac0:	4b80      	ldr	r3, [pc, #512]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a7f      	ldr	r2, [pc, #508]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	e02e      	b.n	8000b2c <HAL_RCC_OscConfig+0xd4>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d10c      	bne.n	8000af0 <HAL_RCC_OscConfig+0x98>
 8000ad6:	4b7b      	ldr	r3, [pc, #492]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a7a      	ldr	r2, [pc, #488]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ae0:	6013      	str	r3, [r2, #0]
 8000ae2:	4b78      	ldr	r3, [pc, #480]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a77      	ldr	r2, [pc, #476]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	e01d      	b.n	8000b2c <HAL_RCC_OscConfig+0xd4>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000af8:	d10c      	bne.n	8000b14 <HAL_RCC_OscConfig+0xbc>
 8000afa:	4b72      	ldr	r3, [pc, #456]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a71      	ldr	r2, [pc, #452]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b04:	6013      	str	r3, [r2, #0]
 8000b06:	4b6f      	ldr	r3, [pc, #444]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a6e      	ldr	r2, [pc, #440]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b10:	6013      	str	r3, [r2, #0]
 8000b12:	e00b      	b.n	8000b2c <HAL_RCC_OscConfig+0xd4>
 8000b14:	4b6b      	ldr	r3, [pc, #428]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a6a      	ldr	r2, [pc, #424]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b1e:	6013      	str	r3, [r2, #0]
 8000b20:	4b68      	ldr	r3, [pc, #416]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a67      	ldr	r2, [pc, #412]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d013      	beq.n	8000b5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b34:	f7ff fd22 	bl	800057c <HAL_GetTick>
 8000b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b3a:	e008      	b.n	8000b4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b3c:	f7ff fd1e 	bl	800057c <HAL_GetTick>
 8000b40:	4602      	mov	r2, r0
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	2b64      	cmp	r3, #100	; 0x64
 8000b48:	d901      	bls.n	8000b4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	e1fa      	b.n	8000f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b4e:	4b5d      	ldr	r3, [pc, #372]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d0f0      	beq.n	8000b3c <HAL_RCC_OscConfig+0xe4>
 8000b5a:	e014      	b.n	8000b86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b5c:	f7ff fd0e 	bl	800057c <HAL_GetTick>
 8000b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b62:	e008      	b.n	8000b76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b64:	f7ff fd0a 	bl	800057c <HAL_GetTick>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	2b64      	cmp	r3, #100	; 0x64
 8000b70:	d901      	bls.n	8000b76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b72:	2303      	movs	r3, #3
 8000b74:	e1e6      	b.n	8000f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b76:	4b53      	ldr	r3, [pc, #332]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d1f0      	bne.n	8000b64 <HAL_RCC_OscConfig+0x10c>
 8000b82:	e000      	b.n	8000b86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d063      	beq.n	8000c5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b92:	4b4c      	ldr	r3, [pc, #304]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f003 030c 	and.w	r3, r3, #12
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d00b      	beq.n	8000bb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b9e:	4b49      	ldr	r3, [pc, #292]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f003 030c 	and.w	r3, r3, #12
 8000ba6:	2b08      	cmp	r3, #8
 8000ba8:	d11c      	bne.n	8000be4 <HAL_RCC_OscConfig+0x18c>
 8000baa:	4b46      	ldr	r3, [pc, #280]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d116      	bne.n	8000be4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bb6:	4b43      	ldr	r3, [pc, #268]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d005      	beq.n	8000bce <HAL_RCC_OscConfig+0x176>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	691b      	ldr	r3, [r3, #16]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d001      	beq.n	8000bce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e1ba      	b.n	8000f44 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bce:	4b3d      	ldr	r3, [pc, #244]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	00db      	lsls	r3, r3, #3
 8000bdc:	4939      	ldr	r1, [pc, #228]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000bde:	4313      	orrs	r3, r2
 8000be0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000be2:	e03a      	b.n	8000c5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d020      	beq.n	8000c2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bec:	4b36      	ldr	r3, [pc, #216]	; (8000cc8 <HAL_RCC_OscConfig+0x270>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf2:	f7ff fcc3 	bl	800057c <HAL_GetTick>
 8000bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bf8:	e008      	b.n	8000c0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bfa:	f7ff fcbf 	bl	800057c <HAL_GetTick>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d901      	bls.n	8000c0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	e19b      	b.n	8000f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c0c:	4b2d      	ldr	r3, [pc, #180]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d0f0      	beq.n	8000bfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c18:	4b2a      	ldr	r3, [pc, #168]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	4927      	ldr	r1, [pc, #156]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	600b      	str	r3, [r1, #0]
 8000c2c:	e015      	b.n	8000c5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c2e:	4b26      	ldr	r3, [pc, #152]	; (8000cc8 <HAL_RCC_OscConfig+0x270>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c34:	f7ff fca2 	bl	800057c <HAL_GetTick>
 8000c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c3a:	e008      	b.n	8000c4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c3c:	f7ff fc9e 	bl	800057c <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d901      	bls.n	8000c4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	e17a      	b.n	8000f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1f0      	bne.n	8000c3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0308 	and.w	r3, r3, #8
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d03a      	beq.n	8000cdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d019      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c6e:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <HAL_RCC_OscConfig+0x274>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c74:	f7ff fc82 	bl	800057c <HAL_GetTick>
 8000c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c7a:	e008      	b.n	8000c8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c7c:	f7ff fc7e 	bl	800057c <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d901      	bls.n	8000c8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e15a      	b.n	8000f44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d0f0      	beq.n	8000c7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f000 faf4 	bl	8001288 <RCC_Delay>
 8000ca0:	e01c      	b.n	8000cdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_RCC_OscConfig+0x274>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ca8:	f7ff fc68 	bl	800057c <HAL_GetTick>
 8000cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cae:	e00f      	b.n	8000cd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cb0:	f7ff fc64 	bl	800057c <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d908      	bls.n	8000cd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	e140      	b.n	8000f44 <HAL_RCC_OscConfig+0x4ec>
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	42420000 	.word	0x42420000
 8000ccc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cd0:	4b9e      	ldr	r3, [pc, #632]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd4:	f003 0302 	and.w	r3, r3, #2
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1e9      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f000 80a6 	beq.w	8000e36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cea:	2300      	movs	r3, #0
 8000cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cee:	4b97      	ldr	r3, [pc, #604]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d10d      	bne.n	8000d16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cfa:	4b94      	ldr	r3, [pc, #592]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	4a93      	ldr	r2, [pc, #588]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d04:	61d3      	str	r3, [r2, #28]
 8000d06:	4b91      	ldr	r3, [pc, #580]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d12:	2301      	movs	r3, #1
 8000d14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d16:	4b8e      	ldr	r3, [pc, #568]	; (8000f50 <HAL_RCC_OscConfig+0x4f8>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d118      	bne.n	8000d54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d22:	4b8b      	ldr	r3, [pc, #556]	; (8000f50 <HAL_RCC_OscConfig+0x4f8>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a8a      	ldr	r2, [pc, #552]	; (8000f50 <HAL_RCC_OscConfig+0x4f8>)
 8000d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d2e:	f7ff fc25 	bl	800057c <HAL_GetTick>
 8000d32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d34:	e008      	b.n	8000d48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d36:	f7ff fc21 	bl	800057c <HAL_GetTick>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	2b64      	cmp	r3, #100	; 0x64
 8000d42:	d901      	bls.n	8000d48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d44:	2303      	movs	r3, #3
 8000d46:	e0fd      	b.n	8000f44 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d48:	4b81      	ldr	r3, [pc, #516]	; (8000f50 <HAL_RCC_OscConfig+0x4f8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d0f0      	beq.n	8000d36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d106      	bne.n	8000d6a <HAL_RCC_OscConfig+0x312>
 8000d5c:	4b7b      	ldr	r3, [pc, #492]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000d5e:	6a1b      	ldr	r3, [r3, #32]
 8000d60:	4a7a      	ldr	r2, [pc, #488]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	6213      	str	r3, [r2, #32]
 8000d68:	e02d      	b.n	8000dc6 <HAL_RCC_OscConfig+0x36e>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10c      	bne.n	8000d8c <HAL_RCC_OscConfig+0x334>
 8000d72:	4b76      	ldr	r3, [pc, #472]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000d74:	6a1b      	ldr	r3, [r3, #32]
 8000d76:	4a75      	ldr	r2, [pc, #468]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000d78:	f023 0301 	bic.w	r3, r3, #1
 8000d7c:	6213      	str	r3, [r2, #32]
 8000d7e:	4b73      	ldr	r3, [pc, #460]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000d80:	6a1b      	ldr	r3, [r3, #32]
 8000d82:	4a72      	ldr	r2, [pc, #456]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000d84:	f023 0304 	bic.w	r3, r3, #4
 8000d88:	6213      	str	r3, [r2, #32]
 8000d8a:	e01c      	b.n	8000dc6 <HAL_RCC_OscConfig+0x36e>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	2b05      	cmp	r3, #5
 8000d92:	d10c      	bne.n	8000dae <HAL_RCC_OscConfig+0x356>
 8000d94:	4b6d      	ldr	r3, [pc, #436]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000d96:	6a1b      	ldr	r3, [r3, #32]
 8000d98:	4a6c      	ldr	r2, [pc, #432]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000d9a:	f043 0304 	orr.w	r3, r3, #4
 8000d9e:	6213      	str	r3, [r2, #32]
 8000da0:	4b6a      	ldr	r3, [pc, #424]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000da2:	6a1b      	ldr	r3, [r3, #32]
 8000da4:	4a69      	ldr	r2, [pc, #420]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6213      	str	r3, [r2, #32]
 8000dac:	e00b      	b.n	8000dc6 <HAL_RCC_OscConfig+0x36e>
 8000dae:	4b67      	ldr	r3, [pc, #412]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000db0:	6a1b      	ldr	r3, [r3, #32]
 8000db2:	4a66      	ldr	r2, [pc, #408]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000db4:	f023 0301 	bic.w	r3, r3, #1
 8000db8:	6213      	str	r3, [r2, #32]
 8000dba:	4b64      	ldr	r3, [pc, #400]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000dbc:	6a1b      	ldr	r3, [r3, #32]
 8000dbe:	4a63      	ldr	r2, [pc, #396]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000dc0:	f023 0304 	bic.w	r3, r3, #4
 8000dc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d015      	beq.n	8000dfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dce:	f7ff fbd5 	bl	800057c <HAL_GetTick>
 8000dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dd4:	e00a      	b.n	8000dec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dd6:	f7ff fbd1 	bl	800057c <HAL_GetTick>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d901      	bls.n	8000dec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000de8:	2303      	movs	r3, #3
 8000dea:	e0ab      	b.n	8000f44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dec:	4b57      	ldr	r3, [pc, #348]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000dee:	6a1b      	ldr	r3, [r3, #32]
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d0ee      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x37e>
 8000df8:	e014      	b.n	8000e24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dfa:	f7ff fbbf 	bl	800057c <HAL_GetTick>
 8000dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e00:	e00a      	b.n	8000e18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e02:	f7ff fbbb 	bl	800057c <HAL_GetTick>
 8000e06:	4602      	mov	r2, r0
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d901      	bls.n	8000e18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e14:	2303      	movs	r3, #3
 8000e16:	e095      	b.n	8000f44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e18:	4b4c      	ldr	r3, [pc, #304]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000e1a:	6a1b      	ldr	r3, [r3, #32]
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d1ee      	bne.n	8000e02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d105      	bne.n	8000e36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e2a:	4b48      	ldr	r3, [pc, #288]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	4a47      	ldr	r2, [pc, #284]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 8081 	beq.w	8000f42 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e40:	4b42      	ldr	r3, [pc, #264]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 030c 	and.w	r3, r3, #12
 8000e48:	2b08      	cmp	r3, #8
 8000e4a:	d061      	beq.n	8000f10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	69db      	ldr	r3, [r3, #28]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d146      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e54:	4b3f      	ldr	r3, [pc, #252]	; (8000f54 <HAL_RCC_OscConfig+0x4fc>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5a:	f7ff fb8f 	bl	800057c <HAL_GetTick>
 8000e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e60:	e008      	b.n	8000e74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e62:	f7ff fb8b 	bl	800057c <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d901      	bls.n	8000e74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e067      	b.n	8000f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e74:	4b35      	ldr	r3, [pc, #212]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1f0      	bne.n	8000e62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e88:	d108      	bne.n	8000e9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e8a:	4b30      	ldr	r3, [pc, #192]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	492d      	ldr	r1, [pc, #180]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e9c:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a19      	ldr	r1, [r3, #32]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eac:	430b      	orrs	r3, r1
 8000eae:	4927      	ldr	r1, [pc, #156]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000eb4:	4b27      	ldr	r3, [pc, #156]	; (8000f54 <HAL_RCC_OscConfig+0x4fc>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eba:	f7ff fb5f 	bl	800057c <HAL_GetTick>
 8000ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ec0:	e008      	b.n	8000ed4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ec2:	f7ff fb5b 	bl	800057c <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d901      	bls.n	8000ed4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e037      	b.n	8000f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d0f0      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x46a>
 8000ee0:	e02f      	b.n	8000f42 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <HAL_RCC_OscConfig+0x4fc>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fb48 	bl	800057c <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ef0:	f7ff fb44 	bl	800057c <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e020      	b.n	8000f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f02:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f0      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x498>
 8000f0e:	e018      	b.n	8000f42 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69db      	ldr	r3, [r3, #28]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d101      	bne.n	8000f1c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e013      	b.n	8000f44 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_RCC_OscConfig+0x4f4>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d106      	bne.n	8000f3e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d001      	beq.n	8000f42 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e000      	b.n	8000f44 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40007000 	.word	0x40007000
 8000f54:	42420060 	.word	0x42420060

08000f58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e0d0      	b.n	800110e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f6c:	4b6a      	ldr	r3, [pc, #424]	; (8001118 <HAL_RCC_ClockConfig+0x1c0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d910      	bls.n	8000f9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f7a:	4b67      	ldr	r3, [pc, #412]	; (8001118 <HAL_RCC_ClockConfig+0x1c0>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f023 0207 	bic.w	r2, r3, #7
 8000f82:	4965      	ldr	r1, [pc, #404]	; (8001118 <HAL_RCC_ClockConfig+0x1c0>)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f8a:	4b63      	ldr	r3, [pc, #396]	; (8001118 <HAL_RCC_ClockConfig+0x1c0>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d001      	beq.n	8000f9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e0b8      	b.n	800110e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d020      	beq.n	8000fea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d005      	beq.n	8000fc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fb4:	4b59      	ldr	r3, [pc, #356]	; (800111c <HAL_RCC_ClockConfig+0x1c4>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	4a58      	ldr	r2, [pc, #352]	; (800111c <HAL_RCC_ClockConfig+0x1c4>)
 8000fba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000fbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0308 	and.w	r3, r3, #8
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d005      	beq.n	8000fd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fcc:	4b53      	ldr	r3, [pc, #332]	; (800111c <HAL_RCC_ClockConfig+0x1c4>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	4a52      	ldr	r2, [pc, #328]	; (800111c <HAL_RCC_ClockConfig+0x1c4>)
 8000fd2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000fd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fd8:	4b50      	ldr	r3, [pc, #320]	; (800111c <HAL_RCC_ClockConfig+0x1c4>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	494d      	ldr	r1, [pc, #308]	; (800111c <HAL_RCC_ClockConfig+0x1c4>)
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d040      	beq.n	8001078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d107      	bne.n	800100e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffe:	4b47      	ldr	r3, [pc, #284]	; (800111c <HAL_RCC_ClockConfig+0x1c4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d115      	bne.n	8001036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e07f      	b.n	800110e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b02      	cmp	r3, #2
 8001014:	d107      	bne.n	8001026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001016:	4b41      	ldr	r3, [pc, #260]	; (800111c <HAL_RCC_ClockConfig+0x1c4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d109      	bne.n	8001036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e073      	b.n	800110e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001026:	4b3d      	ldr	r3, [pc, #244]	; (800111c <HAL_RCC_ClockConfig+0x1c4>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e06b      	b.n	800110e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001036:	4b39      	ldr	r3, [pc, #228]	; (800111c <HAL_RCC_ClockConfig+0x1c4>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f023 0203 	bic.w	r2, r3, #3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	4936      	ldr	r1, [pc, #216]	; (800111c <HAL_RCC_ClockConfig+0x1c4>)
 8001044:	4313      	orrs	r3, r2
 8001046:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001048:	f7ff fa98 	bl	800057c <HAL_GetTick>
 800104c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800104e:	e00a      	b.n	8001066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001050:	f7ff fa94 	bl	800057c <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	f241 3288 	movw	r2, #5000	; 0x1388
 800105e:	4293      	cmp	r3, r2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e053      	b.n	800110e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001066:	4b2d      	ldr	r3, [pc, #180]	; (800111c <HAL_RCC_ClockConfig+0x1c4>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 020c 	and.w	r2, r3, #12
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	429a      	cmp	r2, r3
 8001076:	d1eb      	bne.n	8001050 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001078:	4b27      	ldr	r3, [pc, #156]	; (8001118 <HAL_RCC_ClockConfig+0x1c0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	429a      	cmp	r2, r3
 8001084:	d210      	bcs.n	80010a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001086:	4b24      	ldr	r3, [pc, #144]	; (8001118 <HAL_RCC_ClockConfig+0x1c0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f023 0207 	bic.w	r2, r3, #7
 800108e:	4922      	ldr	r1, [pc, #136]	; (8001118 <HAL_RCC_ClockConfig+0x1c0>)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	4313      	orrs	r3, r2
 8001094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001096:	4b20      	ldr	r3, [pc, #128]	; (8001118 <HAL_RCC_ClockConfig+0x1c0>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d001      	beq.n	80010a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e032      	b.n	800110e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d008      	beq.n	80010c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010b4:	4b19      	ldr	r3, [pc, #100]	; (800111c <HAL_RCC_ClockConfig+0x1c4>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	4916      	ldr	r1, [pc, #88]	; (800111c <HAL_RCC_ClockConfig+0x1c4>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d009      	beq.n	80010e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_RCC_ClockConfig+0x1c4>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	490e      	ldr	r1, [pc, #56]	; (800111c <HAL_RCC_ClockConfig+0x1c4>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010e6:	f000 f821 	bl	800112c <HAL_RCC_GetSysClockFreq>
 80010ea:	4602      	mov	r2, r0
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <HAL_RCC_ClockConfig+0x1c4>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	091b      	lsrs	r3, r3, #4
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	490a      	ldr	r1, [pc, #40]	; (8001120 <HAL_RCC_ClockConfig+0x1c8>)
 80010f8:	5ccb      	ldrb	r3, [r1, r3]
 80010fa:	fa22 f303 	lsr.w	r3, r2, r3
 80010fe:	4a09      	ldr	r2, [pc, #36]	; (8001124 <HAL_RCC_ClockConfig+0x1cc>)
 8001100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_RCC_ClockConfig+0x1d0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff f96e 	bl	80003e8 <HAL_InitTick>

  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40022000 	.word	0x40022000
 800111c:	40021000 	.word	0x40021000
 8001120:	08001cac 	.word	0x08001cac
 8001124:	20000000 	.word	0x20000000
 8001128:	20000004 	.word	0x20000004

0800112c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800112c:	b490      	push	{r4, r7}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001132:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001134:	1d3c      	adds	r4, r7, #4
 8001136:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001138:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800113c:	f240 2301 	movw	r3, #513	; 0x201
 8001140:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001156:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f003 030c 	and.w	r3, r3, #12
 8001162:	2b04      	cmp	r3, #4
 8001164:	d002      	beq.n	800116c <HAL_RCC_GetSysClockFreq+0x40>
 8001166:	2b08      	cmp	r3, #8
 8001168:	d003      	beq.n	8001172 <HAL_RCC_GetSysClockFreq+0x46>
 800116a:	e02d      	b.n	80011c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800116e:	623b      	str	r3, [r7, #32]
      break;
 8001170:	e02d      	b.n	80011ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	0c9b      	lsrs	r3, r3, #18
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800117e:	4413      	add	r3, r2
 8001180:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001184:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d013      	beq.n	80011b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	0c5b      	lsrs	r3, r3, #17
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800119e:	4413      	add	r3, r2
 80011a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80011a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80011aa:	fb02 f203 	mul.w	r2, r2, r3
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
 80011b6:	e004      	b.n	80011c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80011bc:	fb02 f303 	mul.w	r3, r2, r3
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80011c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c4:	623b      	str	r3, [r7, #32]
      break;
 80011c6:	e002      	b.n	80011ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80011ca:	623b      	str	r3, [r7, #32]
      break;
 80011cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80011ce:	6a3b      	ldr	r3, [r7, #32]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3728      	adds	r7, #40	; 0x28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc90      	pop	{r4, r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	08001c9c 	.word	0x08001c9c
 80011e0:	40021000 	.word	0x40021000
 80011e4:	007a1200 	.word	0x007a1200
 80011e8:	003d0900 	.word	0x003d0900

080011ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011f0:	4b02      	ldr	r3, [pc, #8]	; (80011fc <HAL_RCC_GetHCLKFreq+0x10>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	20000000 	.word	0x20000000

08001200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001204:	f7ff fff2 	bl	80011ec <HAL_RCC_GetHCLKFreq>
 8001208:	4602      	mov	r2, r0
 800120a:	4b05      	ldr	r3, [pc, #20]	; (8001220 <HAL_RCC_GetPCLK2Freq+0x20>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	0adb      	lsrs	r3, r3, #11
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	4903      	ldr	r1, [pc, #12]	; (8001224 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001216:	5ccb      	ldrb	r3, [r1, r3]
 8001218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800121c:	4618      	mov	r0, r3
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40021000 	.word	0x40021000
 8001224:	08001cbc 	.word	0x08001cbc

08001228 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	220f      	movs	r2, #15
 8001236:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_RCC_GetClockConfig+0x58>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0203 	and.w	r2, r3, #3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_RCC_GetClockConfig+0x58>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_RCC_GetClockConfig+0x58>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <HAL_RCC_GetClockConfig+0x58>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	08db      	lsrs	r3, r3, #3
 8001262:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_RCC_GetClockConfig+0x5c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0207 	and.w	r2, r3, #7
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	40021000 	.word	0x40021000
 8001284:	40022000 	.word	0x40022000

08001288 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001290:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <RCC_Delay+0x34>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <RCC_Delay+0x38>)
 8001296:	fba2 2303 	umull	r2, r3, r2, r3
 800129a:	0a5b      	lsrs	r3, r3, #9
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	fb02 f303 	mul.w	r3, r2, r3
 80012a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80012a4:	bf00      	nop
  }
  while (Delay --);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	1e5a      	subs	r2, r3, #1
 80012aa:	60fa      	str	r2, [r7, #12]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f9      	bne.n	80012a4 <RCC_Delay+0x1c>
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	20000000 	.word	0x20000000
 80012c0:	10624dd3 	.word	0x10624dd3

080012c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e076      	b.n	80013c4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d108      	bne.n	80012f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80012e6:	d009      	beq.n	80012fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
 80012ee:	e005      	b.n	80012fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d106      	bne.n	800131c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff f81c 	bl	8000354 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2202      	movs	r2, #2
 8001320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001332:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800134e:	431a      	orrs	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	431a      	orrs	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	431a      	orrs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800136c:	431a      	orrs	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001376:	431a      	orrs	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001380:	ea42 0103 	orr.w	r1, r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001388:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	0c1a      	lsrs	r2, r3, #16
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f002 0204 	and.w	r2, r2, #4
 80013a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	69da      	ldr	r2, [r3, #28]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2201      	movs	r2, #1
 80013be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e041      	b.n	8001462 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d106      	bne.n	80013f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 f839 	bl	800146a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2202      	movs	r2, #2
 80013fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3304      	adds	r3, #4
 8001408:	4619      	mov	r1, r3
 800140a:	4610      	mov	r0, r2
 800140c:	f000 f9b4 	bl	8001778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2201      	movs	r2, #1
 800141c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b01      	cmp	r3, #1
 800148e:	d001      	beq.n	8001494 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e03a      	b.n	800150a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2202      	movs	r2, #2
 8001498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68da      	ldr	r2, [r3, #12]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f042 0201 	orr.w	r2, r2, #1
 80014aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a18      	ldr	r2, [pc, #96]	; (8001514 <HAL_TIM_Base_Start_IT+0x98>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d00e      	beq.n	80014d4 <HAL_TIM_Base_Start_IT+0x58>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014be:	d009      	beq.n	80014d4 <HAL_TIM_Base_Start_IT+0x58>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a14      	ldr	r2, [pc, #80]	; (8001518 <HAL_TIM_Base_Start_IT+0x9c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d004      	beq.n	80014d4 <HAL_TIM_Base_Start_IT+0x58>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a13      	ldr	r2, [pc, #76]	; (800151c <HAL_TIM_Base_Start_IT+0xa0>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d111      	bne.n	80014f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d010      	beq.n	8001508 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f042 0201 	orr.w	r2, r2, #1
 80014f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014f6:	e007      	b.n	8001508 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 0201 	orr.w	r2, r2, #1
 8001506:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	40012c00 	.word	0x40012c00
 8001518:	40000400 	.word	0x40000400
 800151c:	40000800 	.word	0x40000800

08001520 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b02      	cmp	r3, #2
 8001534:	d122      	bne.n	800157c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b02      	cmp	r3, #2
 8001542:	d11b      	bne.n	800157c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f06f 0202 	mvn.w	r2, #2
 800154c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2201      	movs	r2, #1
 8001552:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 f8ed 	bl	8001742 <HAL_TIM_IC_CaptureCallback>
 8001568:	e005      	b.n	8001576 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f8e0 	bl	8001730 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f8ef 	bl	8001754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	2b04      	cmp	r3, #4
 8001588:	d122      	bne.n	80015d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b04      	cmp	r3, #4
 8001596:	d11b      	bne.n	80015d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f06f 0204 	mvn.w	r2, #4
 80015a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2202      	movs	r2, #2
 80015a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f8c3 	bl	8001742 <HAL_TIM_IC_CaptureCallback>
 80015bc:	e005      	b.n	80015ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 f8b6 	bl	8001730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f8c5 	bl	8001754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d122      	bne.n	8001624 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d11b      	bne.n	8001624 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f06f 0208 	mvn.w	r2, #8
 80015f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2204      	movs	r2, #4
 80015fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f899 	bl	8001742 <HAL_TIM_IC_CaptureCallback>
 8001610:	e005      	b.n	800161e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f88c 	bl	8001730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f89b 	bl	8001754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	2b10      	cmp	r3, #16
 8001630:	d122      	bne.n	8001678 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	2b10      	cmp	r3, #16
 800163e:	d11b      	bne.n	8001678 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f06f 0210 	mvn.w	r2, #16
 8001648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2208      	movs	r2, #8
 800164e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f86f 	bl	8001742 <HAL_TIM_IC_CaptureCallback>
 8001664:	e005      	b.n	8001672 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f862 	bl	8001730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f871 	bl	8001754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b01      	cmp	r3, #1
 8001684:	d10e      	bne.n	80016a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b01      	cmp	r3, #1
 8001692:	d107      	bne.n	80016a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f06f 0201 	mvn.w	r2, #1
 800169c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7fe fe08 	bl	80002b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ae:	2b80      	cmp	r3, #128	; 0x80
 80016b0:	d10e      	bne.n	80016d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016bc:	2b80      	cmp	r3, #128	; 0x80
 80016be:	d107      	bne.n	80016d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f8bf 	bl	800184e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016da:	2b40      	cmp	r3, #64	; 0x40
 80016dc:	d10e      	bne.n	80016fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e8:	2b40      	cmp	r3, #64	; 0x40
 80016ea:	d107      	bne.n	80016fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f835 	bl	8001766 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	f003 0320 	and.w	r3, r3, #32
 8001706:	2b20      	cmp	r3, #32
 8001708:	d10e      	bne.n	8001728 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	f003 0320 	and.w	r3, r3, #32
 8001714:	2b20      	cmp	r3, #32
 8001716:	d107      	bne.n	8001728 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f06f 0220 	mvn.w	r2, #32
 8001720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f88a 	bl	800183c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr

08001742 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr

08001766 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a29      	ldr	r2, [pc, #164]	; (8001830 <TIM_Base_SetConfig+0xb8>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d00b      	beq.n	80017a8 <TIM_Base_SetConfig+0x30>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001796:	d007      	beq.n	80017a8 <TIM_Base_SetConfig+0x30>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a26      	ldr	r2, [pc, #152]	; (8001834 <TIM_Base_SetConfig+0xbc>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d003      	beq.n	80017a8 <TIM_Base_SetConfig+0x30>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a25      	ldr	r2, [pc, #148]	; (8001838 <TIM_Base_SetConfig+0xc0>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d108      	bne.n	80017ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a1c      	ldr	r2, [pc, #112]	; (8001830 <TIM_Base_SetConfig+0xb8>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d00b      	beq.n	80017da <TIM_Base_SetConfig+0x62>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c8:	d007      	beq.n	80017da <TIM_Base_SetConfig+0x62>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a19      	ldr	r2, [pc, #100]	; (8001834 <TIM_Base_SetConfig+0xbc>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d003      	beq.n	80017da <TIM_Base_SetConfig+0x62>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a18      	ldr	r2, [pc, #96]	; (8001838 <TIM_Base_SetConfig+0xc0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d108      	bne.n	80017ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a07      	ldr	r2, [pc, #28]	; (8001830 <TIM_Base_SetConfig+0xb8>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d103      	bne.n	8001820 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	691a      	ldr	r2, [r3, #16]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	615a      	str	r2, [r3, #20]
}
 8001826:	bf00      	nop
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	40012c00 	.word	0x40012c00
 8001834:	40000400 	.word	0x40000400
 8001838:	40000800 	.word	0x40000800

0800183c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr

0800184e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	601a      	str	r2, [r3, #0]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr

080018a6 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80018a6:	b480      	push	{r7}
 80018a8:	b085      	sub	sp, #20
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6892      	ldr	r2, [r2, #8]
 80018bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6852      	ldr	r2, [r2, #4]
 80018c6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d103      	bne.n	80018da <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	1e5a      	subs	r2, r3, #1
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001902:	4b51      	ldr	r3, [pc, #324]	; (8001a48 <xTaskIncrementTick+0x150>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	f040 808d 	bne.w	8001a26 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800190c:	4b4f      	ldr	r3, [pc, #316]	; (8001a4c <xTaskIncrementTick+0x154>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	3301      	adds	r3, #1
 8001912:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001914:	4a4d      	ldr	r2, [pc, #308]	; (8001a4c <xTaskIncrementTick+0x154>)
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d120      	bne.n	8001962 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001920:	4b4b      	ldr	r3, [pc, #300]	; (8001a50 <xTaskIncrementTick+0x158>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00a      	beq.n	8001940 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800192a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800192e:	f383 8811 	msr	BASEPRI, r3
 8001932:	f3bf 8f6f 	isb	sy
 8001936:	f3bf 8f4f 	dsb	sy
 800193a:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800193c:	bf00      	nop
 800193e:	e7fe      	b.n	800193e <xTaskIncrementTick+0x46>
 8001940:	4b43      	ldr	r3, [pc, #268]	; (8001a50 <xTaskIncrementTick+0x158>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	4b43      	ldr	r3, [pc, #268]	; (8001a54 <xTaskIncrementTick+0x15c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a41      	ldr	r2, [pc, #260]	; (8001a50 <xTaskIncrementTick+0x158>)
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	4a41      	ldr	r2, [pc, #260]	; (8001a54 <xTaskIncrementTick+0x15c>)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	4b40      	ldr	r3, [pc, #256]	; (8001a58 <xTaskIncrementTick+0x160>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	3301      	adds	r3, #1
 800195a:	4a3f      	ldr	r2, [pc, #252]	; (8001a58 <xTaskIncrementTick+0x160>)
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	f000 f8e3 	bl	8001b28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001962:	4b3e      	ldr	r3, [pc, #248]	; (8001a5c <xTaskIncrementTick+0x164>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	429a      	cmp	r2, r3
 800196a:	d34d      	bcc.n	8001a08 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800196c:	4b38      	ldr	r3, [pc, #224]	; (8001a50 <xTaskIncrementTick+0x158>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <xTaskIncrementTick+0x82>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <xTaskIncrementTick+0x84>
 800197a:	2300      	movs	r3, #0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d004      	beq.n	800198a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001980:	4b36      	ldr	r3, [pc, #216]	; (8001a5c <xTaskIncrementTick+0x164>)
 8001982:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001986:	601a      	str	r2, [r3, #0]
					break;
 8001988:	e03e      	b.n	8001a08 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800198a:	4b31      	ldr	r3, [pc, #196]	; (8001a50 <xTaskIncrementTick+0x158>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d203      	bcs.n	80019aa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80019a2:	4a2e      	ldr	r2, [pc, #184]	; (8001a5c <xTaskIncrementTick+0x164>)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6013      	str	r3, [r2, #0]
						break;
 80019a8:	e02e      	b.n	8001a08 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	3304      	adds	r3, #4
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff ff79 	bl	80018a6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d004      	beq.n	80019c6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	3318      	adds	r3, #24
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff70 	bl	80018a6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	2201      	movs	r2, #1
 80019cc:	409a      	lsls	r2, r3
 80019ce:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <xTaskIncrementTick+0x168>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	4a22      	ldr	r2, [pc, #136]	; (8001a60 <xTaskIncrementTick+0x168>)
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4a1f      	ldr	r2, [pc, #124]	; (8001a64 <xTaskIncrementTick+0x16c>)
 80019e6:	441a      	add	r2, r3
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	3304      	adds	r3, #4
 80019ec:	4619      	mov	r1, r3
 80019ee:	4610      	mov	r0, r2
 80019f0:	f7ff ff36 	bl	8001860 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <xTaskIncrementTick+0x170>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d3b4      	bcc.n	800196c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001a02:	2301      	movs	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a06:	e7b1      	b.n	800196c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001a08:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <xTaskIncrementTick+0x170>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a0e:	4915      	ldr	r1, [pc, #84]	; (8001a64 <xTaskIncrementTick+0x16c>)
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d907      	bls.n	8001a30 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8001a20:	2301      	movs	r3, #1
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	e004      	b.n	8001a30 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <xTaskIncrementTick+0x174>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	4a0f      	ldr	r2, [pc, #60]	; (8001a6c <xTaskIncrementTick+0x174>)
 8001a2e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <xTaskIncrementTick+0x178>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001a3c:	697b      	ldr	r3, [r7, #20]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200000d8 	.word	0x200000d8
 8001a4c:	200000c0 	.word	0x200000c0
 8001a50:	200000b8 	.word	0x200000b8
 8001a54:	200000bc 	.word	0x200000bc
 8001a58:	200000d0 	.word	0x200000d0
 8001a5c:	200000d4 	.word	0x200000d4
 8001a60:	200000c4 	.word	0x200000c4
 8001a64:	2000002c 	.word	0x2000002c
 8001a68:	20000028 	.word	0x20000028
 8001a6c:	200000c8 	.word	0x200000c8
 8001a70:	200000cc 	.word	0x200000cc

08001a74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001a74:	b480      	push	{r7}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001a7a:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <vTaskSwitchContext+0xa0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001a82:	4b25      	ldr	r3, [pc, #148]	; (8001b18 <vTaskSwitchContext+0xa4>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001a88:	e03f      	b.n	8001b0a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8001a8a:	4b23      	ldr	r3, [pc, #140]	; (8001b18 <vTaskSwitchContext+0xa4>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001a90:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <vTaskSwitchContext+0xa8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	fab3 f383 	clz	r3, r3
 8001a9c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001a9e:	7afb      	ldrb	r3, [r7, #11]
 8001aa0:	f1c3 031f 	rsb	r3, r3, #31
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	491e      	ldr	r1, [pc, #120]	; (8001b20 <vTaskSwitchContext+0xac>)
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10a      	bne.n	8001ad0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8001aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001abe:	f383 8811 	msr	BASEPRI, r3
 8001ac2:	f3bf 8f6f 	isb	sy
 8001ac6:	f3bf 8f4f 	dsb	sy
 8001aca:	607b      	str	r3, [r7, #4]
}
 8001acc:	bf00      	nop
 8001ace:	e7fe      	b.n	8001ace <vTaskSwitchContext+0x5a>
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4a11      	ldr	r2, [pc, #68]	; (8001b20 <vTaskSwitchContext+0xac>)
 8001adc:	4413      	add	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	3308      	adds	r3, #8
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d104      	bne.n	8001b00 <vTaskSwitchContext+0x8c>
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <vTaskSwitchContext+0xb0>)
 8001b08:	6013      	str	r3, [r2, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	371c      	adds	r7, #28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	200000d8 	.word	0x200000d8
 8001b18:	200000cc 	.word	0x200000cc
 8001b1c:	200000c4 	.word	0x200000c4
 8001b20:	2000002c 	.word	0x2000002c
 8001b24:	20000028 	.word	0x20000028

08001b28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <prvResetNextTaskUnblockTime+0x40>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <prvResetNextTaskUnblockTime+0x14>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <prvResetNextTaskUnblockTime+0x16>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d004      	beq.n	8001b4c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <prvResetNextTaskUnblockTime+0x44>)
 8001b44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b48:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001b4a:	e008      	b.n	8001b5e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <prvResetNextTaskUnblockTime+0x40>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <prvResetNextTaskUnblockTime+0x44>)
 8001b5c:	6013      	str	r3, [r2, #0]
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	200000b8 	.word	0x200000b8
 8001b6c:	200000d4 	.word	0x200000d4

08001b70 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001b70:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <pxCurrentTCBConst2>)
 8001b72:	6819      	ldr	r1, [r3, #0]
 8001b74:	6808      	ldr	r0, [r1, #0]
 8001b76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001b7a:	f380 8809 	msr	PSP, r0
 8001b7e:	f3bf 8f6f 	isb	sy
 8001b82:	f04f 0000 	mov.w	r0, #0
 8001b86:	f380 8811 	msr	BASEPRI, r0
 8001b8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8001b8e:	4770      	bx	lr

08001b90 <pxCurrentTCBConst2>:
 8001b90:	20000028 	.word	0x20000028
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
	...

08001ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001ba0:	f3ef 8009 	mrs	r0, PSP
 8001ba4:	f3bf 8f6f 	isb	sy
 8001ba8:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <pxCurrentTCBConst>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001bb0:	6010      	str	r0, [r2, #0]
 8001bb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001bb6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001bba:	f380 8811 	msr	BASEPRI, r0
 8001bbe:	f7ff ff59 	bl	8001a74 <vTaskSwitchContext>
 8001bc2:	f04f 0000 	mov.w	r0, #0
 8001bc6:	f380 8811 	msr	BASEPRI, r0
 8001bca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001bce:	6819      	ldr	r1, [r3, #0]
 8001bd0:	6808      	ldr	r0, [r1, #0]
 8001bd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001bd6:	f380 8809 	msr	PSP, r0
 8001bda:	f3bf 8f6f 	isb	sy
 8001bde:	4770      	bx	lr

08001be0 <pxCurrentTCBConst>:
 8001be0:	20000028 	.word	0x20000028
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop

08001be8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
	__asm volatile
 8001bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf2:	f383 8811 	msr	BASEPRI, r3
 8001bf6:	f3bf 8f6f 	isb	sy
 8001bfa:	f3bf 8f4f 	dsb	sy
 8001bfe:	607b      	str	r3, [r7, #4]
}
 8001c00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001c02:	f7ff fe79 	bl	80018f8 <xTaskIncrementTick>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <SysTick_Handler+0x40>)
 8001c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	2300      	movs	r3, #0
 8001c16:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001c1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	e000ed04 	.word	0xe000ed04

08001c2c <__libc_init_array>:
 8001c2c:	b570      	push	{r4, r5, r6, lr}
 8001c2e:	2600      	movs	r6, #0
 8001c30:	4d0c      	ldr	r5, [pc, #48]	; (8001c64 <__libc_init_array+0x38>)
 8001c32:	4c0d      	ldr	r4, [pc, #52]	; (8001c68 <__libc_init_array+0x3c>)
 8001c34:	1b64      	subs	r4, r4, r5
 8001c36:	10a4      	asrs	r4, r4, #2
 8001c38:	42a6      	cmp	r6, r4
 8001c3a:	d109      	bne.n	8001c50 <__libc_init_array+0x24>
 8001c3c:	f000 f822 	bl	8001c84 <_init>
 8001c40:	2600      	movs	r6, #0
 8001c42:	4d0a      	ldr	r5, [pc, #40]	; (8001c6c <__libc_init_array+0x40>)
 8001c44:	4c0a      	ldr	r4, [pc, #40]	; (8001c70 <__libc_init_array+0x44>)
 8001c46:	1b64      	subs	r4, r4, r5
 8001c48:	10a4      	asrs	r4, r4, #2
 8001c4a:	42a6      	cmp	r6, r4
 8001c4c:	d105      	bne.n	8001c5a <__libc_init_array+0x2e>
 8001c4e:	bd70      	pop	{r4, r5, r6, pc}
 8001c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c54:	4798      	blx	r3
 8001c56:	3601      	adds	r6, #1
 8001c58:	e7ee      	b.n	8001c38 <__libc_init_array+0xc>
 8001c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c5e:	4798      	blx	r3
 8001c60:	3601      	adds	r6, #1
 8001c62:	e7f2      	b.n	8001c4a <__libc_init_array+0x1e>
 8001c64:	08001cc4 	.word	0x08001cc4
 8001c68:	08001cc4 	.word	0x08001cc4
 8001c6c:	08001cc4 	.word	0x08001cc4
 8001c70:	08001cc8 	.word	0x08001cc8

08001c74 <memset>:
 8001c74:	4603      	mov	r3, r0
 8001c76:	4402      	add	r2, r0
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d100      	bne.n	8001c7e <memset+0xa>
 8001c7c:	4770      	bx	lr
 8001c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8001c82:	e7f9      	b.n	8001c78 <memset+0x4>

08001c84 <_init>:
 8001c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c86:	bf00      	nop
 8001c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c8a:	bc08      	pop	{r3}
 8001c8c:	469e      	mov	lr, r3
 8001c8e:	4770      	bx	lr

08001c90 <_fini>:
 8001c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c92:	bf00      	nop
 8001c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c96:	bc08      	pop	{r3}
 8001c98:	469e      	mov	lr, r3
 8001c9a:	4770      	bx	lr

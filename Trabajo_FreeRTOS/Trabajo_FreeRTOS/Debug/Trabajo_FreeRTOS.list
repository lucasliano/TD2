
Trabajo_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cd4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08005de8  08005de8  00015de8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eb0  08005eb0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08005eb0  08005eb0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005eb0  08005eb0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eb0  08005eb0  00015eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eb4  08005eb4  00015eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001110  2000007c  08005f34  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000118c  08005f34  0002118c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ff8  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033a3  00000000  00000000  0003709d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  0003a440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  0003b5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a5c  00000000  00000000  0003c5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130d9  00000000  00000000  00056044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000920ef  00000000  00000000  0006911d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fb20c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bbc  00000000  00000000  000fb260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005dcc 	.word	0x08005dcc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08005dcc 	.word	0x08005dcc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <checkStatusTask>:
#include "main.h"

#define INITIAL_STATE 42374813  // Es mi DNI

//----- Main Tasks ----------
void checkStatusTask(void *params){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	// I recieve the params
	datos_t *data = (datos_t*)params;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	60fb      	str	r3, [r7, #12]



	while(1){	// Infinite Loop
		// Solicito el uso del mainBoard
		xSemaphoreTake(data->mutex,portMAX_DELAY);
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f002 fc37 	bl	80032f0 <xQueueSemaphoreTake>
		//Zona de mutua exclusión.

		checkStatus(data->board);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 f83c 	bl	8000b04 <checkStatus>

		// Devuelvo la posibilidad de trabajar con mainBoard
		xSemaphoreGive(data->mutex);
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	6858      	ldr	r0, [r3, #4]
 8000a90:	2300      	movs	r3, #0
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	f002 fb2d 	bl	80030f4 <xQueueGenericSend>

		vTaskDelay(500 / portTICK_RATE_MS);			// 500ms Delay
 8000a9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a9e:	f002 ffbf 	bl	8003a20 <vTaskDelay>
		xSemaphoreTake(data->mutex,portMAX_DELAY);
 8000aa2:	e7e7      	b.n	8000a74 <checkStatusTask+0xc>

08000aa4 <updateBoardTask>:
	/* We should never get here */
	vTaskDelete( NULL );
}


void updateBoardTask(void *params){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	// I recieve the params
	datos_t *data = (datos_t*)params;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	60fb      	str	r3, [r7, #12]



	while(1){	// Infinite Loop
		// Solicito el uso del mainBoard
		xSemaphoreTake(data->mutex,portMAX_DELAY);
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f002 fc19 	bl	80032f0 <xQueueSemaphoreTake>
		//Zona de mutua exclusión.

		tarea_matriz(data->board);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fbf4 	bl	80012b0 <tarea_matriz>
		updateBoard(data->board, &futureBoard);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	490c      	ldr	r1, [pc, #48]	; (8000b00 <updateBoardTask+0x5c>)
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 f85e 	bl	8000b90 <updateBoard>
		*(data->board) = futureBoard;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a09      	ldr	r2, [pc, #36]	; (8000b00 <updateBoardTask+0x5c>)
 8000ada:	4618      	mov	r0, r3
 8000adc:	4611      	mov	r1, r2
 8000ade:	2348      	movs	r3, #72	; 0x48
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	f004 f9cf 	bl	8004e84 <memcpy>


		//Devuelvo la posibilidad de trabajar con mainBoard
		xSemaphoreGive(data->mutex);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	6858      	ldr	r0, [r3, #4]
 8000aea:	2300      	movs	r3, #0
 8000aec:	2200      	movs	r2, #0
 8000aee:	2100      	movs	r1, #0
 8000af0:	f002 fb00 	bl	80030f4 <xQueueGenericSend>


		vTaskDelay(500 / portTICK_RATE_MS);			// 500ms Delay
 8000af4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000af8:	f002 ff92 	bl	8003a20 <vTaskDelay>
		xSemaphoreTake(data->mutex,portMAX_DELAY);
 8000afc:	e7d8      	b.n	8000ab0 <updateBoardTask+0xc>
 8000afe:	bf00      	nop
 8000b00:	20000098 	.word	0x20000098

08000b04 <checkStatus>:
}



// ======================= Important functions =======================
void checkStatus(board_t* board){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	uint8_t isAlive = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 8; i++){
 8000b10:	2300      	movs	r3, #0
 8000b12:	73bb      	strb	r3, [r7, #14]
 8000b14:	e009      	b.n	8000b2a <checkStatus+0x26>
		if (board->num[i] != 0){
 8000b16:	7bbb      	ldrb	r3, [r7, #14]
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	5cd3      	ldrb	r3, [r2, r3]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <checkStatus+0x20>
			isAlive = 1;
 8000b20:	2301      	movs	r3, #1
 8000b22:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 8; i++){
 8000b24:	7bbb      	ldrb	r3, [r7, #14]
 8000b26:	3301      	adds	r3, #1
 8000b28:	73bb      	strb	r3, [r7, #14]
 8000b2a:	7bbb      	ldrb	r3, [r7, #14]
 8000b2c:	2b07      	cmp	r3, #7
 8000b2e:	d9f2      	bls.n	8000b16 <checkStatus+0x12>
		}
	}

	if(!isAlive){
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d102      	bne.n	8000b3c <checkStatus+0x38>
		generateBoard(board);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f000 f804 	bl	8000b44 <generateBoard>
	}
}
 8000b3c:	bf00      	nop
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <generateBoard>:


void generateBoard(board_t* board){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
    uint8_t boardLine = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 0 ; i < 8; i++){
 8000b50:	2300      	movs	r3, #0
 8000b52:	73fb      	strb	r3, [r7, #15]
 8000b54:	e014      	b.n	8000b80 <generateBoard+0x3c>
      boardLine = (uint8_t) xor32();
 8000b56:	f000 f8d7 	bl	8000d08 <xor32>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	73bb      	strb	r3, [r7, #14]
      board->num[i] = boardLine;
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	7bb9      	ldrb	r1, [r7, #14]
 8000b64:	54d1      	strb	r1, [r2, r3]
      generateLine(boardLine, board->value[i]);
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	441a      	add	r2, r3
 8000b70:	7bbb      	ldrb	r3, [r7, #14]
 8000b72:	4611      	mov	r1, r2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 f908 	bl	8000d8a <generateLine>
    for (uint8_t i = 0 ; i < 8; i++){
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	73fb      	strb	r3, [r7, #15]
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	2b07      	cmp	r3, #7
 8000b84:	d9e7      	bls.n	8000b56 <generateBoard+0x12>
    }

}
 8000b86:	bf00      	nop
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <updateBoard>:

void updateBoard(board_t* actualBoard, board_t* futureBoard){
 8000b90:	b5b0      	push	{r4, r5, r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0 ; i < 8; i++){
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	73fb      	strb	r3, [r7, #15]
 8000b9e:	e029      	b.n	8000bf4 <updateBoard+0x64>
      for (uint8_t j = 0 ; j < 8; j++){
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73bb      	strb	r3, [r7, #14]
 8000ba4:	e013      	b.n	8000bce <updateBoard+0x3e>
         // Acá estamos loopeando por cada pixel.
         futureBoard->value[i][j] = isAlive(actualBoard, i, j);
 8000ba6:	7bfd      	ldrb	r5, [r7, #15]
 8000ba8:	7bbc      	ldrb	r4, [r7, #14]
 8000baa:	7bba      	ldrb	r2, [r7, #14]
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	4619      	mov	r1, r3
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f000 f827 	bl	8000c04 <isAlive>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4619      	mov	r1, r3
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	00eb      	lsls	r3, r5, #3
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4423      	add	r3, r4
 8000bc2:	3308      	adds	r3, #8
 8000bc4:	460a      	mov	r2, r1
 8000bc6:	701a      	strb	r2, [r3, #0]
      for (uint8_t j = 0 ; j < 8; j++){
 8000bc8:	7bbb      	ldrb	r3, [r7, #14]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	73bb      	strb	r3, [r7, #14]
 8000bce:	7bbb      	ldrb	r3, [r7, #14]
 8000bd0:	2b07      	cmp	r3, #7
 8000bd2:	d9e8      	bls.n	8000ba6 <updateBoard+0x16>
      }
      futureBoard->num[i] = bin2dec(futureBoard->value[i]); //After updating the bit fields, we also update the uint8_t value.
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	683a      	ldr	r2, [r7, #0]
 8000bdc:	4413      	add	r3, r2
 8000bde:	7bfc      	ldrb	r4, [r7, #15]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 f901 	bl	8000de8 <bin2dec>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	551a      	strb	r2, [r3, r4]
    for (uint8_t i = 0 ; i < 8; i++){
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	2b07      	cmp	r3, #7
 8000bf8:	d9d2      	bls.n	8000ba0 <updateBoard+0x10>
    }
}
 8000bfa:	bf00      	nop
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bdb0      	pop	{r4, r5, r7, pc}

08000c04 <isAlive>:

uint8_t isAlive(board_t* board, uint8_t y, uint8_t x){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	70fb      	strb	r3, [r7, #3]
 8000c10:	4613      	mov	r3, r2
 8000c12:	70bb      	strb	r3, [r7, #2]
	uint8_t outputState = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	73fb      	strb	r3, [r7, #15]
    uint8_t neighbors_count = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73bb      	strb	r3, [r7, #14]
    uint8_t neiY;
    uint8_t neiX;
    int8_t i;
    int8_t j;

    for (i = -1 ; i <= 1; i++){
 8000c1c:	23ff      	movs	r3, #255	; 0xff
 8000c1e:	737b      	strb	r3, [r7, #13]
 8000c20:	e039      	b.n	8000c96 <isAlive+0x92>
        neiY = checkBorder(y + i);
 8000c22:	7b7a      	ldrb	r2, [r7, #13]
 8000c24:	78fb      	ldrb	r3, [r7, #3]
 8000c26:	4413      	add	r3, r2
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 f850 	bl	8000cd2 <checkBorder>
 8000c32:	4603      	mov	r3, r0
 8000c34:	72fb      	strb	r3, [r7, #11]
        for (j = -1 ; j <= 1; j++){
 8000c36:	23ff      	movs	r3, #255	; 0xff
 8000c38:	733b      	strb	r3, [r7, #12]
 8000c3a:	e022      	b.n	8000c82 <isAlive+0x7e>
            neiX = checkBorder(x + j);
 8000c3c:	7b3a      	ldrb	r2, [r7, #12]
 8000c3e:	78bb      	ldrb	r3, [r7, #2]
 8000c40:	4413      	add	r3, r2
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	b25b      	sxtb	r3, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 f843 	bl	8000cd2 <checkBorder>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	72bb      	strb	r3, [r7, #10]
            if (i != 0 || j != 0){    // I check all the neighbors excepting the actual pixel
 8000c50:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d103      	bne.n	8000c60 <isAlive+0x5c>
 8000c58:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d00a      	beq.n	8000c76 <isAlive+0x72>
                neighbors_count += board->value[neiY][neiX];
 8000c60:	7afa      	ldrb	r2, [r7, #11]
 8000c62:	7abb      	ldrb	r3, [r7, #10]
 8000c64:	6879      	ldr	r1, [r7, #4]
 8000c66:	00d2      	lsls	r2, r2, #3
 8000c68:	440a      	add	r2, r1
 8000c6a:	4413      	add	r3, r2
 8000c6c:	3308      	adds	r3, #8
 8000c6e:	781a      	ldrb	r2, [r3, #0]
 8000c70:	7bbb      	ldrb	r3, [r7, #14]
 8000c72:	4413      	add	r3, r2
 8000c74:	73bb      	strb	r3, [r7, #14]
        for (j = -1 ; j <= 1; j++){
 8000c76:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	733b      	strb	r3, [r7, #12]
 8000c82:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	ddd8      	ble.n	8000c3c <isAlive+0x38>
    for (i = -1 ; i <= 1; i++){
 8000c8a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	3301      	adds	r3, #1
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	737b      	strb	r3, [r7, #13]
 8000c96:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	ddc1      	ble.n	8000c22 <isAlive+0x1e>
            }
        }
    }

    if (neighbors_count == 3){
 8000c9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ca0:	2b03      	cmp	r3, #3
 8000ca2:	d102      	bne.n	8000caa <isAlive+0xa6>
        // Se reproduce o se mantiene
        outputState = 1;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	73fb      	strb	r3, [r7, #15]
 8000ca8:	e00e      	b.n	8000cc8 <isAlive+0xc4>
    }else if (neighbors_count == 2 && board->value[y][x] == 1){
 8000caa:	7bbb      	ldrb	r3, [r7, #14]
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d10b      	bne.n	8000cc8 <isAlive+0xc4>
 8000cb0:	78fa      	ldrb	r2, [r7, #3]
 8000cb2:	78bb      	ldrb	r3, [r7, #2]
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	00d2      	lsls	r2, r2, #3
 8000cb8:	440a      	add	r2, r1
 8000cba:	4413      	add	r3, r2
 8000cbc:	3308      	adds	r3, #8
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d101      	bne.n	8000cc8 <isAlive+0xc4>
        // Si está viva, sigue viva
        outputState = 1;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	73fb      	strb	r3, [r7, #15]
    }

    return outputState;
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <checkBorder>:

uint8_t checkBorder(int8_t index){
 8000cd2:	b480      	push	{r7}
 8000cd4:	b085      	sub	sp, #20
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	71fb      	strb	r3, [r7, #7]
    uint8_t output = index;
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	73fb      	strb	r3, [r7, #15]

    if (index < 0){
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	da02      	bge.n	8000cee <checkBorder+0x1c>
        output = 8-1;
 8000ce8:	2307      	movs	r3, #7
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	e005      	b.n	8000cfa <checkBorder+0x28>
    }else if (index > 8-1){
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	2b07      	cmp	r3, #7
 8000cf4:	dd01      	ble.n	8000cfa <checkBorder+0x28>
        output = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73fb      	strb	r3, [r7, #15]
    } // else : output = index
    return output;
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr
	...

08000d08 <xor32>:

// ======================= Small - functions =======================
uint32_t xor32(void){
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
	static uint32_t y = INITIAL_STATE;
	y^= y<<13;
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <xor32+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	035a      	lsls	r2, r3, #13
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <xor32+0x40>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4053      	eors	r3, r2
 8000d18:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <xor32+0x40>)
 8000d1a:	6013      	str	r3, [r2, #0]
	y^= y>>17;
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <xor32+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	0c5a      	lsrs	r2, r3, #17
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <xor32+0x40>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4053      	eors	r3, r2
 8000d28:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <xor32+0x40>)
 8000d2a:	6013      	str	r3, [r2, #0]
	y^= y<<5;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <xor32+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	015a      	lsls	r2, r3, #5
 8000d32:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <xor32+0x40>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4053      	eors	r3, r2
 8000d38:	4a03      	ldr	r2, [pc, #12]	; (8000d48 <xor32+0x40>)
 8000d3a:	6013      	str	r3, [r2, #0]
	return y;
 8000d3c:	4b02      	ldr	r3, [pc, #8]	; (8000d48 <xor32+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	20000000 	.word	0x20000000

08000d4c <clearBoard>:

void clearBoard(board_t* board){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0 ; i < 8; i++){
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	e00f      	b.n	8000d7a <clearBoard+0x2e>
	      board->num[i] = 0;
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	2100      	movs	r1, #0
 8000d60:	54d1      	strb	r1, [r2, r3]
	      generateLine(0, board->value[i]);
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	3301      	adds	r3, #1
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f000 f80b 	bl	8000d8a <generateLine>
	for (uint8_t i = 0 ; i < 8; i++){
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	3301      	adds	r3, #1
 8000d78:	73fb      	strb	r3, [r7, #15]
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	2b07      	cmp	r3, #7
 8000d7e:	d9ec      	bls.n	8000d5a <clearBoard+0xe>
	    }
}
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <generateLine>:

void generateLine(uint8_t input, uint8_t* output){
 8000d8a:	b480      	push	{r7}
 8000d8c:	b085      	sub	sp, #20
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	6039      	str	r1, [r7, #0]
 8000d94:	71fb      	strb	r3, [r7, #7]
	int8_t i;
    for(i = 8-1; i >= 0; i--){
 8000d96:	2307      	movs	r3, #7
 8000d98:	73fb      	strb	r3, [r7, #15]
 8000d9a:	e01b      	b.n	8000dd4 <generateLine+0x4a>
      if((input & (1 << i))){
 8000d9c:	79fa      	ldrb	r2, [r7, #7]
 8000d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da2:	fa42 f303 	asr.w	r3, r2, r3
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d006      	beq.n	8000dbc <generateLine+0x32>
        output[i] = 1;
 8000dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db2:	683a      	ldr	r2, [r7, #0]
 8000db4:	4413      	add	r3, r2
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
 8000dba:	e005      	b.n	8000dc8 <generateLine+0x3e>
      }else{
        output[i] = 0;
 8000dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc0:	683a      	ldr	r2, [r7, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
    for(i = 8-1; i >= 0; i--){
 8000dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	73fb      	strb	r3, [r7, #15]
 8000dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	dadf      	bge.n	8000d9c <generateLine+0x12>
      }
    }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <bin2dec>:

uint8_t bin2dec(uint8_t* input){
 8000de8:	b5b0      	push	{r4, r5, r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
    uint8_t output = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]
    for(int8_t i = 8-1; i >= 0; i--){
 8000df4:	2307      	movs	r3, #7
 8000df6:	73bb      	strb	r3, [r7, #14]
 8000df8:	e02d      	b.n	8000e56 <bin2dec+0x6e>
      if(input[i]){
 8000dfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d020      	beq.n	8000e4a <bin2dec+0x62>
        output += pow(2, i);
 8000e08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff faf1 	bl	80003f4 <__aeabi_i2d>
 8000e12:	4602      	mov	r2, r0
 8000e14:	460b      	mov	r3, r1
 8000e16:	f04f 0000 	mov.w	r0, #0
 8000e1a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000e1e:	f004 f847 	bl	8004eb0 <pow>
 8000e22:	4604      	mov	r4, r0
 8000e24:	460d      	mov	r5, r1
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fae3 	bl	80003f4 <__aeabi_i2d>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4620      	mov	r0, r4
 8000e34:	4629      	mov	r1, r5
 8000e36:	f7ff f991 	bl	800015c <__adddf3>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	4610      	mov	r0, r2
 8000e40:	4619      	mov	r1, r3
 8000e42:	f7ff fdf1 	bl	8000a28 <__aeabi_d2uiz>
 8000e46:	4603      	mov	r3, r0
 8000e48:	73fb      	strb	r3, [r7, #15]
    for(int8_t i = 8-1; i >= 0; i--){
 8000e4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	3b01      	subs	r3, #1
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	73bb      	strb	r3, [r7, #14]
 8000e56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	dacd      	bge.n	8000dfa <bin2dec+0x12>
      }
    }
    return output;
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bdb0      	pop	{r4, r5, r7, pc}

08000e68 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <vApplicationGetIdleTaskMemory+0x28>)
 8000e78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2280      	movs	r2, #128	; 0x80
 8000e84:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e86:	bf00      	nop
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	200000e0 	.word	0x200000e0
 8000e94:	20000134 	.word	0x20000134

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	// Board principal.

	data.board = &mainBoard;
 8000e9e:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <main+0xb4>)
 8000ea0:	4a2b      	ldr	r2, [pc, #172]	; (8000f50 <main+0xb8>)
 8000ea2:	601a      	str	r2, [r3, #0]

	clearBoard(data.board);
 8000ea4:	4b29      	ldr	r3, [pc, #164]	; (8000f4c <main+0xb4>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff4f 	bl	8000d4c <clearBoard>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000eae:	f000 fb43 	bl	8001538 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000eb2:	f000 f85f 	bl	8000f74 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000eb6:	f000 f8db 	bl	8001070 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000eba:	f000 f8a1 	bl	8001000 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */


	HAL_Delay(500);
 8000ebe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ec2:	f000 fb6b 	bl	800159c <HAL_Delay>
	inicializar_max7219(&hspi1, GPIOA, GPIO_PIN_4);
 8000ec6:	2210      	movs	r2, #16
 8000ec8:	4922      	ldr	r1, [pc, #136]	; (8000f54 <main+0xbc>)
 8000eca:	4823      	ldr	r0, [pc, #140]	; (8000f58 <main+0xc0>)
 8000ecc:	f000 f9be 	bl	800124c <inicializar_max7219>
	/* USER CODE BEGIN RTOS_SEMAPHORES */
	// Semáforo para mutua exclusión.
	xSemaphoreHandle sem_mutex;

	//Creo un mutex.
	if(!(sem_mutex = xSemaphoreCreateMutex()))
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f002 f8f6 	bl	80030c2 <xQueueCreateMutex>
 8000ed6:	61f8      	str	r0, [r7, #28]
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d100      	bne.n	8000ee0 <main+0x48>
	{
		while(1){
 8000ede:	e7fe      	b.n	8000ede <main+0x46>
			// Should not reach this point.
		}
	}
	data.mutex = sem_mutex;
 8000ee0:	4a1a      	ldr	r2, [pc, #104]	; (8000f4c <main+0xb4>)
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	6053      	str	r3, [r2, #4]
	/* definition and creation of defaultTask */

	// Creamos las tareas


	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <main+0xc4>)
 8000ee8:	463c      	mov	r4, r7
 8000eea:	461d      	mov	r5, r3
 8000eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ef4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ef8:	463b      	mov	r3, r7
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f001 fef1 	bl	8002ce4 <osThreadCreate>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a16      	ldr	r2, [pc, #88]	; (8000f60 <main+0xc8>)
 8000f06:	6013      	str	r3, [r2, #0]

	if( xTaskCreate(updateBoardTask,
 8000f08:	2300      	movs	r3, #0
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <main+0xb4>)
 8000f12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f16:	4913      	ldr	r1, [pc, #76]	; (8000f64 <main+0xcc>)
 8000f18:	4813      	ldr	r0, [pc, #76]	; (8000f68 <main+0xd0>)
 8000f1a:	f002 fc52 	bl	80037c2 <xTaskCreate>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d000      	beq.n	8000f26 <main+0x8e>


	/* USER CODE BEGIN RTOS_THREADS */

	{
		while(1){
 8000f24:	e7fe      	b.n	8000f24 <main+0x8c>
					// Should not reach this point.
				}
	}

	if( xTaskCreate(checkStatusTask,
 8000f26:	2300      	movs	r3, #0
 8000f28:	9301      	str	r3, [sp, #4]
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <main+0xb4>)
 8000f30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f34:	490d      	ldr	r1, [pc, #52]	; (8000f6c <main+0xd4>)
 8000f36:	480e      	ldr	r0, [pc, #56]	; (8000f70 <main+0xd8>)
 8000f38:	f002 fc43 	bl	80037c2 <xTaskCreate>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d000      	beq.n	8000f44 <main+0xac>
						2*configMINIMAL_STACK_SIZE,
						&data,
						tskIDLE_PRIORITY+2,
						NULL) != pdPASS)
	{
		while(1){
 8000f42:	e7fe      	b.n	8000f42 <main+0xaa>


	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000f44:	f001 fec7 	bl	8002cd6 <osKernelStart>
// =========================================================================
	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000f48:	e7fe      	b.n	8000f48 <main+0xb0>
 8000f4a:	bf00      	nop
 8000f4c:	200010e0 	.word	0x200010e0
 8000f50:	20001098 	.word	0x20001098
 8000f54:	40010800 	.word	0x40010800
 8000f58:	200010e8 	.word	0x200010e8
 8000f5c:	08005e1c 	.word	0x08005e1c
 8000f60:	20001094 	.word	0x20001094
 8000f64:	08005df4 	.word	0x08005df4
 8000f68:	08000aa5 	.word	0x08000aa5
 8000f6c:	08005e08 	.word	0x08005e08
 8000f70:	08000a69 	.word	0x08000a69

08000f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b090      	sub	sp, #64	; 0x40
 8000f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7a:	f107 0318 	add.w	r3, r7, #24
 8000f7e:	2228      	movs	r2, #40	; 0x28
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f003 ff8c 	bl	8004ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f96:	2301      	movs	r3, #1
 8000f98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fb2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb8:	f107 0318 	add.w	r3, r7, #24
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 fd8d 	bl	8001adc <HAL_RCC_OscConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000fc8:	f000 f8cc 	bl	8001164 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fcc:	230f      	movs	r3, #15
 8000fce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 fff8 	bl	8001fdc <HAL_RCC_ClockConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ff2:	f000 f8b7 	bl	8001164 <Error_Handler>
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	3740      	adds	r7, #64	; 0x40
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <MX_SPI1_Init+0x68>)
 8001006:	4a19      	ldr	r2, [pc, #100]	; (800106c <MX_SPI1_Init+0x6c>)
 8001008:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <MX_SPI1_Init+0x68>)
 800100c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001010:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <MX_SPI1_Init+0x68>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <MX_SPI1_Init+0x68>)
 800101a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800101e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_SPI1_Init+0x68>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <MX_SPI1_Init+0x68>)
 8001028:	2200      	movs	r2, #0
 800102a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_SPI1_Init+0x68>)
 800102e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001032:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_SPI1_Init+0x68>)
 8001036:	2218      	movs	r2, #24
 8001038:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <MX_SPI1_Init+0x68>)
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_SPI1_Init+0x68>)
 8001042:	2200      	movs	r2, #0
 8001044:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <MX_SPI1_Init+0x68>)
 8001048:	2200      	movs	r2, #0
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_SPI1_Init+0x68>)
 800104e:	220a      	movs	r2, #10
 8001050:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_SPI1_Init+0x68>)
 8001054:	f001 f978 	bl	8002348 <HAL_SPI_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800105e:	f000 f881 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200010e8 	.word	0x200010e8
 800106c:	40013000 	.word	0x40013000

08001070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	f107 0310 	add.w	r3, r7, #16
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001084:	4b27      	ldr	r3, [pc, #156]	; (8001124 <MX_GPIO_Init+0xb4>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a26      	ldr	r2, [pc, #152]	; (8001124 <MX_GPIO_Init+0xb4>)
 800108a:	f043 0310 	orr.w	r3, r3, #16
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b24      	ldr	r3, [pc, #144]	; (8001124 <MX_GPIO_Init+0xb4>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0310 	and.w	r3, r3, #16
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109c:	4b21      	ldr	r3, [pc, #132]	; (8001124 <MX_GPIO_Init+0xb4>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a20      	ldr	r2, [pc, #128]	; (8001124 <MX_GPIO_Init+0xb4>)
 80010a2:	f043 0320 	orr.w	r3, r3, #32
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <MX_GPIO_Init+0xb4>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f003 0320 	and.w	r3, r3, #32
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <MX_GPIO_Init+0xb4>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a1a      	ldr	r2, [pc, #104]	; (8001124 <MX_GPIO_Init+0xb4>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b18      	ldr	r3, [pc, #96]	; (8001124 <MX_GPIO_Init+0xb4>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010d2:	4815      	ldr	r0, [pc, #84]	; (8001128 <MX_GPIO_Init+0xb8>)
 80010d4:	f000 fcea 	bl	8001aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	2110      	movs	r1, #16
 80010dc:	4813      	ldr	r0, [pc, #76]	; (800112c <MX_GPIO_Init+0xbc>)
 80010de:	f000 fce5 	bl	8001aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	4619      	mov	r1, r3
 80010fa:	480b      	ldr	r0, [pc, #44]	; (8001128 <MX_GPIO_Init+0xb8>)
 80010fc:	f000 fb52 	bl	80017a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001100:	2310      	movs	r3, #16
 8001102:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2302      	movs	r3, #2
 800110e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4619      	mov	r1, r3
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <MX_GPIO_Init+0xbc>)
 8001118:	f000 fb44 	bl	80017a4 <HAL_GPIO_Init>

}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40021000 	.word	0x40021000
 8001128:	40011000 	.word	0x40011000
 800112c:	40010800 	.word	0x40010800

08001130 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001138:	2001      	movs	r0, #1
 800113a:	f001 fe1f 	bl	8002d7c <osDelay>
 800113e:	e7fb      	b.n	8001138 <StartDefaultTask+0x8>

08001140 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a04      	ldr	r2, [pc, #16]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d101      	bne.n	8001156 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001152:	f000 fa07 	bl	8001564 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40012c00 	.word	0x40012c00

08001164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800116c:	e7fe      	b.n	800116c <Error_Handler+0x8>
	...

08001170 <comando>:
static SPI_HandleTypeDef *spi_handler;
static GPIO_TypeDef *gpio_cs;
static uint16_t pin_cs;

static void comando(uint32_t address, uint32_t data)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
	uint16_t datoSerie;
	datoSerie = ((address & 0x0F) << 8) | (data & 0xFF);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	b29b      	uxth	r3, r3
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b29b      	uxth	r3, r3
 8001182:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001186:	b29a      	uxth	r2, r3
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	b2db      	uxtb	r3, r3
 800118e:	b29b      	uxth	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b29b      	uxth	r3, r3
 8001194:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(gpio_cs, pin_cs, GPIO_PIN_RESET);
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <comando+0x60>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <comando+0x64>)
 800119c:	8811      	ldrh	r1, [r2, #0]
 800119e:	2200      	movs	r2, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 fc83 	bl	8001aac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_handler, (void*) &datoSerie, 1, 10);
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <comando+0x68>)
 80011a8:	6818      	ldr	r0, [r3, #0]
 80011aa:	f107 010e 	add.w	r1, r7, #14
 80011ae:	230a      	movs	r3, #10
 80011b0:	2201      	movs	r2, #1
 80011b2:	f001 f94d 	bl	8002450 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(gpio_cs, pin_cs, GPIO_PIN_SET);
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <comando+0x60>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <comando+0x64>)
 80011bc:	8811      	ldrh	r1, [r2, #0]
 80011be:	2201      	movs	r2, #1
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 fc73 	bl	8001aac <HAL_GPIO_WritePin>
}
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000338 	.word	0x20000338
 80011d4:	2000033c 	.word	0x2000033c
 80011d8:	20000334 	.word	0x20000334

080011dc <llenar_max7219>:

void llenar_max7219(uint8_t dato)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
	int i;
	for (i = 0; i < 8; i++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	e00a      	b.n	8001202 <llenar_max7219+0x26>
		comando(i + 1, dato);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	3301      	adds	r3, #1
 80011f0:	461a      	mov	r2, r3
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	4619      	mov	r1, r3
 80011f6:	4610      	mov	r0, r2
 80011f8:	f7ff ffba 	bl	8001170 <comando>
	for (i = 0; i < 8; i++)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	3301      	adds	r3, #1
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2b07      	cmp	r3, #7
 8001206:	ddf1      	ble.n	80011ec <llenar_max7219+0x10>
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <dibujar_max7219>:

void dibujar_max7219(uint8_t *datos)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b084      	sub	sp, #16
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < 8; i++)
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	e00c      	b.n	800123a <dibujar_max7219+0x28>
		comando(i + 1, datos[i]);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	3301      	adds	r3, #1
 8001224:	4618      	mov	r0, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	4413      	add	r3, r2
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4619      	mov	r1, r3
 8001230:	f7ff ff9e 	bl	8001170 <comando>
	for (i = 0; i < 8; i++)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	3301      	adds	r3, #1
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2b07      	cmp	r3, #7
 800123e:	ddef      	ble.n	8001220 <dibujar_max7219+0xe>
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <inicializar_max7219>:

void inicializar_max7219(SPI_HandleTypeDef *spi, GPIO_TypeDef *GPIO_cs,
		uint16_t GPIO_Pin_cs)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	4613      	mov	r3, r2
 8001258:	80fb      	strh	r3, [r7, #6]
	spi_handler = spi;
 800125a:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <inicializar_max7219+0x58>)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6013      	str	r3, [r2, #0]
	gpio_cs = GPIO_cs;
 8001260:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <inicializar_max7219+0x5c>)
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	6013      	str	r3, [r2, #0]
	pin_cs = GPIO_Pin_cs;
 8001266:	4a11      	ldr	r2, [pc, #68]	; (80012ac <inicializar_max7219+0x60>)
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	8013      	strh	r3, [r2, #0]

	comando(0x0C, 0x01);	//Enciendo
 800126c:	2101      	movs	r1, #1
 800126e:	200c      	movs	r0, #12
 8001270:	f7ff ff7e 	bl	8001170 <comando>
	comando(0x0F, 0x00);	//Salgo de modoTest
 8001274:	2100      	movs	r1, #0
 8001276:	200f      	movs	r0, #15
 8001278:	f7ff ff7a 	bl	8001170 <comando>
	comando(0x09, 0x00);	//Sin decodificar
 800127c:	2100      	movs	r1, #0
 800127e:	2009      	movs	r0, #9
 8001280:	f7ff ff76 	bl	8001170 <comando>
	comando(0x0B, 0x07);	//Muestro todas las lineas.
 8001284:	2107      	movs	r1, #7
 8001286:	200b      	movs	r0, #11
 8001288:	f7ff ff72 	bl	8001170 <comando>
	comando(0x0A, 0x01);	//Intensidad
 800128c:	2101      	movs	r1, #1
 800128e:	200a      	movs	r0, #10
 8001290:	f7ff ff6e 	bl	8001170 <comando>
	llenar_max7219(0x00);	//Borro la pantalla.
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff ffa1 	bl	80011dc <llenar_max7219>

}
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000334 	.word	0x20000334
 80012a8:	20000338 	.word	0x20000338
 80012ac:	2000033c 	.word	0x2000033c

080012b0 <tarea_matriz>:

/* USER CODE BEGIN 4 */
void tarea_matriz(board_t* board)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	int i;
	static uint8_t pantalla[8] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

	for(i=0;i<8;i++) {
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	e00b      	b.n	80012d6 <tarea_matriz+0x26>
		pantalla[i] = board->num[i];	// Escribe el contenido de la nueva pantalla.
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4413      	add	r3, r2
 80012c4:	7819      	ldrb	r1, [r3, #0]
 80012c6:	4a09      	ldr	r2, [pc, #36]	; (80012ec <tarea_matriz+0x3c>)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	460a      	mov	r2, r1
 80012ce:	701a      	strb	r2, [r3, #0]
	for(i=0;i<8;i++) {
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	3301      	adds	r3, #1
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2b07      	cmp	r3, #7
 80012da:	ddf0      	ble.n	80012be <tarea_matriz+0xe>
	}
	dibujar_max7219(pantalla);
 80012dc:	4803      	ldr	r0, [pc, #12]	; (80012ec <tarea_matriz+0x3c>)
 80012de:	f7ff ff98 	bl	8001212 <dibujar_max7219>
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000340 	.word	0x20000340

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <HAL_MspInit+0x68>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	4a17      	ldr	r2, [pc, #92]	; (8001358 <HAL_MspInit+0x68>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6193      	str	r3, [r2, #24]
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_MspInit+0x68>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_MspInit+0x68>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	4a11      	ldr	r2, [pc, #68]	; (8001358 <HAL_MspInit+0x68>)
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001318:	61d3      	str	r3, [r2, #28]
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_MspInit+0x68>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	210f      	movs	r1, #15
 800132a:	f06f 0001 	mvn.w	r0, #1
 800132e:	f000 fa0e 	bl	800174e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_MspInit+0x6c>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	4a04      	ldr	r2, [pc, #16]	; (800135c <HAL_MspInit+0x6c>)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000
 800135c:	40010000 	.word	0x40010000

08001360 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a1b      	ldr	r2, [pc, #108]	; (80013e8 <HAL_SPI_MspInit+0x88>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d12f      	bne.n	80013e0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <HAL_SPI_MspInit+0x8c>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a19      	ldr	r2, [pc, #100]	; (80013ec <HAL_SPI_MspInit+0x8c>)
 8001386:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <HAL_SPI_MspInit+0x8c>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <HAL_SPI_MspInit+0x8c>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a13      	ldr	r2, [pc, #76]	; (80013ec <HAL_SPI_MspInit+0x8c>)
 800139e:	f043 0304 	orr.w	r3, r3, #4
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_SPI_MspInit+0x8c>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80013b0:	23a0      	movs	r3, #160	; 0xa0
 80013b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	4619      	mov	r1, r3
 80013c2:	480b      	ldr	r0, [pc, #44]	; (80013f0 <HAL_SPI_MspInit+0x90>)
 80013c4:	f000 f9ee 	bl	80017a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013c8:	2340      	movs	r3, #64	; 0x40
 80013ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4619      	mov	r1, r3
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <HAL_SPI_MspInit+0x90>)
 80013dc:	f000 f9e2 	bl	80017a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013e0:	bf00      	nop
 80013e2:	3720      	adds	r7, #32
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40013000 	.word	0x40013000
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010800 	.word	0x40010800

080013f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08c      	sub	sp, #48	; 0x30
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001404:	2200      	movs	r2, #0
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	2019      	movs	r0, #25
 800140a:	f000 f9a0 	bl	800174e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800140e:	2019      	movs	r0, #25
 8001410:	f000 f9b9 	bl	8001786 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001414:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <HAL_InitTick+0x9c>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4a1d      	ldr	r2, [pc, #116]	; (8001490 <HAL_InitTick+0x9c>)
 800141a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_InitTick+0x9c>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800142c:	f107 0210 	add.w	r2, r7, #16
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f000 ff38 	bl	80022ac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800143c:	f000 ff22 	bl	8002284 <HAL_RCC_GetPCLK2Freq>
 8001440:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001444:	4a13      	ldr	r2, [pc, #76]	; (8001494 <HAL_InitTick+0xa0>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	0c9b      	lsrs	r3, r3, #18
 800144c:	3b01      	subs	r3, #1
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_InitTick+0xa4>)
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <HAL_InitTick+0xa8>)
 8001454:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <HAL_InitTick+0xa4>)
 8001458:	f240 32e7 	movw	r2, #999	; 0x3e7
 800145c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800145e:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <HAL_InitTick+0xa4>)
 8001460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001462:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <HAL_InitTick+0xa4>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_InitTick+0xa4>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001470:	4809      	ldr	r0, [pc, #36]	; (8001498 <HAL_InitTick+0xa4>)
 8001472:	f001 f9cf 	bl	8002814 <HAL_TIM_Base_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d104      	bne.n	8001486 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800147c:	4806      	ldr	r0, [pc, #24]	; (8001498 <HAL_InitTick+0xa4>)
 800147e:	f001 fa21 	bl	80028c4 <HAL_TIM_Base_Start_IT>
 8001482:	4603      	mov	r3, r0
 8001484:	e000      	b.n	8001488 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	3730      	adds	r7, #48	; 0x30
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40021000 	.word	0x40021000
 8001494:	431bde83 	.word	0x431bde83
 8001498:	20001140 	.word	0x20001140
 800149c:	40012c00 	.word	0x40012c00

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <NMI_Handler+0x4>

080014a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <HardFault_Handler+0x4>

080014ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <MemManage_Handler+0x4>

080014b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <BusFault_Handler+0x4>

080014b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <UsageFault_Handler+0x4>

080014be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
	...

080014cc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <TIM1_UP_IRQHandler+0x10>)
 80014d2:	f001 fa49 	bl	8002968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20001140 	.word	0x20001140

080014e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014ec:	480c      	ldr	r0, [pc, #48]	; (8001520 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ee:	490d      	ldr	r1, [pc, #52]	; (8001524 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f0:	4a0d      	ldr	r2, [pc, #52]	; (8001528 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f4:	e002      	b.n	80014fc <LoopCopyDataInit>

080014f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fa:	3304      	adds	r3, #4

080014fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001500:	d3f9      	bcc.n	80014f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001504:	4c0a      	ldr	r4, [pc, #40]	; (8001530 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001508:	e001      	b.n	800150e <LoopFillZerobss>

0800150a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800150c:	3204      	adds	r2, #4

0800150e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001510:	d3fb      	bcc.n	800150a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001512:	f7ff ffe5 	bl	80014e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001516:	f003 fc91 	bl	8004e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800151a:	f7ff fcbd 	bl	8000e98 <main>
  bx lr
 800151e:	4770      	bx	lr
  ldr r0, =_sdata
 8001520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001524:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001528:	08005eb8 	.word	0x08005eb8
  ldr r2, =_sbss
 800152c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001530:	2000118c 	.word	0x2000118c

08001534 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001534:	e7fe      	b.n	8001534 <ADC1_2_IRQHandler>
	...

08001538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <HAL_Init+0x28>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a07      	ldr	r2, [pc, #28]	; (8001560 <HAL_Init+0x28>)
 8001542:	f043 0310 	orr.w	r3, r3, #16
 8001546:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001548:	2003      	movs	r0, #3
 800154a:	f000 f8f5 	bl	8001738 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154e:	2000      	movs	r0, #0
 8001550:	f7ff ff50 	bl	80013f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001554:	f7ff fecc 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40022000 	.word	0x40022000

08001564 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_IncTick+0x1c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	4b05      	ldr	r3, [pc, #20]	; (8001584 <HAL_IncTick+0x20>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4413      	add	r3, r2
 8001574:	4a03      	ldr	r2, [pc, #12]	; (8001584 <HAL_IncTick+0x20>)
 8001576:	6013      	str	r3, [r2, #0]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	2000000c 	.word	0x2000000c
 8001584:	20001188 	.word	0x20001188

08001588 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return uwTick;
 800158c:	4b02      	ldr	r3, [pc, #8]	; (8001598 <HAL_GetTick+0x10>)
 800158e:	681b      	ldr	r3, [r3, #0]
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	20001188 	.word	0x20001188

0800159c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff fff0 	bl	8001588 <HAL_GetTick>
 80015a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015b4:	d005      	beq.n	80015c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <HAL_Delay+0x44>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4413      	add	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c2:	bf00      	nop
 80015c4:	f7ff ffe0 	bl	8001588 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d8f7      	bhi.n	80015c4 <HAL_Delay+0x28>
  {
  }
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000000c 	.word	0x2000000c

080015e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001600:	4013      	ands	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800160c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001616:	4a04      	ldr	r2, [pc, #16]	; (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	60d3      	str	r3, [r2, #12]
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <__NVIC_GetPriorityGrouping+0x18>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 0307 	and.w	r3, r3, #7
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	2b00      	cmp	r3, #0
 8001658:	db0b      	blt.n	8001672 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	f003 021f 	and.w	r2, r3, #31
 8001660:	4906      	ldr	r1, [pc, #24]	; (800167c <__NVIC_EnableIRQ+0x34>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	095b      	lsrs	r3, r3, #5
 8001668:	2001      	movs	r0, #1
 800166a:	fa00 f202 	lsl.w	r2, r0, r2
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db0a      	blt.n	80016aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	490c      	ldr	r1, [pc, #48]	; (80016cc <__NVIC_SetPriority+0x4c>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a8:	e00a      	b.n	80016c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4908      	ldr	r1, [pc, #32]	; (80016d0 <__NVIC_SetPriority+0x50>)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	3b04      	subs	r3, #4
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	440b      	add	r3, r1
 80016be:	761a      	strb	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1c3 0307 	rsb	r3, r3, #7
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	bf28      	it	cs
 80016f2:	2304      	movcs	r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3304      	adds	r3, #4
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d902      	bls.n	8001704 <NVIC_EncodePriority+0x30>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b03      	subs	r3, #3
 8001702:	e000      	b.n	8001706 <NVIC_EncodePriority+0x32>
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800171c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43d9      	mvns	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	4313      	orrs	r3, r2
         );
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	; 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ff4f 	bl	80015e4 <__NVIC_SetPriorityGrouping>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001760:	f7ff ff64 	bl	800162c <__NVIC_GetPriorityGrouping>
 8001764:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	6978      	ldr	r0, [r7, #20]
 800176c:	f7ff ffb2 	bl	80016d4 <NVIC_EncodePriority>
 8001770:	4602      	mov	r2, r0
 8001772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff81 	bl	8001680 <__NVIC_SetPriority>
}
 800177e:	bf00      	nop
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	4603      	mov	r3, r0
 800178e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff57 	bl	8001648 <__NVIC_EnableIRQ>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b08b      	sub	sp, #44	; 0x2c
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ae:	2300      	movs	r3, #0
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b6:	e169      	b.n	8001a8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017b8:	2201      	movs	r2, #1
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	f040 8158 	bne.w	8001a86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4a9a      	ldr	r2, [pc, #616]	; (8001a44 <HAL_GPIO_Init+0x2a0>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d05e      	beq.n	800189e <HAL_GPIO_Init+0xfa>
 80017e0:	4a98      	ldr	r2, [pc, #608]	; (8001a44 <HAL_GPIO_Init+0x2a0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d875      	bhi.n	80018d2 <HAL_GPIO_Init+0x12e>
 80017e6:	4a98      	ldr	r2, [pc, #608]	; (8001a48 <HAL_GPIO_Init+0x2a4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d058      	beq.n	800189e <HAL_GPIO_Init+0xfa>
 80017ec:	4a96      	ldr	r2, [pc, #600]	; (8001a48 <HAL_GPIO_Init+0x2a4>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d86f      	bhi.n	80018d2 <HAL_GPIO_Init+0x12e>
 80017f2:	4a96      	ldr	r2, [pc, #600]	; (8001a4c <HAL_GPIO_Init+0x2a8>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d052      	beq.n	800189e <HAL_GPIO_Init+0xfa>
 80017f8:	4a94      	ldr	r2, [pc, #592]	; (8001a4c <HAL_GPIO_Init+0x2a8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d869      	bhi.n	80018d2 <HAL_GPIO_Init+0x12e>
 80017fe:	4a94      	ldr	r2, [pc, #592]	; (8001a50 <HAL_GPIO_Init+0x2ac>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d04c      	beq.n	800189e <HAL_GPIO_Init+0xfa>
 8001804:	4a92      	ldr	r2, [pc, #584]	; (8001a50 <HAL_GPIO_Init+0x2ac>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d863      	bhi.n	80018d2 <HAL_GPIO_Init+0x12e>
 800180a:	4a92      	ldr	r2, [pc, #584]	; (8001a54 <HAL_GPIO_Init+0x2b0>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d046      	beq.n	800189e <HAL_GPIO_Init+0xfa>
 8001810:	4a90      	ldr	r2, [pc, #576]	; (8001a54 <HAL_GPIO_Init+0x2b0>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d85d      	bhi.n	80018d2 <HAL_GPIO_Init+0x12e>
 8001816:	2b12      	cmp	r3, #18
 8001818:	d82a      	bhi.n	8001870 <HAL_GPIO_Init+0xcc>
 800181a:	2b12      	cmp	r3, #18
 800181c:	d859      	bhi.n	80018d2 <HAL_GPIO_Init+0x12e>
 800181e:	a201      	add	r2, pc, #4	; (adr r2, 8001824 <HAL_GPIO_Init+0x80>)
 8001820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001824:	0800189f 	.word	0x0800189f
 8001828:	08001879 	.word	0x08001879
 800182c:	0800188b 	.word	0x0800188b
 8001830:	080018cd 	.word	0x080018cd
 8001834:	080018d3 	.word	0x080018d3
 8001838:	080018d3 	.word	0x080018d3
 800183c:	080018d3 	.word	0x080018d3
 8001840:	080018d3 	.word	0x080018d3
 8001844:	080018d3 	.word	0x080018d3
 8001848:	080018d3 	.word	0x080018d3
 800184c:	080018d3 	.word	0x080018d3
 8001850:	080018d3 	.word	0x080018d3
 8001854:	080018d3 	.word	0x080018d3
 8001858:	080018d3 	.word	0x080018d3
 800185c:	080018d3 	.word	0x080018d3
 8001860:	080018d3 	.word	0x080018d3
 8001864:	080018d3 	.word	0x080018d3
 8001868:	08001881 	.word	0x08001881
 800186c:	08001895 	.word	0x08001895
 8001870:	4a79      	ldr	r2, [pc, #484]	; (8001a58 <HAL_GPIO_Init+0x2b4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d013      	beq.n	800189e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001876:	e02c      	b.n	80018d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	623b      	str	r3, [r7, #32]
          break;
 800187e:	e029      	b.n	80018d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	3304      	adds	r3, #4
 8001886:	623b      	str	r3, [r7, #32]
          break;
 8001888:	e024      	b.n	80018d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	3308      	adds	r3, #8
 8001890:	623b      	str	r3, [r7, #32]
          break;
 8001892:	e01f      	b.n	80018d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	330c      	adds	r3, #12
 800189a:	623b      	str	r3, [r7, #32]
          break;
 800189c:	e01a      	b.n	80018d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d102      	bne.n	80018ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018a6:	2304      	movs	r3, #4
 80018a8:	623b      	str	r3, [r7, #32]
          break;
 80018aa:	e013      	b.n	80018d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d105      	bne.n	80018c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b4:	2308      	movs	r3, #8
 80018b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	611a      	str	r2, [r3, #16]
          break;
 80018be:	e009      	b.n	80018d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c0:	2308      	movs	r3, #8
 80018c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	615a      	str	r2, [r3, #20]
          break;
 80018ca:	e003      	b.n	80018d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
          break;
 80018d0:	e000      	b.n	80018d4 <HAL_GPIO_Init+0x130>
          break;
 80018d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	2bff      	cmp	r3, #255	; 0xff
 80018d8:	d801      	bhi.n	80018de <HAL_GPIO_Init+0x13a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	e001      	b.n	80018e2 <HAL_GPIO_Init+0x13e>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3304      	adds	r3, #4
 80018e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2bff      	cmp	r3, #255	; 0xff
 80018e8:	d802      	bhi.n	80018f0 <HAL_GPIO_Init+0x14c>
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	e002      	b.n	80018f6 <HAL_GPIO_Init+0x152>
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	3b08      	subs	r3, #8
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	210f      	movs	r1, #15
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	fa01 f303 	lsl.w	r3, r1, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	401a      	ands	r2, r3
 8001908:	6a39      	ldr	r1, [r7, #32]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	fa01 f303 	lsl.w	r3, r1, r3
 8001910:	431a      	orrs	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 80b1 	beq.w	8001a86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001924:	4b4d      	ldr	r3, [pc, #308]	; (8001a5c <HAL_GPIO_Init+0x2b8>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	4a4c      	ldr	r2, [pc, #304]	; (8001a5c <HAL_GPIO_Init+0x2b8>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6193      	str	r3, [r2, #24]
 8001930:	4b4a      	ldr	r3, [pc, #296]	; (8001a5c <HAL_GPIO_Init+0x2b8>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800193c:	4a48      	ldr	r2, [pc, #288]	; (8001a60 <HAL_GPIO_Init+0x2bc>)
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	089b      	lsrs	r3, r3, #2
 8001942:	3302      	adds	r3, #2
 8001944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001948:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	220f      	movs	r2, #15
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	4013      	ands	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a40      	ldr	r2, [pc, #256]	; (8001a64 <HAL_GPIO_Init+0x2c0>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d013      	beq.n	8001990 <HAL_GPIO_Init+0x1ec>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a3f      	ldr	r2, [pc, #252]	; (8001a68 <HAL_GPIO_Init+0x2c4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d00d      	beq.n	800198c <HAL_GPIO_Init+0x1e8>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a3e      	ldr	r2, [pc, #248]	; (8001a6c <HAL_GPIO_Init+0x2c8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d007      	beq.n	8001988 <HAL_GPIO_Init+0x1e4>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a3d      	ldr	r2, [pc, #244]	; (8001a70 <HAL_GPIO_Init+0x2cc>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d101      	bne.n	8001984 <HAL_GPIO_Init+0x1e0>
 8001980:	2303      	movs	r3, #3
 8001982:	e006      	b.n	8001992 <HAL_GPIO_Init+0x1ee>
 8001984:	2304      	movs	r3, #4
 8001986:	e004      	b.n	8001992 <HAL_GPIO_Init+0x1ee>
 8001988:	2302      	movs	r3, #2
 800198a:	e002      	b.n	8001992 <HAL_GPIO_Init+0x1ee>
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <HAL_GPIO_Init+0x1ee>
 8001990:	2300      	movs	r3, #0
 8001992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001994:	f002 0203 	and.w	r2, r2, #3
 8001998:	0092      	lsls	r2, r2, #2
 800199a:	4093      	lsls	r3, r2
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	4313      	orrs	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019a2:	492f      	ldr	r1, [pc, #188]	; (8001a60 <HAL_GPIO_Init+0x2bc>)
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	089b      	lsrs	r3, r3, #2
 80019a8:	3302      	adds	r3, #2
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d006      	beq.n	80019ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019bc:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <HAL_GPIO_Init+0x2d0>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	492c      	ldr	r1, [pc, #176]	; (8001a74 <HAL_GPIO_Init+0x2d0>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	600b      	str	r3, [r1, #0]
 80019c8:	e006      	b.n	80019d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019ca:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <HAL_GPIO_Init+0x2d0>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	4928      	ldr	r1, [pc, #160]	; (8001a74 <HAL_GPIO_Init+0x2d0>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d006      	beq.n	80019f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019e4:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <HAL_GPIO_Init+0x2d0>)
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	4922      	ldr	r1, [pc, #136]	; (8001a74 <HAL_GPIO_Init+0x2d0>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019f2:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <HAL_GPIO_Init+0x2d0>)
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	491e      	ldr	r1, [pc, #120]	; (8001a74 <HAL_GPIO_Init+0x2d0>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d006      	beq.n	8001a1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <HAL_GPIO_Init+0x2d0>)
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	4918      	ldr	r1, [pc, #96]	; (8001a74 <HAL_GPIO_Init+0x2d0>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	608b      	str	r3, [r1, #8]
 8001a18:	e006      	b.n	8001a28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a1a:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <HAL_GPIO_Init+0x2d0>)
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	4914      	ldr	r1, [pc, #80]	; (8001a74 <HAL_GPIO_Init+0x2d0>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d021      	beq.n	8001a78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <HAL_GPIO_Init+0x2d0>)
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	490e      	ldr	r1, [pc, #56]	; (8001a74 <HAL_GPIO_Init+0x2d0>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	60cb      	str	r3, [r1, #12]
 8001a40:	e021      	b.n	8001a86 <HAL_GPIO_Init+0x2e2>
 8001a42:	bf00      	nop
 8001a44:	10320000 	.word	0x10320000
 8001a48:	10310000 	.word	0x10310000
 8001a4c:	10220000 	.word	0x10220000
 8001a50:	10210000 	.word	0x10210000
 8001a54:	10120000 	.word	0x10120000
 8001a58:	10110000 	.word	0x10110000
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40010000 	.word	0x40010000
 8001a64:	40010800 	.word	0x40010800
 8001a68:	40010c00 	.word	0x40010c00
 8001a6c:	40011000 	.word	0x40011000
 8001a70:	40011400 	.word	0x40011400
 8001a74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_GPIO_Init+0x304>)
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	4909      	ldr	r1, [pc, #36]	; (8001aa8 <HAL_GPIO_Init+0x304>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	3301      	adds	r3, #1
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	fa22 f303 	lsr.w	r3, r2, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f47f ae8e 	bne.w	80017b8 <HAL_GPIO_Init+0x14>
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	372c      	adds	r7, #44	; 0x2c
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr
 8001aa8:	40010400 	.word	0x40010400

08001aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	807b      	strh	r3, [r7, #2]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001abc:	787b      	ldrb	r3, [r7, #1]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ac2:	887a      	ldrh	r2, [r7, #2]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ac8:	e003      	b.n	8001ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aca:	887b      	ldrh	r3, [r7, #2]
 8001acc:	041a      	lsls	r2, r3, #16
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	611a      	str	r2, [r3, #16]
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e26c      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 8087 	beq.w	8001c0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001afc:	4b92      	ldr	r3, [pc, #584]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d00c      	beq.n	8001b22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b08:	4b8f      	ldr	r3, [pc, #572]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d112      	bne.n	8001b3a <HAL_RCC_OscConfig+0x5e>
 8001b14:	4b8c      	ldr	r3, [pc, #560]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b20:	d10b      	bne.n	8001b3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b22:	4b89      	ldr	r3, [pc, #548]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d06c      	beq.n	8001c08 <HAL_RCC_OscConfig+0x12c>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d168      	bne.n	8001c08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e246      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_OscConfig+0x76>
 8001b44:	4b80      	ldr	r3, [pc, #512]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a7f      	ldr	r2, [pc, #508]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	e02e      	b.n	8001bb0 <HAL_RCC_OscConfig+0xd4>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x98>
 8001b5a:	4b7b      	ldr	r3, [pc, #492]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a7a      	ldr	r2, [pc, #488]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	4b78      	ldr	r3, [pc, #480]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a77      	ldr	r2, [pc, #476]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e01d      	b.n	8001bb0 <HAL_RCC_OscConfig+0xd4>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b7c:	d10c      	bne.n	8001b98 <HAL_RCC_OscConfig+0xbc>
 8001b7e:	4b72      	ldr	r3, [pc, #456]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a71      	ldr	r2, [pc, #452]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	4b6f      	ldr	r3, [pc, #444]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a6e      	ldr	r2, [pc, #440]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e00b      	b.n	8001bb0 <HAL_RCC_OscConfig+0xd4>
 8001b98:	4b6b      	ldr	r3, [pc, #428]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a6a      	ldr	r2, [pc, #424]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b68      	ldr	r3, [pc, #416]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a67      	ldr	r2, [pc, #412]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d013      	beq.n	8001be0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fce6 	bl	8001588 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7ff fce2 	bl	8001588 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	; 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e1fa      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	4b5d      	ldr	r3, [pc, #372]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0xe4>
 8001bde:	e014      	b.n	8001c0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff fcd2 	bl	8001588 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be8:	f7ff fcce 	bl	8001588 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b64      	cmp	r3, #100	; 0x64
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e1e6      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfa:	4b53      	ldr	r3, [pc, #332]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x10c>
 8001c06:	e000      	b.n	8001c0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d063      	beq.n	8001cde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c16:	4b4c      	ldr	r3, [pc, #304]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00b      	beq.n	8001c3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c22:	4b49      	ldr	r3, [pc, #292]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d11c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x18c>
 8001c2e:	4b46      	ldr	r3, [pc, #280]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d116      	bne.n	8001c68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3a:	4b43      	ldr	r3, [pc, #268]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d005      	beq.n	8001c52 <HAL_RCC_OscConfig+0x176>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d001      	beq.n	8001c52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e1ba      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c52:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4939      	ldr	r1, [pc, #228]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c66:	e03a      	b.n	8001cde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d020      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c70:	4b36      	ldr	r3, [pc, #216]	; (8001d4c <HAL_RCC_OscConfig+0x270>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7ff fc87 	bl	8001588 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7e:	f7ff fc83 	bl	8001588 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e19b      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c90:	4b2d      	ldr	r3, [pc, #180]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9c:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4927      	ldr	r1, [pc, #156]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	600b      	str	r3, [r1, #0]
 8001cb0:	e015      	b.n	8001cde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb2:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <HAL_RCC_OscConfig+0x270>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fc66 	bl	8001588 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc0:	f7ff fc62 	bl	8001588 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e17a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d03a      	beq.n	8001d60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d019      	beq.n	8001d26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <HAL_RCC_OscConfig+0x274>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf8:	f7ff fc46 	bl	8001588 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d00:	f7ff fc42 	bl	8001588 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e15a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f000 faf4 	bl	800230c <RCC_Delay>
 8001d24:	e01c      	b.n	8001d60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_RCC_OscConfig+0x274>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2c:	f7ff fc2c 	bl	8001588 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d32:	e00f      	b.n	8001d54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d34:	f7ff fc28 	bl	8001588 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d908      	bls.n	8001d54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e140      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	42420000 	.word	0x42420000
 8001d50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d54:	4b9e      	ldr	r3, [pc, #632]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1e9      	bne.n	8001d34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 80a6 	beq.w	8001eba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d72:	4b97      	ldr	r3, [pc, #604]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10d      	bne.n	8001d9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	4b94      	ldr	r3, [pc, #592]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	4a93      	ldr	r2, [pc, #588]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d88:	61d3      	str	r3, [r2, #28]
 8001d8a:	4b91      	ldr	r3, [pc, #580]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d96:	2301      	movs	r3, #1
 8001d98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9a:	4b8e      	ldr	r3, [pc, #568]	; (8001fd4 <HAL_RCC_OscConfig+0x4f8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d118      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da6:	4b8b      	ldr	r3, [pc, #556]	; (8001fd4 <HAL_RCC_OscConfig+0x4f8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a8a      	ldr	r2, [pc, #552]	; (8001fd4 <HAL_RCC_OscConfig+0x4f8>)
 8001dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db2:	f7ff fbe9 	bl	8001588 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dba:	f7ff fbe5 	bl	8001588 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b64      	cmp	r3, #100	; 0x64
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e0fd      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dcc:	4b81      	ldr	r3, [pc, #516]	; (8001fd4 <HAL_RCC_OscConfig+0x4f8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d106      	bne.n	8001dee <HAL_RCC_OscConfig+0x312>
 8001de0:	4b7b      	ldr	r3, [pc, #492]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	4a7a      	ldr	r2, [pc, #488]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6213      	str	r3, [r2, #32]
 8001dec:	e02d      	b.n	8001e4a <HAL_RCC_OscConfig+0x36e>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10c      	bne.n	8001e10 <HAL_RCC_OscConfig+0x334>
 8001df6:	4b76      	ldr	r3, [pc, #472]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	4a75      	ldr	r2, [pc, #468]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001dfc:	f023 0301 	bic.w	r3, r3, #1
 8001e00:	6213      	str	r3, [r2, #32]
 8001e02:	4b73      	ldr	r3, [pc, #460]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	4a72      	ldr	r2, [pc, #456]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001e08:	f023 0304 	bic.w	r3, r3, #4
 8001e0c:	6213      	str	r3, [r2, #32]
 8001e0e:	e01c      	b.n	8001e4a <HAL_RCC_OscConfig+0x36e>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	2b05      	cmp	r3, #5
 8001e16:	d10c      	bne.n	8001e32 <HAL_RCC_OscConfig+0x356>
 8001e18:	4b6d      	ldr	r3, [pc, #436]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	4a6c      	ldr	r2, [pc, #432]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001e1e:	f043 0304 	orr.w	r3, r3, #4
 8001e22:	6213      	str	r3, [r2, #32]
 8001e24:	4b6a      	ldr	r3, [pc, #424]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	4a69      	ldr	r2, [pc, #420]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6213      	str	r3, [r2, #32]
 8001e30:	e00b      	b.n	8001e4a <HAL_RCC_OscConfig+0x36e>
 8001e32:	4b67      	ldr	r3, [pc, #412]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	4a66      	ldr	r2, [pc, #408]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	f023 0301 	bic.w	r3, r3, #1
 8001e3c:	6213      	str	r3, [r2, #32]
 8001e3e:	4b64      	ldr	r3, [pc, #400]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	4a63      	ldr	r2, [pc, #396]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	f023 0304 	bic.w	r3, r3, #4
 8001e48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d015      	beq.n	8001e7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e52:	f7ff fb99 	bl	8001588 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e58:	e00a      	b.n	8001e70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5a:	f7ff fb95 	bl	8001588 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e0ab      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e70:	4b57      	ldr	r3, [pc, #348]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0ee      	beq.n	8001e5a <HAL_RCC_OscConfig+0x37e>
 8001e7c:	e014      	b.n	8001ea8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7e:	f7ff fb83 	bl	8001588 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e86:	f7ff fb7f 	bl	8001588 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e095      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9c:	4b4c      	ldr	r3, [pc, #304]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1ee      	bne.n	8001e86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ea8:	7dfb      	ldrb	r3, [r7, #23]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d105      	bne.n	8001eba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eae:	4b48      	ldr	r3, [pc, #288]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	4a47      	ldr	r2, [pc, #284]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 8081 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ec4:	4b42      	ldr	r3, [pc, #264]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d061      	beq.n	8001f94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d146      	bne.n	8001f66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed8:	4b3f      	ldr	r3, [pc, #252]	; (8001fd8 <HAL_RCC_OscConfig+0x4fc>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ede:	f7ff fb53 	bl	8001588 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee6:	f7ff fb4f 	bl	8001588 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e067      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef8:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1f0      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0c:	d108      	bne.n	8001f20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f0e:	4b30      	ldr	r3, [pc, #192]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	492d      	ldr	r1, [pc, #180]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f20:	4b2b      	ldr	r3, [pc, #172]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a19      	ldr	r1, [r3, #32]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	430b      	orrs	r3, r1
 8001f32:	4927      	ldr	r1, [pc, #156]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f38:	4b27      	ldr	r3, [pc, #156]	; (8001fd8 <HAL_RCC_OscConfig+0x4fc>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7ff fb23 	bl	8001588 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f46:	f7ff fb1f 	bl	8001588 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e037      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f58:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x46a>
 8001f64:	e02f      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f66:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <HAL_RCC_OscConfig+0x4fc>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6c:	f7ff fb0c 	bl	8001588 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f74:	f7ff fb08 	bl	8001588 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e020      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f86:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x498>
 8001f92:	e018      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e013      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d106      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d001      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40007000 	.word	0x40007000
 8001fd8:	42420060 	.word	0x42420060

08001fdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0d0      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b6a      	ldr	r3, [pc, #424]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d910      	bls.n	8002020 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b67      	ldr	r3, [pc, #412]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 0207 	bic.w	r2, r3, #7
 8002006:	4965      	ldr	r1, [pc, #404]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200e:	4b63      	ldr	r3, [pc, #396]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d001      	beq.n	8002020 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0b8      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d020      	beq.n	800206e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002038:	4b59      	ldr	r3, [pc, #356]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	4a58      	ldr	r2, [pc, #352]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002042:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002050:	4b53      	ldr	r3, [pc, #332]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4a52      	ldr	r2, [pc, #328]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800205a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800205c:	4b50      	ldr	r3, [pc, #320]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	494d      	ldr	r1, [pc, #308]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	4313      	orrs	r3, r2
 800206c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d040      	beq.n	80020fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d107      	bne.n	8002092 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002082:	4b47      	ldr	r3, [pc, #284]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d115      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e07f      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209a:	4b41      	ldr	r3, [pc, #260]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e073      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	4b3d      	ldr	r3, [pc, #244]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e06b      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ba:	4b39      	ldr	r3, [pc, #228]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f023 0203 	bic.w	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4936      	ldr	r1, [pc, #216]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020cc:	f7ff fa5c 	bl	8001588 <HAL_GetTick>
 80020d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d4:	f7ff fa58 	bl	8001588 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e053      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 020c 	and.w	r2, r3, #12
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d1eb      	bne.n	80020d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020fc:	4b27      	ldr	r3, [pc, #156]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d210      	bcs.n	800212c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b24      	ldr	r3, [pc, #144]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 0207 	bic.w	r2, r3, #7
 8002112:	4922      	ldr	r1, [pc, #136]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211a:	4b20      	ldr	r3, [pc, #128]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e032      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d008      	beq.n	800214a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4916      	ldr	r1, [pc, #88]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	4313      	orrs	r3, r2
 8002148:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d009      	beq.n	800216a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002156:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	490e      	ldr	r1, [pc, #56]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	4313      	orrs	r3, r2
 8002168:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800216a:	f000 f821 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 800216e:	4602      	mov	r2, r0
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	490a      	ldr	r1, [pc, #40]	; (80021a4 <HAL_RCC_ClockConfig+0x1c8>)
 800217c:	5ccb      	ldrb	r3, [r1, r3]
 800217e:	fa22 f303 	lsr.w	r3, r2, r3
 8002182:	4a09      	ldr	r2, [pc, #36]	; (80021a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_RCC_ClockConfig+0x1d0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff f932 	bl	80013f4 <HAL_InitTick>

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40022000 	.word	0x40022000
 80021a0:	40021000 	.word	0x40021000
 80021a4:	08005e50 	.word	0x08005e50
 80021a8:	20000004 	.word	0x20000004
 80021ac:	20000008 	.word	0x20000008

080021b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b0:	b490      	push	{r4, r7}
 80021b2:	b08a      	sub	sp, #40	; 0x28
 80021b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021b6:	4b2a      	ldr	r3, [pc, #168]	; (8002260 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021b8:	1d3c      	adds	r4, r7, #4
 80021ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021c0:	f240 2301 	movw	r3, #513	; 0x201
 80021c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	2300      	movs	r3, #0
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021da:	4b22      	ldr	r3, [pc, #136]	; (8002264 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d002      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0x40>
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_GetSysClockFreq+0x46>
 80021ee:	e02d      	b.n	800224c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021f0:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021f2:	623b      	str	r3, [r7, #32]
      break;
 80021f4:	e02d      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	0c9b      	lsrs	r3, r3, #18
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002202:	4413      	add	r3, r2
 8002204:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002208:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d013      	beq.n	800223c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002214:	4b13      	ldr	r3, [pc, #76]	; (8002264 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	0c5b      	lsrs	r3, r3, #17
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002222:	4413      	add	r3, r2
 8002224:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002228:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	4a0e      	ldr	r2, [pc, #56]	; (8002268 <HAL_RCC_GetSysClockFreq+0xb8>)
 800222e:	fb02 f203 	mul.w	r2, r2, r3
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	fbb2 f3f3 	udiv	r3, r2, r3
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
 800223a:	e004      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	4a0b      	ldr	r2, [pc, #44]	; (800226c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002240:	fb02 f303 	mul.w	r3, r2, r3
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	623b      	str	r3, [r7, #32]
      break;
 800224a:	e002      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_RCC_GetSysClockFreq+0xb8>)
 800224e:	623b      	str	r3, [r7, #32]
      break;
 8002250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002252:	6a3b      	ldr	r3, [r7, #32]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3728      	adds	r7, #40	; 0x28
 8002258:	46bd      	mov	sp, r7
 800225a:	bc90      	pop	{r4, r7}
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	08005e38 	.word	0x08005e38
 8002264:	40021000 	.word	0x40021000
 8002268:	007a1200 	.word	0x007a1200
 800226c:	003d0900 	.word	0x003d0900

08002270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002274:	4b02      	ldr	r3, [pc, #8]	; (8002280 <HAL_RCC_GetHCLKFreq+0x10>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr
 8002280:	20000004 	.word	0x20000004

08002284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002288:	f7ff fff2 	bl	8002270 <HAL_RCC_GetHCLKFreq>
 800228c:	4602      	mov	r2, r0
 800228e:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	0adb      	lsrs	r3, r3, #11
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	4903      	ldr	r1, [pc, #12]	; (80022a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800229a:	5ccb      	ldrb	r3, [r1, r3]
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000
 80022a8:	08005e60 	.word	0x08005e60

080022ac <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	220f      	movs	r2, #15
 80022ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <HAL_RCC_GetClockConfig+0x58>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0203 	and.w	r2, r3, #3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80022c8:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <HAL_RCC_GetClockConfig+0x58>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCC_GetClockConfig+0x58>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <HAL_RCC_GetClockConfig+0x58>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	08db      	lsrs	r3, r3, #3
 80022e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_RCC_GetClockConfig+0x5c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0207 	and.w	r2, r3, #7
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	40021000 	.word	0x40021000
 8002308:	40022000 	.word	0x40022000

0800230c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002314:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <RCC_Delay+0x34>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <RCC_Delay+0x38>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	0a5b      	lsrs	r3, r3, #9
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	fb02 f303 	mul.w	r3, r2, r3
 8002326:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002328:	bf00      	nop
  }
  while (Delay --);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1e5a      	subs	r2, r3, #1
 800232e:	60fa      	str	r2, [r7, #12]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f9      	bne.n	8002328 <RCC_Delay+0x1c>
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	20000004 	.word	0x20000004
 8002344:	10624dd3 	.word	0x10624dd3

08002348 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e076      	b.n	8002448 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	2b00      	cmp	r3, #0
 8002360:	d108      	bne.n	8002374 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800236a:	d009      	beq.n	8002380 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	61da      	str	r2, [r3, #28]
 8002372:	e005      	b.n	8002380 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d106      	bne.n	80023a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7fe ffe0 	bl	8001360 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002404:	ea42 0103 	orr.w	r1, r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	0c1a      	lsrs	r2, r3, #16
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f002 0204 	and.w	r2, r2, #4
 8002426:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	69da      	ldr	r2, [r3, #28]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002436:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	603b      	str	r3, [r7, #0]
 800245c:	4613      	mov	r3, r2
 800245e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800246a:	2b01      	cmp	r3, #1
 800246c:	d101      	bne.n	8002472 <HAL_SPI_Transmit+0x22>
 800246e:	2302      	movs	r3, #2
 8002470:	e126      	b.n	80026c0 <HAL_SPI_Transmit+0x270>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800247a:	f7ff f885 	bl	8001588 <HAL_GetTick>
 800247e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002480:	88fb      	ldrh	r3, [r7, #6]
 8002482:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b01      	cmp	r3, #1
 800248e:	d002      	beq.n	8002496 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002490:	2302      	movs	r3, #2
 8002492:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002494:	e10b      	b.n	80026ae <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <HAL_SPI_Transmit+0x52>
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d102      	bne.n	80024a8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024a6:	e102      	b.n	80026ae <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2203      	movs	r2, #3
 80024ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	88fa      	ldrh	r2, [r7, #6]
 80024c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	88fa      	ldrh	r2, [r7, #6]
 80024c6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ee:	d10f      	bne.n	8002510 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800250e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251a:	2b40      	cmp	r3, #64	; 0x40
 800251c:	d007      	beq.n	800252e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800252c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002536:	d14b      	bne.n	80025d0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <HAL_SPI_Transmit+0xf6>
 8002540:	8afb      	ldrh	r3, [r7, #22]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d13e      	bne.n	80025c4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	881a      	ldrh	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	1c9a      	adds	r2, r3, #2
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002560:	b29b      	uxth	r3, r3
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800256a:	e02b      	b.n	80025c4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b02      	cmp	r3, #2
 8002578:	d112      	bne.n	80025a0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	881a      	ldrh	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	1c9a      	adds	r2, r3, #2
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002594:	b29b      	uxth	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	86da      	strh	r2, [r3, #54]	; 0x36
 800259e:	e011      	b.n	80025c4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025a0:	f7fe fff2 	bl	8001588 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d803      	bhi.n	80025b8 <HAL_SPI_Transmit+0x168>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025b6:	d102      	bne.n	80025be <HAL_SPI_Transmit+0x16e>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d102      	bne.n	80025c4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80025c2:	e074      	b.n	80026ae <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1ce      	bne.n	800256c <HAL_SPI_Transmit+0x11c>
 80025ce:	e04c      	b.n	800266a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <HAL_SPI_Transmit+0x18e>
 80025d8:	8afb      	ldrh	r3, [r7, #22]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d140      	bne.n	8002660 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	330c      	adds	r3, #12
 80025e8:	7812      	ldrb	r2, [r2, #0]
 80025ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002604:	e02c      	b.n	8002660 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b02      	cmp	r3, #2
 8002612:	d113      	bne.n	800263c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	330c      	adds	r3, #12
 800261e:	7812      	ldrb	r2, [r2, #0]
 8002620:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002630:	b29b      	uxth	r3, r3
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	86da      	strh	r2, [r3, #54]	; 0x36
 800263a:	e011      	b.n	8002660 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800263c:	f7fe ffa4 	bl	8001588 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d803      	bhi.n	8002654 <HAL_SPI_Transmit+0x204>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002652:	d102      	bne.n	800265a <HAL_SPI_Transmit+0x20a>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d102      	bne.n	8002660 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800265e:	e026      	b.n	80026ae <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002664:	b29b      	uxth	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1cd      	bne.n	8002606 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	6839      	ldr	r1, [r7, #0]
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 f8b2 	bl	80027d8 <SPI_EndRxTxTransaction>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2220      	movs	r2, #32
 800267e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10a      	bne.n	800269e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002688:	2300      	movs	r3, #0
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	77fb      	strb	r3, [r7, #31]
 80026aa:	e000      	b.n	80026ae <HAL_SPI_Transmit+0x25e>
  }

error:
 80026ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026be:	7ffb      	ldrb	r3, [r7, #31]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3720      	adds	r7, #32
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	4613      	mov	r3, r2
 80026d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026d8:	f7fe ff56 	bl	8001588 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	4413      	add	r3, r2
 80026e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026e8:	f7fe ff4e 	bl	8001588 <HAL_GetTick>
 80026ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026ee:	4b39      	ldr	r3, [pc, #228]	; (80027d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	015b      	lsls	r3, r3, #5
 80026f4:	0d1b      	lsrs	r3, r3, #20
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	fb02 f303 	mul.w	r3, r2, r3
 80026fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026fe:	e054      	b.n	80027aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002706:	d050      	beq.n	80027aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002708:	f7fe ff3e 	bl	8001588 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	69fa      	ldr	r2, [r7, #28]
 8002714:	429a      	cmp	r2, r3
 8002716:	d902      	bls.n	800271e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d13d      	bne.n	800279a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800272c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002736:	d111      	bne.n	800275c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002740:	d004      	beq.n	800274c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274a:	d107      	bne.n	800275c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800275a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002764:	d10f      	bne.n	8002786 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002784:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e017      	b.n	80027ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4013      	ands	r3, r2
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	bf0c      	ite	eq
 80027ba:	2301      	moveq	r3, #1
 80027bc:	2300      	movne	r3, #0
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	461a      	mov	r2, r3
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d19b      	bne.n	8002700 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3720      	adds	r7, #32
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000004 	.word	0x20000004

080027d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2200      	movs	r2, #0
 80027ec:	2180      	movs	r1, #128	; 0x80
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f7ff ff6a 	bl	80026c8 <SPI_WaitFlagStateUntilTimeout>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d007      	beq.n	800280a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fe:	f043 0220 	orr.w	r2, r3, #32
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e000      	b.n	800280c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e041      	b.n	80028aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f839 	bl	80028b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3304      	adds	r3, #4
 8002850:	4619      	mov	r1, r3
 8002852:	4610      	mov	r0, r2
 8002854:	f000 f9b4 	bl	8002bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d001      	beq.n	80028dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e03a      	b.n	8002952 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a18      	ldr	r2, [pc, #96]	; (800295c <HAL_TIM_Base_Start_IT+0x98>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00e      	beq.n	800291c <HAL_TIM_Base_Start_IT+0x58>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002906:	d009      	beq.n	800291c <HAL_TIM_Base_Start_IT+0x58>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a14      	ldr	r2, [pc, #80]	; (8002960 <HAL_TIM_Base_Start_IT+0x9c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d004      	beq.n	800291c <HAL_TIM_Base_Start_IT+0x58>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a13      	ldr	r2, [pc, #76]	; (8002964 <HAL_TIM_Base_Start_IT+0xa0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d111      	bne.n	8002940 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b06      	cmp	r3, #6
 800292c:	d010      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0201 	orr.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800293e:	e007      	b.n	8002950 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr
 800295c:	40012c00 	.word	0x40012c00
 8002960:	40000400 	.word	0x40000400
 8002964:	40000800 	.word	0x40000800

08002968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b02      	cmp	r3, #2
 800297c:	d122      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b02      	cmp	r3, #2
 800298a:	d11b      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0202 	mvn.w	r2, #2
 8002994:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f8ed 	bl	8002b8a <HAL_TIM_IC_CaptureCallback>
 80029b0:	e005      	b.n	80029be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f8e0 	bl	8002b78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f8ef 	bl	8002b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d122      	bne.n	8002a18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d11b      	bne.n	8002a18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0204 	mvn.w	r2, #4
 80029e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2202      	movs	r2, #2
 80029ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f8c3 	bl	8002b8a <HAL_TIM_IC_CaptureCallback>
 8002a04:	e005      	b.n	8002a12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f8b6 	bl	8002b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f8c5 	bl	8002b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d122      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d11b      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0208 	mvn.w	r2, #8
 8002a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2204      	movs	r2, #4
 8002a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f899 	bl	8002b8a <HAL_TIM_IC_CaptureCallback>
 8002a58:	e005      	b.n	8002a66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f88c 	bl	8002b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f89b 	bl	8002b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	2b10      	cmp	r3, #16
 8002a78:	d122      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	2b10      	cmp	r3, #16
 8002a86:	d11b      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0210 	mvn.w	r2, #16
 8002a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2208      	movs	r2, #8
 8002a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f86f 	bl	8002b8a <HAL_TIM_IC_CaptureCallback>
 8002aac:	e005      	b.n	8002aba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f862 	bl	8002b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f871 	bl	8002b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d10e      	bne.n	8002aec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d107      	bne.n	8002aec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0201 	mvn.w	r2, #1
 8002ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7fe fb2a 	bl	8001140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af6:	2b80      	cmp	r3, #128	; 0x80
 8002af8:	d10e      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b04:	2b80      	cmp	r3, #128	; 0x80
 8002b06:	d107      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f8bf 	bl	8002c96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b22:	2b40      	cmp	r3, #64	; 0x40
 8002b24:	d10e      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b30:	2b40      	cmp	r3, #64	; 0x40
 8002b32:	d107      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f835 	bl	8002bae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d10e      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	d107      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0220 	mvn.w	r2, #32
 8002b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f88a 	bl	8002c84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr

08002b8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr

08002bae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr

08002bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a29      	ldr	r2, [pc, #164]	; (8002c78 <TIM_Base_SetConfig+0xb8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00b      	beq.n	8002bf0 <TIM_Base_SetConfig+0x30>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bde:	d007      	beq.n	8002bf0 <TIM_Base_SetConfig+0x30>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a26      	ldr	r2, [pc, #152]	; (8002c7c <TIM_Base_SetConfig+0xbc>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d003      	beq.n	8002bf0 <TIM_Base_SetConfig+0x30>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a25      	ldr	r2, [pc, #148]	; (8002c80 <TIM_Base_SetConfig+0xc0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d108      	bne.n	8002c02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a1c      	ldr	r2, [pc, #112]	; (8002c78 <TIM_Base_SetConfig+0xb8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00b      	beq.n	8002c22 <TIM_Base_SetConfig+0x62>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c10:	d007      	beq.n	8002c22 <TIM_Base_SetConfig+0x62>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a19      	ldr	r2, [pc, #100]	; (8002c7c <TIM_Base_SetConfig+0xbc>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d003      	beq.n	8002c22 <TIM_Base_SetConfig+0x62>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a18      	ldr	r2, [pc, #96]	; (8002c80 <TIM_Base_SetConfig+0xc0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d108      	bne.n	8002c34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a07      	ldr	r2, [pc, #28]	; (8002c78 <TIM_Base_SetConfig+0xb8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d103      	bne.n	8002c68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	615a      	str	r2, [r3, #20]
}
 8002c6e:	bf00      	nop
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr
 8002c78:	40012c00 	.word	0x40012c00
 8002c7c:	40000400 	.word	0x40000400
 8002c80:	40000800 	.word	0x40000800

08002c84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr

08002c96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr

08002ca8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002cb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cba:	2b84      	cmp	r3, #132	; 0x84
 8002cbc:	d005      	beq.n	8002cca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002cbe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3303      	adds	r3, #3
 8002cc8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002cca:	68fb      	ldr	r3, [r7, #12]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002cda:	f000 fed5 	bl	8003a88 <vTaskStartScheduler>
  
  return osOK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ce6:	b089      	sub	sp, #36	; 0x24
 8002ce8:	af04      	add	r7, sp, #16
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d020      	beq.n	8002d38 <osThreadCreate+0x54>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d01c      	beq.n	8002d38 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685c      	ldr	r4, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681d      	ldr	r5, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691e      	ldr	r6, [r3, #16]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ffc9 	bl	8002ca8 <makeFreeRtosPriority>
 8002d16:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d20:	9202      	str	r2, [sp, #8]
 8002d22:	9301      	str	r3, [sp, #4]
 8002d24:	9100      	str	r1, [sp, #0]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	4632      	mov	r2, r6
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f000 fcec 	bl	800370a <xTaskCreateStatic>
 8002d32:	4603      	mov	r3, r0
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	e01c      	b.n	8002d72 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685c      	ldr	r4, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d44:	b29e      	uxth	r6, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff ffab 	bl	8002ca8 <makeFreeRtosPriority>
 8002d52:	4602      	mov	r2, r0
 8002d54:	f107 030c 	add.w	r3, r7, #12
 8002d58:	9301      	str	r3, [sp, #4]
 8002d5a:	9200      	str	r2, [sp, #0]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	4632      	mov	r2, r6
 8002d60:	4629      	mov	r1, r5
 8002d62:	4620      	mov	r0, r4
 8002d64:	f000 fd2d 	bl	80037c2 <xTaskCreate>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d001      	beq.n	8002d72 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e000      	b.n	8002d74 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002d72:	68fb      	ldr	r3, [r7, #12]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d7c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <osDelay+0x16>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	e000      	b.n	8002d94 <osDelay+0x18>
 8002d92:	2301      	movs	r3, #1
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 fe43 	bl	8003a20 <vTaskDelay>
  
  return osOK;
 8002d9a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f103 0208 	add.w	r2, r3, #8
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f103 0208 	add.w	r2, r3, #8
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f103 0208 	add.w	r2, r3, #8
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr

08002de2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr

08002dfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b085      	sub	sp, #20
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	601a      	str	r2, [r3, #0]
}
 8002e36:	bf00      	nop
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e56:	d103      	bne.n	8002e60 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	e00c      	b.n	8002e7a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3308      	adds	r3, #8
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	e002      	b.n	8002e6e <vListInsert+0x2e>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d2f6      	bcs.n	8002e68 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	601a      	str	r2, [r3, #0]
}
 8002ea6:	bf00      	nop
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6892      	ldr	r2, [r2, #8]
 8002ec6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6852      	ldr	r2, [r2, #4]
 8002ed0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d103      	bne.n	8002ee4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	1e5a      	subs	r2, r3, #1
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr
	...

08002f04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10a      	bne.n	8002f2e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002f2a:	bf00      	nop
 8002f2c:	e7fe      	b.n	8002f2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002f2e:	f001 fce5 	bl	80048fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	68f9      	ldr	r1, [r7, #12]
 8002f3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f3e:	fb01 f303 	mul.w	r3, r1, r3
 8002f42:	441a      	add	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	68f9      	ldr	r1, [r7, #12]
 8002f62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f64:	fb01 f303 	mul.w	r3, r1, r3
 8002f68:	441a      	add	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	22ff      	movs	r2, #255	; 0xff
 8002f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	22ff      	movs	r2, #255	; 0xff
 8002f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d114      	bne.n	8002fae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d01a      	beq.n	8002fc2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	3310      	adds	r3, #16
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 ffbf 	bl	8003f14 <xTaskRemoveFromEventList>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d012      	beq.n	8002fc2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <xQueueGenericReset+0xcc>)
 8002f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	f3bf 8f6f 	isb	sy
 8002fac:	e009      	b.n	8002fc2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3310      	adds	r3, #16
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fef6 	bl	8002da4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	3324      	adds	r3, #36	; 0x24
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fef1 	bl	8002da4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002fc2:	f001 fccb 	bl	800495c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002fc6:	2301      	movs	r3, #1
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	e000ed04 	.word	0xe000ed04

08002fd4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	; 0x28
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10a      	bne.n	8002ffe <xQueueGenericCreate+0x2a>
	__asm volatile
 8002fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	613b      	str	r3, [r7, #16]
}
 8002ffa:	bf00      	nop
 8002ffc:	e7fe      	b.n	8002ffc <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d102      	bne.n	800300a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003004:	2300      	movs	r3, #0
 8003006:	61fb      	str	r3, [r7, #28]
 8003008:	e004      	b.n	8003014 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	3348      	adds	r3, #72	; 0x48
 8003018:	4618      	mov	r0, r3
 800301a:	f001 fd31 	bl	8004a80 <pvPortMalloc>
 800301e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00f      	beq.n	8003046 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	3348      	adds	r3, #72	; 0x48
 800302a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003034:	79fa      	ldrb	r2, [r7, #7]
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	4613      	mov	r3, r2
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	68b9      	ldr	r1, [r7, #8]
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f805 	bl	8003050 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003046:	69bb      	ldr	r3, [r7, #24]
	}
 8003048:	4618      	mov	r0, r3
 800304a:	3720      	adds	r7, #32
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
 800305c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d103      	bne.n	800306c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	e002      	b.n	8003072 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800307e:	2101      	movs	r1, #1
 8003080:	69b8      	ldr	r0, [r7, #24]
 8003082:	f7ff ff3f 	bl	8002f04 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003086:	bf00      	nop
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00e      	beq.n	80030ba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80030ae:	2300      	movs	r3, #0
 80030b0:	2200      	movs	r2, #0
 80030b2:	2100      	movs	r1, #0
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f81d 	bl	80030f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b086      	sub	sp, #24
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	4603      	mov	r3, r0
 80030ca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80030cc:	2301      	movs	r3, #1
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	2300      	movs	r3, #0
 80030d2:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	461a      	mov	r2, r3
 80030d8:	6939      	ldr	r1, [r7, #16]
 80030da:	6978      	ldr	r0, [r7, #20]
 80030dc:	f7ff ff7a 	bl	8002fd4 <xQueueGenericCreate>
 80030e0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f7ff ffd3 	bl	800308e <prvInitialiseMutex>

		return pxNewQueue;
 80030e8:	68fb      	ldr	r3, [r7, #12]
	}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08e      	sub	sp, #56	; 0x38
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003102:	2300      	movs	r3, #0
 8003104:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10a      	bne.n	8003126 <xQueueGenericSend+0x32>
	__asm volatile
 8003110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003122:	bf00      	nop
 8003124:	e7fe      	b.n	8003124 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d103      	bne.n	8003134 <xQueueGenericSend+0x40>
 800312c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <xQueueGenericSend+0x44>
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <xQueueGenericSend+0x46>
 8003138:	2300      	movs	r3, #0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10a      	bne.n	8003154 <xQueueGenericSend+0x60>
	__asm volatile
 800313e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003142:	f383 8811 	msr	BASEPRI, r3
 8003146:	f3bf 8f6f 	isb	sy
 800314a:	f3bf 8f4f 	dsb	sy
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003150:	bf00      	nop
 8003152:	e7fe      	b.n	8003152 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d103      	bne.n	8003162 <xQueueGenericSend+0x6e>
 800315a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <xQueueGenericSend+0x72>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <xQueueGenericSend+0x74>
 8003166:	2300      	movs	r3, #0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10a      	bne.n	8003182 <xQueueGenericSend+0x8e>
	__asm volatile
 800316c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003170:	f383 8811 	msr	BASEPRI, r3
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	623b      	str	r3, [r7, #32]
}
 800317e:	bf00      	nop
 8003180:	e7fe      	b.n	8003180 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003182:	f001 f887 	bl	8004294 <xTaskGetSchedulerState>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d102      	bne.n	8003192 <xQueueGenericSend+0x9e>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <xQueueGenericSend+0xa2>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <xQueueGenericSend+0xa4>
 8003196:	2300      	movs	r3, #0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10a      	bne.n	80031b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800319c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a0:	f383 8811 	msr	BASEPRI, r3
 80031a4:	f3bf 8f6f 	isb	sy
 80031a8:	f3bf 8f4f 	dsb	sy
 80031ac:	61fb      	str	r3, [r7, #28]
}
 80031ae:	bf00      	nop
 80031b0:	e7fe      	b.n	80031b0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031b2:	f001 fba3 	bl	80048fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031be:	429a      	cmp	r2, r3
 80031c0:	d302      	bcc.n	80031c8 <xQueueGenericSend+0xd4>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d129      	bne.n	800321c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	68b9      	ldr	r1, [r7, #8]
 80031cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031ce:	f000 f9b2 	bl	8003536 <prvCopyDataToQueue>
 80031d2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d010      	beq.n	80031fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031de:	3324      	adds	r3, #36	; 0x24
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 fe97 	bl	8003f14 <xTaskRemoveFromEventList>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d013      	beq.n	8003214 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80031ec:	4b3f      	ldr	r3, [pc, #252]	; (80032ec <xQueueGenericSend+0x1f8>)
 80031ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	e00a      	b.n	8003214 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80031fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003200:	2b00      	cmp	r3, #0
 8003202:	d007      	beq.n	8003214 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003204:	4b39      	ldr	r3, [pc, #228]	; (80032ec <xQueueGenericSend+0x1f8>)
 8003206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003214:	f001 fba2 	bl	800495c <vPortExitCritical>
				return pdPASS;
 8003218:	2301      	movs	r3, #1
 800321a:	e063      	b.n	80032e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d103      	bne.n	800322a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003222:	f001 fb9b 	bl	800495c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003226:	2300      	movs	r3, #0
 8003228:	e05c      	b.n	80032e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800322a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322c:	2b00      	cmp	r3, #0
 800322e:	d106      	bne.n	800323e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003230:	f107 0314 	add.w	r3, r7, #20
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fecf 	bl	8003fd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800323a:	2301      	movs	r3, #1
 800323c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800323e:	f001 fb8d 	bl	800495c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003242:	f000 fc81 	bl	8003b48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003246:	f001 fb59 	bl	80048fc <vPortEnterCritical>
 800324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003250:	b25b      	sxtb	r3, r3
 8003252:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003256:	d103      	bne.n	8003260 <xQueueGenericSend+0x16c>
 8003258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003262:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003266:	b25b      	sxtb	r3, r3
 8003268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800326c:	d103      	bne.n	8003276 <xQueueGenericSend+0x182>
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003276:	f001 fb71 	bl	800495c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800327a:	1d3a      	adds	r2, r7, #4
 800327c:	f107 0314 	add.w	r3, r7, #20
 8003280:	4611      	mov	r1, r2
 8003282:	4618      	mov	r0, r3
 8003284:	f000 febe 	bl	8004004 <xTaskCheckForTimeOut>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d124      	bne.n	80032d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800328e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003290:	f000 fa23 	bl	80036da <prvIsQueueFull>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d018      	beq.n	80032cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329c:	3310      	adds	r3, #16
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	4611      	mov	r1, r2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fe12 	bl	8003ecc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80032a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032aa:	f000 f9ae 	bl	800360a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80032ae:	f000 fc59 	bl	8003b64 <xTaskResumeAll>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f47f af7c 	bne.w	80031b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80032ba:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <xQueueGenericSend+0x1f8>)
 80032bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	e772      	b.n	80031b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80032cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032ce:	f000 f99c 	bl	800360a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032d2:	f000 fc47 	bl	8003b64 <xTaskResumeAll>
 80032d6:	e76c      	b.n	80031b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80032d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032da:	f000 f996 	bl	800360a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032de:	f000 fc41 	bl	8003b64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80032e2:	2300      	movs	r3, #0
		}
	}
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3738      	adds	r7, #56	; 0x38
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	e000ed04 	.word	0xe000ed04

080032f0 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08e      	sub	sp, #56	; 0x38
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80032fa:	2300      	movs	r3, #0
 80032fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003302:	2300      	movs	r3, #0
 8003304:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10a      	bne.n	8003322 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800330c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	623b      	str	r3, [r7, #32]
}
 800331e:	bf00      	nop
 8003320:	e7fe      	b.n	8003320 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800332a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332e:	f383 8811 	msr	BASEPRI, r3
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	61fb      	str	r3, [r7, #28]
}
 800333c:	bf00      	nop
 800333e:	e7fe      	b.n	800333e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003340:	f000 ffa8 	bl	8004294 <xTaskGetSchedulerState>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d102      	bne.n	8003350 <xQueueSemaphoreTake+0x60>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <xQueueSemaphoreTake+0x64>
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <xQueueSemaphoreTake+0x66>
 8003354:	2300      	movs	r3, #0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10a      	bne.n	8003370 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800335a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	61bb      	str	r3, [r7, #24]
}
 800336c:	bf00      	nop
 800336e:	e7fe      	b.n	800336e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003370:	f001 fac4 	bl	80048fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003378:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800337a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337c:	2b00      	cmp	r3, #0
 800337e:	d024      	beq.n	80033ca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003382:	1e5a      	subs	r2, r3, #1
 8003384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003386:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d104      	bne.n	800339a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003390:	f001 f94a 	bl	8004628 <pvTaskIncrementMutexHeldCount>
 8003394:	4602      	mov	r2, r0
 8003396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003398:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00f      	beq.n	80033c2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a4:	3310      	adds	r3, #16
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fdb4 	bl	8003f14 <xTaskRemoveFromEventList>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d007      	beq.n	80033c2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033b2:	4b54      	ldr	r3, [pc, #336]	; (8003504 <xQueueSemaphoreTake+0x214>)
 80033b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033c2:	f001 facb 	bl	800495c <vPortExitCritical>
				return pdPASS;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e097      	b.n	80034fa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d111      	bne.n	80033f4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80033d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80033d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033da:	f383 8811 	msr	BASEPRI, r3
 80033de:	f3bf 8f6f 	isb	sy
 80033e2:	f3bf 8f4f 	dsb	sy
 80033e6:	617b      	str	r3, [r7, #20]
}
 80033e8:	bf00      	nop
 80033ea:	e7fe      	b.n	80033ea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80033ec:	f001 fab6 	bl	800495c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033f0:	2300      	movs	r3, #0
 80033f2:	e082      	b.n	80034fa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d106      	bne.n	8003408 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033fa:	f107 030c 	add.w	r3, r7, #12
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fdea 	bl	8003fd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003404:	2301      	movs	r3, #1
 8003406:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003408:	f001 faa8 	bl	800495c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800340c:	f000 fb9c 	bl	8003b48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003410:	f001 fa74 	bl	80048fc <vPortEnterCritical>
 8003414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003416:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800341a:	b25b      	sxtb	r3, r3
 800341c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003420:	d103      	bne.n	800342a <xQueueSemaphoreTake+0x13a>
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003430:	b25b      	sxtb	r3, r3
 8003432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003436:	d103      	bne.n	8003440 <xQueueSemaphoreTake+0x150>
 8003438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003440:	f001 fa8c 	bl	800495c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003444:	463a      	mov	r2, r7
 8003446:	f107 030c 	add.w	r3, r7, #12
 800344a:	4611      	mov	r1, r2
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fdd9 	bl	8004004 <xTaskCheckForTimeOut>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d132      	bne.n	80034be <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003458:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800345a:	f000 f928 	bl	80036ae <prvIsQueueEmpty>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d026      	beq.n	80034b2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d109      	bne.n	8003480 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800346c:	f001 fa46 	bl	80048fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4618      	mov	r0, r3
 8003476:	f000 ff2b 	bl	80042d0 <xTaskPriorityInherit>
 800347a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800347c:	f001 fa6e 	bl	800495c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003482:	3324      	adds	r3, #36	; 0x24
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	4611      	mov	r1, r2
 8003488:	4618      	mov	r0, r3
 800348a:	f000 fd1f 	bl	8003ecc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800348e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003490:	f000 f8bb 	bl	800360a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003494:	f000 fb66 	bl	8003b64 <xTaskResumeAll>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	f47f af68 	bne.w	8003370 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80034a0:	4b18      	ldr	r3, [pc, #96]	; (8003504 <xQueueSemaphoreTake+0x214>)
 80034a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	e75e      	b.n	8003370 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80034b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034b4:	f000 f8a9 	bl	800360a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034b8:	f000 fb54 	bl	8003b64 <xTaskResumeAll>
 80034bc:	e758      	b.n	8003370 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80034be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034c0:	f000 f8a3 	bl	800360a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034c4:	f000 fb4e 	bl	8003b64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034ca:	f000 f8f0 	bl	80036ae <prvIsQueueEmpty>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f43f af4d 	beq.w	8003370 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00d      	beq.n	80034f8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80034dc:	f001 fa0e 	bl	80048fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80034e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034e2:	f000 f811 	bl	8003508 <prvGetDisinheritPriorityAfterTimeout>
 80034e6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80034e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fffa 	bl	80044e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80034f4:	f001 fa32 	bl	800495c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3738      	adds	r7, #56	; 0x38
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	e000ed04 	.word	0xe000ed04

08003508 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	2b00      	cmp	r3, #0
 8003516:	d006      	beq.n	8003526 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f1c3 0307 	rsb	r3, r3, #7
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	e001      	b.n	800352a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800352a:	68fb      	ldr	r3, [r7, #12]
	}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	bc80      	pop	{r7}
 8003534:	4770      	bx	lr

08003536 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b086      	sub	sp, #24
 800353a:	af00      	add	r7, sp, #0
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10d      	bne.n	8003570 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d14d      	bne.n	80035f8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	4618      	mov	r0, r3
 8003562:	f000 ff3b 	bl	80043dc <xTaskPriorityDisinherit>
 8003566:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	605a      	str	r2, [r3, #4]
 800356e:	e043      	b.n	80035f8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d119      	bne.n	80035aa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6898      	ldr	r0, [r3, #8]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	461a      	mov	r2, r3
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	f001 fc7f 	bl	8004e84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	441a      	add	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	429a      	cmp	r2, r3
 800359e:	d32b      	bcc.n	80035f8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	e026      	b.n	80035f8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	68d8      	ldr	r0, [r3, #12]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	461a      	mov	r2, r3
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	f001 fc65 	bl	8004e84 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	425b      	negs	r3, r3
 80035c4:	441a      	add	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d207      	bcs.n	80035e6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	425b      	negs	r3, r3
 80035e0:	441a      	add	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d105      	bne.n	80035f8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	3b01      	subs	r3, #1
 80035f6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003600:	697b      	ldr	r3, [r7, #20]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003612:	f001 f973 	bl	80048fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800361c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800361e:	e011      	b.n	8003644 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	2b00      	cmp	r3, #0
 8003626:	d012      	beq.n	800364e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3324      	adds	r3, #36	; 0x24
 800362c:	4618      	mov	r0, r3
 800362e:	f000 fc71 	bl	8003f14 <xTaskRemoveFromEventList>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003638:	f000 fd46 	bl	80040c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800363c:	7bfb      	ldrb	r3, [r7, #15]
 800363e:	3b01      	subs	r3, #1
 8003640:	b2db      	uxtb	r3, r3
 8003642:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003648:	2b00      	cmp	r3, #0
 800364a:	dce9      	bgt.n	8003620 <prvUnlockQueue+0x16>
 800364c:	e000      	b.n	8003650 <prvUnlockQueue+0x46>
					break;
 800364e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	22ff      	movs	r2, #255	; 0xff
 8003654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003658:	f001 f980 	bl	800495c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800365c:	f001 f94e 	bl	80048fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003666:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003668:	e011      	b.n	800368e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d012      	beq.n	8003698 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3310      	adds	r3, #16
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fc4c 	bl	8003f14 <xTaskRemoveFromEventList>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003682:	f000 fd21 	bl	80040c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003686:	7bbb      	ldrb	r3, [r7, #14]
 8003688:	3b01      	subs	r3, #1
 800368a:	b2db      	uxtb	r3, r3
 800368c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800368e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003692:	2b00      	cmp	r3, #0
 8003694:	dce9      	bgt.n	800366a <prvUnlockQueue+0x60>
 8003696:	e000      	b.n	800369a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003698:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	22ff      	movs	r2, #255	; 0xff
 800369e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80036a2:	f001 f95b 	bl	800495c <vPortExitCritical>
}
 80036a6:	bf00      	nop
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b084      	sub	sp, #16
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036b6:	f001 f921 	bl	80048fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d102      	bne.n	80036c8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80036c2:	2301      	movs	r3, #1
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	e001      	b.n	80036cc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036cc:	f001 f946 	bl	800495c <vPortExitCritical>

	return xReturn;
 80036d0:	68fb      	ldr	r3, [r7, #12]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b084      	sub	sp, #16
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036e2:	f001 f90b 	bl	80048fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d102      	bne.n	80036f8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80036f2:	2301      	movs	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	e001      	b.n	80036fc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036fc:	f001 f92e 	bl	800495c <vPortExitCritical>

	return xReturn;
 8003700:	68fb      	ldr	r3, [r7, #12]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800370a:	b580      	push	{r7, lr}
 800370c:	b08e      	sub	sp, #56	; 0x38
 800370e:	af04      	add	r7, sp, #16
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	607a      	str	r2, [r7, #4]
 8003716:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10a      	bne.n	8003734 <xTaskCreateStatic+0x2a>
	__asm volatile
 800371e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003722:	f383 8811 	msr	BASEPRI, r3
 8003726:	f3bf 8f6f 	isb	sy
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	623b      	str	r3, [r7, #32]
}
 8003730:	bf00      	nop
 8003732:	e7fe      	b.n	8003732 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10a      	bne.n	8003750 <xTaskCreateStatic+0x46>
	__asm volatile
 800373a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373e:	f383 8811 	msr	BASEPRI, r3
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	61fb      	str	r3, [r7, #28]
}
 800374c:	bf00      	nop
 800374e:	e7fe      	b.n	800374e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003750:	2354      	movs	r3, #84	; 0x54
 8003752:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	2b54      	cmp	r3, #84	; 0x54
 8003758:	d00a      	beq.n	8003770 <xTaskCreateStatic+0x66>
	__asm volatile
 800375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	61bb      	str	r3, [r7, #24]
}
 800376c:	bf00      	nop
 800376e:	e7fe      	b.n	800376e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003772:	2b00      	cmp	r3, #0
 8003774:	d01e      	beq.n	80037b4 <xTaskCreateStatic+0xaa>
 8003776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01b      	beq.n	80037b4 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800377c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003784:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	2202      	movs	r2, #2
 800378a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800378e:	2300      	movs	r3, #0
 8003790:	9303      	str	r3, [sp, #12]
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	9302      	str	r3, [sp, #8]
 8003796:	f107 0314 	add.w	r3, r7, #20
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f850 	bl	800384c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037ae:	f000 f8cd 	bl	800394c <prvAddNewTaskToReadyList>
 80037b2:	e001      	b.n	80037b8 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80037b8:	697b      	ldr	r3, [r7, #20]
	}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3728      	adds	r7, #40	; 0x28
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b08c      	sub	sp, #48	; 0x30
 80037c6:	af04      	add	r7, sp, #16
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	603b      	str	r3, [r7, #0]
 80037ce:	4613      	mov	r3, r2
 80037d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f001 f952 	bl	8004a80 <pvPortMalloc>
 80037dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00e      	beq.n	8003802 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80037e4:	2054      	movs	r0, #84	; 0x54
 80037e6:	f001 f94b 	bl	8004a80 <pvPortMalloc>
 80037ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30
 80037f8:	e005      	b.n	8003806 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80037fa:	6978      	ldr	r0, [r7, #20]
 80037fc:	f001 fa04 	bl	8004c08 <vPortFree>
 8003800:	e001      	b.n	8003806 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003802:	2300      	movs	r3, #0
 8003804:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d017      	beq.n	800383c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003814:	88fa      	ldrh	r2, [r7, #6]
 8003816:	2300      	movs	r3, #0
 8003818:	9303      	str	r3, [sp, #12]
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	9302      	str	r3, [sp, #8]
 800381e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003820:	9301      	str	r3, [sp, #4]
 8003822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68b9      	ldr	r1, [r7, #8]
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f80e 	bl	800384c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003830:	69f8      	ldr	r0, [r7, #28]
 8003832:	f000 f88b 	bl	800394c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003836:	2301      	movs	r3, #1
 8003838:	61bb      	str	r3, [r7, #24]
 800383a:	e002      	b.n	8003842 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800383c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003840:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003842:	69bb      	ldr	r3, [r7, #24]
	}
 8003844:	4618      	mov	r0, r3
 8003846:	3720      	adds	r7, #32
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003864:	3b01      	subs	r3, #1
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	f023 0307 	bic.w	r3, r3, #7
 8003872:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <prvInitialiseNewTask+0x48>
	__asm volatile
 800387e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003882:	f383 8811 	msr	BASEPRI, r3
 8003886:	f3bf 8f6f 	isb	sy
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	617b      	str	r3, [r7, #20]
}
 8003890:	bf00      	nop
 8003892:	e7fe      	b.n	8003892 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003894:	2300      	movs	r3, #0
 8003896:	61fb      	str	r3, [r7, #28]
 8003898:	e012      	b.n	80038c0 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	4413      	add	r3, r2
 80038a0:	7819      	ldrb	r1, [r3, #0]
 80038a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	4413      	add	r3, r2
 80038a8:	3334      	adds	r3, #52	; 0x34
 80038aa:	460a      	mov	r2, r1
 80038ac:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	4413      	add	r3, r2
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d006      	beq.n	80038c8 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3301      	adds	r3, #1
 80038be:	61fb      	str	r3, [r7, #28]
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	2b0f      	cmp	r3, #15
 80038c4:	d9e9      	bls.n	800389a <prvInitialiseNewTask+0x4e>
 80038c6:	e000      	b.n	80038ca <prvInitialiseNewTask+0x7e>
		{
			break;
 80038c8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	2b06      	cmp	r3, #6
 80038d6:	d901      	bls.n	80038dc <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038d8:	2306      	movs	r3, #6
 80038da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80038dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80038e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038e6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80038e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ea:	2200      	movs	r2, #0
 80038ec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f0:	3304      	adds	r3, #4
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff fa75 	bl	8002de2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fa:	3318      	adds	r3, #24
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fa70 	bl	8002de2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003906:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390a:	f1c3 0207 	rsb	r2, r3, #7
 800390e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003910:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003916:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	2200      	movs	r2, #0
 800391c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	68f9      	ldr	r1, [r7, #12]
 800392a:	69b8      	ldr	r0, [r7, #24]
 800392c:	f000 fef6 	bl	800471c <pxPortInitialiseStack>
 8003930:	4602      	mov	r2, r0
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003940:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003942:	bf00      	nop
 8003944:	3720      	adds	r7, #32
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003954:	f000 ffd2 	bl	80048fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003958:	4b2a      	ldr	r3, [pc, #168]	; (8003a04 <prvAddNewTaskToReadyList+0xb8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3301      	adds	r3, #1
 800395e:	4a29      	ldr	r2, [pc, #164]	; (8003a04 <prvAddNewTaskToReadyList+0xb8>)
 8003960:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003962:	4b29      	ldr	r3, [pc, #164]	; (8003a08 <prvAddNewTaskToReadyList+0xbc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800396a:	4a27      	ldr	r2, [pc, #156]	; (8003a08 <prvAddNewTaskToReadyList+0xbc>)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003970:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <prvAddNewTaskToReadyList+0xb8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d110      	bne.n	800399a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003978:	f000 fbca 	bl	8004110 <prvInitialiseTaskLists>
 800397c:	e00d      	b.n	800399a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800397e:	4b23      	ldr	r3, [pc, #140]	; (8003a0c <prvAddNewTaskToReadyList+0xc0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d109      	bne.n	800399a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003986:	4b20      	ldr	r3, [pc, #128]	; (8003a08 <prvAddNewTaskToReadyList+0xbc>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	429a      	cmp	r2, r3
 8003992:	d802      	bhi.n	800399a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003994:	4a1c      	ldr	r2, [pc, #112]	; (8003a08 <prvAddNewTaskToReadyList+0xbc>)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800399a:	4b1d      	ldr	r3, [pc, #116]	; (8003a10 <prvAddNewTaskToReadyList+0xc4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3301      	adds	r3, #1
 80039a0:	4a1b      	ldr	r2, [pc, #108]	; (8003a10 <prvAddNewTaskToReadyList+0xc4>)
 80039a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	2201      	movs	r2, #1
 80039aa:	409a      	lsls	r2, r3
 80039ac:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <prvAddNewTaskToReadyList+0xc8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	4a18      	ldr	r2, [pc, #96]	; (8003a14 <prvAddNewTaskToReadyList+0xc8>)
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4a15      	ldr	r2, [pc, #84]	; (8003a18 <prvAddNewTaskToReadyList+0xcc>)
 80039c4:	441a      	add	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3304      	adds	r3, #4
 80039ca:	4619      	mov	r1, r3
 80039cc:	4610      	mov	r0, r2
 80039ce:	f7ff fa14 	bl	8002dfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80039d2:	f000 ffc3 	bl	800495c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80039d6:	4b0d      	ldr	r3, [pc, #52]	; (8003a0c <prvAddNewTaskToReadyList+0xc0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00e      	beq.n	80039fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80039de:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <prvAddNewTaskToReadyList+0xbc>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d207      	bcs.n	80039fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80039ec:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <prvAddNewTaskToReadyList+0xd0>)
 80039ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039fc:	bf00      	nop
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20000448 	.word	0x20000448
 8003a08:	20000348 	.word	0x20000348
 8003a0c:	20000454 	.word	0x20000454
 8003a10:	20000464 	.word	0x20000464
 8003a14:	20000450 	.word	0x20000450
 8003a18:	2000034c 	.word	0x2000034c
 8003a1c:	e000ed04 	.word	0xe000ed04

08003a20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d017      	beq.n	8003a62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a32:	4b13      	ldr	r3, [pc, #76]	; (8003a80 <vTaskDelay+0x60>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <vTaskDelay+0x30>
	__asm volatile
 8003a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3e:	f383 8811 	msr	BASEPRI, r3
 8003a42:	f3bf 8f6f 	isb	sy
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	60bb      	str	r3, [r7, #8]
}
 8003a4c:	bf00      	nop
 8003a4e:	e7fe      	b.n	8003a4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a50:	f000 f87a 	bl	8003b48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a54:	2100      	movs	r1, #0
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fdfa 	bl	8004650 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a5c:	f000 f882 	bl	8003b64 <xTaskResumeAll>
 8003a60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d107      	bne.n	8003a78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <vTaskDelay+0x64>)
 8003a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20000470 	.word	0x20000470
 8003a84:	e000ed04 	.word	0xe000ed04

08003a88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08a      	sub	sp, #40	; 0x28
 8003a8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a96:	463a      	mov	r2, r7
 8003a98:	1d39      	adds	r1, r7, #4
 8003a9a:	f107 0308 	add.w	r3, r7, #8
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fd f9e2 	bl	8000e68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003aa4:	6839      	ldr	r1, [r7, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	9202      	str	r2, [sp, #8]
 8003aac:	9301      	str	r3, [sp, #4]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	460a      	mov	r2, r1
 8003ab6:	491e      	ldr	r1, [pc, #120]	; (8003b30 <vTaskStartScheduler+0xa8>)
 8003ab8:	481e      	ldr	r0, [pc, #120]	; (8003b34 <vTaskStartScheduler+0xac>)
 8003aba:	f7ff fe26 	bl	800370a <xTaskCreateStatic>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	4a1d      	ldr	r2, [pc, #116]	; (8003b38 <vTaskStartScheduler+0xb0>)
 8003ac2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ac4:	4b1c      	ldr	r3, [pc, #112]	; (8003b38 <vTaskStartScheduler+0xb0>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003acc:	2301      	movs	r3, #1
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	e001      	b.n	8003ad6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d116      	bne.n	8003b0a <vTaskStartScheduler+0x82>
	__asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	613b      	str	r3, [r7, #16]
}
 8003aee:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003af0:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <vTaskStartScheduler+0xb4>)
 8003af2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003af6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003af8:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <vTaskStartScheduler+0xb8>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003afe:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <vTaskStartScheduler+0xbc>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b04:	f000 fe88 	bl	8004818 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b08:	e00e      	b.n	8003b28 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b10:	d10a      	bne.n	8003b28 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	60fb      	str	r3, [r7, #12]
}
 8003b24:	bf00      	nop
 8003b26:	e7fe      	b.n	8003b26 <vTaskStartScheduler+0x9e>
}
 8003b28:	bf00      	nop
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	08005e48 	.word	0x08005e48
 8003b34:	080040e1 	.word	0x080040e1
 8003b38:	2000046c 	.word	0x2000046c
 8003b3c:	20000468 	.word	0x20000468
 8003b40:	20000454 	.word	0x20000454
 8003b44:	2000044c 	.word	0x2000044c

08003b48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003b4c:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <vTaskSuspendAll+0x18>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3301      	adds	r3, #1
 8003b52:	4a03      	ldr	r2, [pc, #12]	; (8003b60 <vTaskSuspendAll+0x18>)
 8003b54:	6013      	str	r3, [r2, #0]
}
 8003b56:	bf00      	nop
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20000470 	.word	0x20000470

08003b64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b72:	4b41      	ldr	r3, [pc, #260]	; (8003c78 <xTaskResumeAll+0x114>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10a      	bne.n	8003b90 <xTaskResumeAll+0x2c>
	__asm volatile
 8003b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	603b      	str	r3, [r7, #0]
}
 8003b8c:	bf00      	nop
 8003b8e:	e7fe      	b.n	8003b8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b90:	f000 feb4 	bl	80048fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b94:	4b38      	ldr	r3, [pc, #224]	; (8003c78 <xTaskResumeAll+0x114>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	4a37      	ldr	r2, [pc, #220]	; (8003c78 <xTaskResumeAll+0x114>)
 8003b9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b9e:	4b36      	ldr	r3, [pc, #216]	; (8003c78 <xTaskResumeAll+0x114>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d161      	bne.n	8003c6a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ba6:	4b35      	ldr	r3, [pc, #212]	; (8003c7c <xTaskResumeAll+0x118>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d05d      	beq.n	8003c6a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bae:	e02e      	b.n	8003c0e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003bb0:	4b33      	ldr	r3, [pc, #204]	; (8003c80 <xTaskResumeAll+0x11c>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	3318      	adds	r3, #24
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff f977 	bl	8002eb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff f972 	bl	8002eb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	409a      	lsls	r2, r3
 8003bd4:	4b2b      	ldr	r3, [pc, #172]	; (8003c84 <xTaskResumeAll+0x120>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	4a2a      	ldr	r2, [pc, #168]	; (8003c84 <xTaskResumeAll+0x120>)
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4a27      	ldr	r2, [pc, #156]	; (8003c88 <xTaskResumeAll+0x124>)
 8003bec:	441a      	add	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	f7ff f900 	bl	8002dfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfe:	4b23      	ldr	r3, [pc, #140]	; (8003c8c <xTaskResumeAll+0x128>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d302      	bcc.n	8003c0e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003c08:	4b21      	ldr	r3, [pc, #132]	; (8003c90 <xTaskResumeAll+0x12c>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c0e:	4b1c      	ldr	r3, [pc, #112]	; (8003c80 <xTaskResumeAll+0x11c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1cc      	bne.n	8003bb0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c1c:	f000 fb16 	bl	800424c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003c20:	4b1c      	ldr	r3, [pc, #112]	; (8003c94 <xTaskResumeAll+0x130>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d010      	beq.n	8003c4e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c2c:	f000 f836 	bl	8003c9c <xTaskIncrementTick>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003c36:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <xTaskResumeAll+0x12c>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1f1      	bne.n	8003c2c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003c48:	4b12      	ldr	r3, [pc, #72]	; (8003c94 <xTaskResumeAll+0x130>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c4e:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <xTaskResumeAll+0x12c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c56:	2301      	movs	r3, #1
 8003c58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c5a:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <xTaskResumeAll+0x134>)
 8003c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c6a:	f000 fe77 	bl	800495c <vPortExitCritical>

	return xAlreadyYielded;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20000470 	.word	0x20000470
 8003c7c:	20000448 	.word	0x20000448
 8003c80:	20000408 	.word	0x20000408
 8003c84:	20000450 	.word	0x20000450
 8003c88:	2000034c 	.word	0x2000034c
 8003c8c:	20000348 	.word	0x20000348
 8003c90:	2000045c 	.word	0x2000045c
 8003c94:	20000458 	.word	0x20000458
 8003c98:	e000ed04 	.word	0xe000ed04

08003c9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ca6:	4b51      	ldr	r3, [pc, #324]	; (8003dec <xTaskIncrementTick+0x150>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f040 808d 	bne.w	8003dca <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003cb0:	4b4f      	ldr	r3, [pc, #316]	; (8003df0 <xTaskIncrementTick+0x154>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003cb8:	4a4d      	ldr	r2, [pc, #308]	; (8003df0 <xTaskIncrementTick+0x154>)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d120      	bne.n	8003d06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003cc4:	4b4b      	ldr	r3, [pc, #300]	; (8003df4 <xTaskIncrementTick+0x158>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <xTaskIncrementTick+0x48>
	__asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	603b      	str	r3, [r7, #0]
}
 8003ce0:	bf00      	nop
 8003ce2:	e7fe      	b.n	8003ce2 <xTaskIncrementTick+0x46>
 8003ce4:	4b43      	ldr	r3, [pc, #268]	; (8003df4 <xTaskIncrementTick+0x158>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	4b43      	ldr	r3, [pc, #268]	; (8003df8 <xTaskIncrementTick+0x15c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a41      	ldr	r2, [pc, #260]	; (8003df4 <xTaskIncrementTick+0x158>)
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	4a41      	ldr	r2, [pc, #260]	; (8003df8 <xTaskIncrementTick+0x15c>)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	4b40      	ldr	r3, [pc, #256]	; (8003dfc <xTaskIncrementTick+0x160>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	4a3f      	ldr	r2, [pc, #252]	; (8003dfc <xTaskIncrementTick+0x160>)
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	f000 faa3 	bl	800424c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d06:	4b3e      	ldr	r3, [pc, #248]	; (8003e00 <xTaskIncrementTick+0x164>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d34d      	bcc.n	8003dac <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d10:	4b38      	ldr	r3, [pc, #224]	; (8003df4 <xTaskIncrementTick+0x158>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <xTaskIncrementTick+0x82>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <xTaskIncrementTick+0x84>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d004      	beq.n	8003d2e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d24:	4b36      	ldr	r3, [pc, #216]	; (8003e00 <xTaskIncrementTick+0x164>)
 8003d26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d2a:	601a      	str	r2, [r3, #0]
					break;
 8003d2c:	e03e      	b.n	8003dac <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d2e:	4b31      	ldr	r3, [pc, #196]	; (8003df4 <xTaskIncrementTick+0x158>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d203      	bcs.n	8003d4e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d46:	4a2e      	ldr	r2, [pc, #184]	; (8003e00 <xTaskIncrementTick+0x164>)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6013      	str	r3, [r2, #0]
						break;
 8003d4c:	e02e      	b.n	8003dac <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	3304      	adds	r3, #4
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff f8ac 	bl	8002eb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d004      	beq.n	8003d6a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	3318      	adds	r3, #24
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff f8a3 	bl	8002eb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6e:	2201      	movs	r2, #1
 8003d70:	409a      	lsls	r2, r3
 8003d72:	4b24      	ldr	r3, [pc, #144]	; (8003e04 <xTaskIncrementTick+0x168>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	4a22      	ldr	r2, [pc, #136]	; (8003e04 <xTaskIncrementTick+0x168>)
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d80:	4613      	mov	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4a1f      	ldr	r2, [pc, #124]	; (8003e08 <xTaskIncrementTick+0x16c>)
 8003d8a:	441a      	add	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	4619      	mov	r1, r3
 8003d92:	4610      	mov	r0, r2
 8003d94:	f7ff f831 	bl	8002dfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9c:	4b1b      	ldr	r3, [pc, #108]	; (8003e0c <xTaskIncrementTick+0x170>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d3b4      	bcc.n	8003d10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003da6:	2301      	movs	r3, #1
 8003da8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003daa:	e7b1      	b.n	8003d10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003dac:	4b17      	ldr	r3, [pc, #92]	; (8003e0c <xTaskIncrementTick+0x170>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db2:	4915      	ldr	r1, [pc, #84]	; (8003e08 <xTaskIncrementTick+0x16c>)
 8003db4:	4613      	mov	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d907      	bls.n	8003dd4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	e004      	b.n	8003dd4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003dca:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <xTaskIncrementTick+0x174>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	4a0f      	ldr	r2, [pc, #60]	; (8003e10 <xTaskIncrementTick+0x174>)
 8003dd2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003dd4:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <xTaskIncrementTick+0x178>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003de0:	697b      	ldr	r3, [r7, #20]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20000470 	.word	0x20000470
 8003df0:	2000044c 	.word	0x2000044c
 8003df4:	20000400 	.word	0x20000400
 8003df8:	20000404 	.word	0x20000404
 8003dfc:	20000460 	.word	0x20000460
 8003e00:	20000468 	.word	0x20000468
 8003e04:	20000450 	.word	0x20000450
 8003e08:	2000034c 	.word	0x2000034c
 8003e0c:	20000348 	.word	0x20000348
 8003e10:	20000458 	.word	0x20000458
 8003e14:	2000045c 	.word	0x2000045c

08003e18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e1e:	4b26      	ldr	r3, [pc, #152]	; (8003eb8 <vTaskSwitchContext+0xa0>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e26:	4b25      	ldr	r3, [pc, #148]	; (8003ebc <vTaskSwitchContext+0xa4>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e2c:	e03f      	b.n	8003eae <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003e2e:	4b23      	ldr	r3, [pc, #140]	; (8003ebc <vTaskSwitchContext+0xa4>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003e34:	4b22      	ldr	r3, [pc, #136]	; (8003ec0 <vTaskSwitchContext+0xa8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	fab3 f383 	clz	r3, r3
 8003e40:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003e42:	7afb      	ldrb	r3, [r7, #11]
 8003e44:	f1c3 031f 	rsb	r3, r3, #31
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	491e      	ldr	r1, [pc, #120]	; (8003ec4 <vTaskSwitchContext+0xac>)
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10a      	bne.n	8003e74 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	607b      	str	r3, [r7, #4]
}
 8003e70:	bf00      	nop
 8003e72:	e7fe      	b.n	8003e72 <vTaskSwitchContext+0x5a>
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	4613      	mov	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4413      	add	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4a11      	ldr	r2, [pc, #68]	; (8003ec4 <vTaskSwitchContext+0xac>)
 8003e80:	4413      	add	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	605a      	str	r2, [r3, #4]
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	3308      	adds	r3, #8
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d104      	bne.n	8003ea4 <vTaskSwitchContext+0x8c>
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	605a      	str	r2, [r3, #4]
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	4a07      	ldr	r2, [pc, #28]	; (8003ec8 <vTaskSwitchContext+0xb0>)
 8003eac:	6013      	str	r3, [r2, #0]
}
 8003eae:	bf00      	nop
 8003eb0:	371c      	adds	r7, #28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr
 8003eb8:	20000470 	.word	0x20000470
 8003ebc:	2000045c 	.word	0x2000045c
 8003ec0:	20000450 	.word	0x20000450
 8003ec4:	2000034c 	.word	0x2000034c
 8003ec8:	20000348 	.word	0x20000348

08003ecc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10a      	bne.n	8003ef2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	60fb      	str	r3, [r7, #12]
}
 8003eee:	bf00      	nop
 8003ef0:	e7fe      	b.n	8003ef0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ef2:	4b07      	ldr	r3, [pc, #28]	; (8003f10 <vTaskPlaceOnEventList+0x44>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3318      	adds	r3, #24
 8003ef8:	4619      	mov	r1, r3
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7fe ffa0 	bl	8002e40 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f00:	2101      	movs	r1, #1
 8003f02:	6838      	ldr	r0, [r7, #0]
 8003f04:	f000 fba4 	bl	8004650 <prvAddCurrentTaskToDelayedList>
}
 8003f08:	bf00      	nop
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20000348 	.word	0x20000348

08003f14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10a      	bne.n	8003f40 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2e:	f383 8811 	msr	BASEPRI, r3
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	60fb      	str	r3, [r7, #12]
}
 8003f3c:	bf00      	nop
 8003f3e:	e7fe      	b.n	8003f3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	3318      	adds	r3, #24
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fe ffb3 	bl	8002eb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f4a:	4b1d      	ldr	r3, [pc, #116]	; (8003fc0 <xTaskRemoveFromEventList+0xac>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d11c      	bne.n	8003f8c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	3304      	adds	r3, #4
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fe ffaa 	bl	8002eb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	2201      	movs	r2, #1
 8003f62:	409a      	lsls	r2, r3
 8003f64:	4b17      	ldr	r3, [pc, #92]	; (8003fc4 <xTaskRemoveFromEventList+0xb0>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	4a16      	ldr	r2, [pc, #88]	; (8003fc4 <xTaskRemoveFromEventList+0xb0>)
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4a13      	ldr	r2, [pc, #76]	; (8003fc8 <xTaskRemoveFromEventList+0xb4>)
 8003f7c:	441a      	add	r2, r3
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	3304      	adds	r3, #4
 8003f82:	4619      	mov	r1, r3
 8003f84:	4610      	mov	r0, r2
 8003f86:	f7fe ff38 	bl	8002dfa <vListInsertEnd>
 8003f8a:	e005      	b.n	8003f98 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	3318      	adds	r3, #24
 8003f90:	4619      	mov	r1, r3
 8003f92:	480e      	ldr	r0, [pc, #56]	; (8003fcc <xTaskRemoveFromEventList+0xb8>)
 8003f94:	f7fe ff31 	bl	8002dfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9c:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <xTaskRemoveFromEventList+0xbc>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d905      	bls.n	8003fb2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003faa:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <xTaskRemoveFromEventList+0xc0>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	e001      	b.n	8003fb6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003fb6:	697b      	ldr	r3, [r7, #20]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20000470 	.word	0x20000470
 8003fc4:	20000450 	.word	0x20000450
 8003fc8:	2000034c 	.word	0x2000034c
 8003fcc:	20000408 	.word	0x20000408
 8003fd0:	20000348 	.word	0x20000348
 8003fd4:	2000045c 	.word	0x2000045c

08003fd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003fe0:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <vTaskInternalSetTimeOutState+0x24>)
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003fe8:	4b05      	ldr	r3, [pc, #20]	; (8004000 <vTaskInternalSetTimeOutState+0x28>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	605a      	str	r2, [r3, #4]
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	20000460 	.word	0x20000460
 8004000:	2000044c 	.word	0x2000044c

08004004 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10a      	bne.n	800402a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	613b      	str	r3, [r7, #16]
}
 8004026:	bf00      	nop
 8004028:	e7fe      	b.n	8004028 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10a      	bne.n	8004046 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	60fb      	str	r3, [r7, #12]
}
 8004042:	bf00      	nop
 8004044:	e7fe      	b.n	8004044 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004046:	f000 fc59 	bl	80048fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800404a:	4b1d      	ldr	r3, [pc, #116]	; (80040c0 <xTaskCheckForTimeOut+0xbc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004062:	d102      	bne.n	800406a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004064:	2300      	movs	r3, #0
 8004066:	61fb      	str	r3, [r7, #28]
 8004068:	e023      	b.n	80040b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	4b15      	ldr	r3, [pc, #84]	; (80040c4 <xTaskCheckForTimeOut+0xc0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d007      	beq.n	8004086 <xTaskCheckForTimeOut+0x82>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	429a      	cmp	r2, r3
 800407e:	d302      	bcc.n	8004086 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004080:	2301      	movs	r3, #1
 8004082:	61fb      	str	r3, [r7, #28]
 8004084:	e015      	b.n	80040b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	429a      	cmp	r2, r3
 800408e:	d20b      	bcs.n	80040a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	1ad2      	subs	r2, r2, r3
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7ff ff9b 	bl	8003fd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61fb      	str	r3, [r7, #28]
 80040a6:	e004      	b.n	80040b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80040ae:	2301      	movs	r3, #1
 80040b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80040b2:	f000 fc53 	bl	800495c <vPortExitCritical>

	return xReturn;
 80040b6:	69fb      	ldr	r3, [r7, #28]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3720      	adds	r7, #32
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	2000044c 	.word	0x2000044c
 80040c4:	20000460 	.word	0x20000460

080040c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040cc:	4b03      	ldr	r3, [pc, #12]	; (80040dc <vTaskMissedYield+0x14>)
 80040ce:	2201      	movs	r2, #1
 80040d0:	601a      	str	r2, [r3, #0]
}
 80040d2:	bf00      	nop
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bc80      	pop	{r7}
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	2000045c 	.word	0x2000045c

080040e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040e8:	f000 f852 	bl	8004190 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040ec:	4b06      	ldr	r3, [pc, #24]	; (8004108 <prvIdleTask+0x28>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d9f9      	bls.n	80040e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80040f4:	4b05      	ldr	r3, [pc, #20]	; (800410c <prvIdleTask+0x2c>)
 80040f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004104:	e7f0      	b.n	80040e8 <prvIdleTask+0x8>
 8004106:	bf00      	nop
 8004108:	2000034c 	.word	0x2000034c
 800410c:	e000ed04 	.word	0xe000ed04

08004110 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004116:	2300      	movs	r3, #0
 8004118:	607b      	str	r3, [r7, #4]
 800411a:	e00c      	b.n	8004136 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4a12      	ldr	r2, [pc, #72]	; (8004170 <prvInitialiseTaskLists+0x60>)
 8004128:	4413      	add	r3, r2
 800412a:	4618      	mov	r0, r3
 800412c:	f7fe fe3a 	bl	8002da4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3301      	adds	r3, #1
 8004134:	607b      	str	r3, [r7, #4]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b06      	cmp	r3, #6
 800413a:	d9ef      	bls.n	800411c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800413c:	480d      	ldr	r0, [pc, #52]	; (8004174 <prvInitialiseTaskLists+0x64>)
 800413e:	f7fe fe31 	bl	8002da4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004142:	480d      	ldr	r0, [pc, #52]	; (8004178 <prvInitialiseTaskLists+0x68>)
 8004144:	f7fe fe2e 	bl	8002da4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004148:	480c      	ldr	r0, [pc, #48]	; (800417c <prvInitialiseTaskLists+0x6c>)
 800414a:	f7fe fe2b 	bl	8002da4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800414e:	480c      	ldr	r0, [pc, #48]	; (8004180 <prvInitialiseTaskLists+0x70>)
 8004150:	f7fe fe28 	bl	8002da4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004154:	480b      	ldr	r0, [pc, #44]	; (8004184 <prvInitialiseTaskLists+0x74>)
 8004156:	f7fe fe25 	bl	8002da4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800415a:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <prvInitialiseTaskLists+0x78>)
 800415c:	4a05      	ldr	r2, [pc, #20]	; (8004174 <prvInitialiseTaskLists+0x64>)
 800415e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004160:	4b0a      	ldr	r3, [pc, #40]	; (800418c <prvInitialiseTaskLists+0x7c>)
 8004162:	4a05      	ldr	r2, [pc, #20]	; (8004178 <prvInitialiseTaskLists+0x68>)
 8004164:	601a      	str	r2, [r3, #0]
}
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	2000034c 	.word	0x2000034c
 8004174:	200003d8 	.word	0x200003d8
 8004178:	200003ec 	.word	0x200003ec
 800417c:	20000408 	.word	0x20000408
 8004180:	2000041c 	.word	0x2000041c
 8004184:	20000434 	.word	0x20000434
 8004188:	20000400 	.word	0x20000400
 800418c:	20000404 	.word	0x20000404

08004190 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004196:	e019      	b.n	80041cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004198:	f000 fbb0 	bl	80048fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800419c:	4b10      	ldr	r3, [pc, #64]	; (80041e0 <prvCheckTasksWaitingTermination+0x50>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fe fe81 	bl	8002eb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041ae:	4b0d      	ldr	r3, [pc, #52]	; (80041e4 <prvCheckTasksWaitingTermination+0x54>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	4a0b      	ldr	r2, [pc, #44]	; (80041e4 <prvCheckTasksWaitingTermination+0x54>)
 80041b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041b8:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <prvCheckTasksWaitingTermination+0x58>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	3b01      	subs	r3, #1
 80041be:	4a0a      	ldr	r2, [pc, #40]	; (80041e8 <prvCheckTasksWaitingTermination+0x58>)
 80041c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041c2:	f000 fbcb 	bl	800495c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f810 	bl	80041ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041cc:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <prvCheckTasksWaitingTermination+0x58>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1e1      	bne.n	8004198 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041d4:	bf00      	nop
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	2000041c 	.word	0x2000041c
 80041e4:	20000448 	.word	0x20000448
 80041e8:	20000430 	.word	0x20000430

080041ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d108      	bne.n	8004210 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fd00 	bl	8004c08 <vPortFree>
				vPortFree( pxTCB );
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fcfd 	bl	8004c08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800420e:	e018      	b.n	8004242 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004216:	2b01      	cmp	r3, #1
 8004218:	d103      	bne.n	8004222 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 fcf4 	bl	8004c08 <vPortFree>
	}
 8004220:	e00f      	b.n	8004242 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004228:	2b02      	cmp	r3, #2
 800422a:	d00a      	beq.n	8004242 <prvDeleteTCB+0x56>
	__asm volatile
 800422c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	60fb      	str	r3, [r7, #12]
}
 800423e:	bf00      	nop
 8004240:	e7fe      	b.n	8004240 <prvDeleteTCB+0x54>
	}
 8004242:	bf00      	nop
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
	...

0800424c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004252:	4b0e      	ldr	r3, [pc, #56]	; (800428c <prvResetNextTaskUnblockTime+0x40>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <prvResetNextTaskUnblockTime+0x14>
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <prvResetNextTaskUnblockTime+0x16>
 8004260:	2300      	movs	r3, #0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d004      	beq.n	8004270 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004266:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <prvResetNextTaskUnblockTime+0x44>)
 8004268:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800426c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800426e:	e008      	b.n	8004282 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004270:	4b06      	ldr	r3, [pc, #24]	; (800428c <prvResetNextTaskUnblockTime+0x40>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	4a04      	ldr	r2, [pc, #16]	; (8004290 <prvResetNextTaskUnblockTime+0x44>)
 8004280:	6013      	str	r3, [r2, #0]
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr
 800428c:	20000400 	.word	0x20000400
 8004290:	20000468 	.word	0x20000468

08004294 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800429a:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <xTaskGetSchedulerState+0x34>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d102      	bne.n	80042a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042a2:	2301      	movs	r3, #1
 80042a4:	607b      	str	r3, [r7, #4]
 80042a6:	e008      	b.n	80042ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042a8:	4b08      	ldr	r3, [pc, #32]	; (80042cc <xTaskGetSchedulerState+0x38>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d102      	bne.n	80042b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042b0:	2302      	movs	r3, #2
 80042b2:	607b      	str	r3, [r7, #4]
 80042b4:	e001      	b.n	80042ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042b6:	2300      	movs	r3, #0
 80042b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042ba:	687b      	ldr	r3, [r7, #4]
	}
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	20000454 	.word	0x20000454
 80042cc:	20000470 	.word	0x20000470

080042d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80042dc:	2300      	movs	r3, #0
 80042de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d06e      	beq.n	80043c4 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ea:	4b39      	ldr	r3, [pc, #228]	; (80043d0 <xTaskPriorityInherit+0x100>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d25e      	bcs.n	80043b2 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	db06      	blt.n	800430a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042fc:	4b34      	ldr	r3, [pc, #208]	; (80043d0 <xTaskPriorityInherit+0x100>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004302:	f1c3 0207 	rsb	r2, r3, #7
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	6959      	ldr	r1, [r3, #20]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4a2e      	ldr	r2, [pc, #184]	; (80043d4 <xTaskPriorityInherit+0x104>)
 800431c:	4413      	add	r3, r2
 800431e:	4299      	cmp	r1, r3
 8004320:	d101      	bne.n	8004326 <xTaskPriorityInherit+0x56>
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <xTaskPriorityInherit+0x58>
 8004326:	2300      	movs	r3, #0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d03a      	beq.n	80043a2 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	3304      	adds	r3, #4
 8004330:	4618      	mov	r0, r3
 8004332:	f7fe fdbd 	bl	8002eb0 <uxListRemove>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d115      	bne.n	8004368 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004340:	4924      	ldr	r1, [pc, #144]	; (80043d4 <xTaskPriorityInherit+0x104>)
 8004342:	4613      	mov	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10a      	bne.n	8004368 <xTaskPriorityInherit+0x98>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	2201      	movs	r2, #1
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	43da      	mvns	r2, r3
 800435e:	4b1e      	ldr	r3, [pc, #120]	; (80043d8 <xTaskPriorityInherit+0x108>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4013      	ands	r3, r2
 8004364:	4a1c      	ldr	r2, [pc, #112]	; (80043d8 <xTaskPriorityInherit+0x108>)
 8004366:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004368:	4b19      	ldr	r3, [pc, #100]	; (80043d0 <xTaskPriorityInherit+0x100>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	2201      	movs	r2, #1
 8004378:	409a      	lsls	r2, r3
 800437a:	4b17      	ldr	r3, [pc, #92]	; (80043d8 <xTaskPriorityInherit+0x108>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4313      	orrs	r3, r2
 8004380:	4a15      	ldr	r2, [pc, #84]	; (80043d8 <xTaskPriorityInherit+0x108>)
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4a10      	ldr	r2, [pc, #64]	; (80043d4 <xTaskPriorityInherit+0x104>)
 8004392:	441a      	add	r2, r3
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	3304      	adds	r3, #4
 8004398:	4619      	mov	r1, r3
 800439a:	4610      	mov	r0, r2
 800439c:	f7fe fd2d 	bl	8002dfa <vListInsertEnd>
 80043a0:	e004      	b.n	80043ac <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80043a2:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <xTaskPriorityInherit+0x100>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80043ac:	2301      	movs	r3, #1
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	e008      	b.n	80043c4 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043b6:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <xTaskPriorityInherit+0x100>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	429a      	cmp	r2, r3
 80043be:	d201      	bcs.n	80043c4 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80043c0:	2301      	movs	r3, #1
 80043c2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043c4:	68fb      	ldr	r3, [r7, #12]
	}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20000348 	.word	0x20000348
 80043d4:	2000034c 	.word	0x2000034c
 80043d8:	20000450 	.word	0x20000450

080043dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d06e      	beq.n	80044d0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80043f2:	4b3a      	ldr	r3, [pc, #232]	; (80044dc <xTaskPriorityDisinherit+0x100>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d00a      	beq.n	8004412 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	60fb      	str	r3, [r7, #12]
}
 800440e:	bf00      	nop
 8004410:	e7fe      	b.n	8004410 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10a      	bne.n	8004430 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	60bb      	str	r3, [r7, #8]
}
 800442c:	bf00      	nop
 800442e:	e7fe      	b.n	800442e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004434:	1e5a      	subs	r2, r3, #1
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004442:	429a      	cmp	r2, r3
 8004444:	d044      	beq.n	80044d0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800444a:	2b00      	cmp	r3, #0
 800444c:	d140      	bne.n	80044d0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	3304      	adds	r3, #4
 8004452:	4618      	mov	r0, r3
 8004454:	f7fe fd2c 	bl	8002eb0 <uxListRemove>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d115      	bne.n	800448a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004462:	491f      	ldr	r1, [pc, #124]	; (80044e0 <xTaskPriorityDisinherit+0x104>)
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10a      	bne.n	800448a <xTaskPriorityDisinherit+0xae>
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	2201      	movs	r2, #1
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	43da      	mvns	r2, r3
 8004480:	4b18      	ldr	r3, [pc, #96]	; (80044e4 <xTaskPriorityDisinherit+0x108>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4013      	ands	r3, r2
 8004486:	4a17      	ldr	r2, [pc, #92]	; (80044e4 <xTaskPriorityDisinherit+0x108>)
 8004488:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	f1c3 0207 	rsb	r2, r3, #7
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	2201      	movs	r2, #1
 80044a4:	409a      	lsls	r2, r3
 80044a6:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <xTaskPriorityDisinherit+0x108>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	4a0d      	ldr	r2, [pc, #52]	; (80044e4 <xTaskPriorityDisinherit+0x108>)
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b4:	4613      	mov	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4a08      	ldr	r2, [pc, #32]	; (80044e0 <xTaskPriorityDisinherit+0x104>)
 80044be:	441a      	add	r2, r3
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	3304      	adds	r3, #4
 80044c4:	4619      	mov	r1, r3
 80044c6:	4610      	mov	r0, r2
 80044c8:	f7fe fc97 	bl	8002dfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80044cc:	2301      	movs	r3, #1
 80044ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044d0:	697b      	ldr	r3, [r7, #20]
	}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000348 	.word	0x20000348
 80044e0:	2000034c 	.word	0x2000034c
 80044e4:	20000450 	.word	0x20000450

080044e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80044f6:	2301      	movs	r3, #1
 80044f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 8088 	beq.w	8004612 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10a      	bne.n	8004520 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	60fb      	str	r3, [r7, #12]
}
 800451c:	bf00      	nop
 800451e:	e7fe      	b.n	800451e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d902      	bls.n	8004530 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	61fb      	str	r3, [r7, #28]
 800452e:	e002      	b.n	8004536 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004534:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	429a      	cmp	r2, r3
 800453e:	d068      	beq.n	8004612 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	429a      	cmp	r2, r3
 8004548:	d163      	bne.n	8004612 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800454a:	4b34      	ldr	r3, [pc, #208]	; (800461c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	429a      	cmp	r2, r3
 8004552:	d10a      	bne.n	800456a <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	60bb      	str	r3, [r7, #8]
}
 8004566:	bf00      	nop
 8004568:	e7fe      	b.n	8004568 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	2b00      	cmp	r3, #0
 800457c:	db04      	blt.n	8004588 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	f1c3 0207 	rsb	r2, r3, #7
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	6959      	ldr	r1, [r3, #20]
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4613      	mov	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4a22      	ldr	r2, [pc, #136]	; (8004620 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004598:	4413      	add	r3, r2
 800459a:	4299      	cmp	r1, r3
 800459c:	d101      	bne.n	80045a2 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80045a2:	2300      	movs	r3, #0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d034      	beq.n	8004612 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	3304      	adds	r3, #4
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fe fc7f 	bl	8002eb0 <uxListRemove>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d115      	bne.n	80045e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045bc:	4918      	ldr	r1, [pc, #96]	; (8004620 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80045be:	4613      	mov	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10a      	bne.n	80045e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	2201      	movs	r2, #1
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	43da      	mvns	r2, r3
 80045da:	4b12      	ldr	r3, [pc, #72]	; (8004624 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4013      	ands	r3, r2
 80045e0:	4a10      	ldr	r2, [pc, #64]	; (8004624 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80045e2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	2201      	movs	r2, #1
 80045ea:	409a      	lsls	r2, r3
 80045ec:	4b0d      	ldr	r3, [pc, #52]	; (8004624 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	4a0c      	ldr	r2, [pc, #48]	; (8004624 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fa:	4613      	mov	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4a07      	ldr	r2, [pc, #28]	; (8004620 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004604:	441a      	add	r2, r3
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	3304      	adds	r3, #4
 800460a:	4619      	mov	r1, r3
 800460c:	4610      	mov	r0, r2
 800460e:	f7fe fbf4 	bl	8002dfa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004612:	bf00      	nop
 8004614:	3720      	adds	r7, #32
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000348 	.word	0x20000348
 8004620:	2000034c 	.word	0x2000034c
 8004624:	20000450 	.word	0x20000450

08004628 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800462c:	4b07      	ldr	r3, [pc, #28]	; (800464c <pvTaskIncrementMutexHeldCount+0x24>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d004      	beq.n	800463e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004634:	4b05      	ldr	r3, [pc, #20]	; (800464c <pvTaskIncrementMutexHeldCount+0x24>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800463a:	3201      	adds	r2, #1
 800463c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800463e:	4b03      	ldr	r3, [pc, #12]	; (800464c <pvTaskIncrementMutexHeldCount+0x24>)
 8004640:	681b      	ldr	r3, [r3, #0]
	}
 8004642:	4618      	mov	r0, r3
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	20000348 	.word	0x20000348

08004650 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800465a:	4b29      	ldr	r3, [pc, #164]	; (8004700 <prvAddCurrentTaskToDelayedList+0xb0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004660:	4b28      	ldr	r3, [pc, #160]	; (8004704 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3304      	adds	r3, #4
 8004666:	4618      	mov	r0, r3
 8004668:	f7fe fc22 	bl	8002eb0 <uxListRemove>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10b      	bne.n	800468a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004672:	4b24      	ldr	r3, [pc, #144]	; (8004704 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004678:	2201      	movs	r2, #1
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	43da      	mvns	r2, r3
 8004680:	4b21      	ldr	r3, [pc, #132]	; (8004708 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4013      	ands	r3, r2
 8004686:	4a20      	ldr	r2, [pc, #128]	; (8004708 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004688:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004690:	d10a      	bne.n	80046a8 <prvAddCurrentTaskToDelayedList+0x58>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d007      	beq.n	80046a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004698:	4b1a      	ldr	r3, [pc, #104]	; (8004704 <prvAddCurrentTaskToDelayedList+0xb4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3304      	adds	r3, #4
 800469e:	4619      	mov	r1, r3
 80046a0:	481a      	ldr	r0, [pc, #104]	; (800470c <prvAddCurrentTaskToDelayedList+0xbc>)
 80046a2:	f7fe fbaa 	bl	8002dfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046a6:	e026      	b.n	80046f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4413      	add	r3, r2
 80046ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046b0:	4b14      	ldr	r3, [pc, #80]	; (8004704 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d209      	bcs.n	80046d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046c0:	4b13      	ldr	r3, [pc, #76]	; (8004710 <prvAddCurrentTaskToDelayedList+0xc0>)
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	4b0f      	ldr	r3, [pc, #60]	; (8004704 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3304      	adds	r3, #4
 80046ca:	4619      	mov	r1, r3
 80046cc:	4610      	mov	r0, r2
 80046ce:	f7fe fbb7 	bl	8002e40 <vListInsert>
}
 80046d2:	e010      	b.n	80046f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046d4:	4b0f      	ldr	r3, [pc, #60]	; (8004714 <prvAddCurrentTaskToDelayedList+0xc4>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3304      	adds	r3, #4
 80046de:	4619      	mov	r1, r3
 80046e0:	4610      	mov	r0, r2
 80046e2:	f7fe fbad 	bl	8002e40 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80046e6:	4b0c      	ldr	r3, [pc, #48]	; (8004718 <prvAddCurrentTaskToDelayedList+0xc8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d202      	bcs.n	80046f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80046f0:	4a09      	ldr	r2, [pc, #36]	; (8004718 <prvAddCurrentTaskToDelayedList+0xc8>)
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	6013      	str	r3, [r2, #0]
}
 80046f6:	bf00      	nop
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	2000044c 	.word	0x2000044c
 8004704:	20000348 	.word	0x20000348
 8004708:	20000450 	.word	0x20000450
 800470c:	20000434 	.word	0x20000434
 8004710:	20000404 	.word	0x20000404
 8004714:	20000400 	.word	0x20000400
 8004718:	20000468 	.word	0x20000468

0800471c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	3b04      	subs	r3, #4
 800472c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004734:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	3b04      	subs	r3, #4
 800473a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f023 0201 	bic.w	r2, r3, #1
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	3b04      	subs	r3, #4
 800474a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800474c:	4a08      	ldr	r2, [pc, #32]	; (8004770 <pxPortInitialiseStack+0x54>)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3b14      	subs	r3, #20
 8004756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	3b20      	subs	r3, #32
 8004762:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004764:	68fb      	ldr	r3, [r7, #12]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr
 8004770:	08004775 	.word	0x08004775

08004774 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800477a:	2300      	movs	r3, #0
 800477c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800477e:	4b12      	ldr	r3, [pc, #72]	; (80047c8 <prvTaskExitError+0x54>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004786:	d00a      	beq.n	800479e <prvTaskExitError+0x2a>
	__asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	60fb      	str	r3, [r7, #12]
}
 800479a:	bf00      	nop
 800479c:	e7fe      	b.n	800479c <prvTaskExitError+0x28>
	__asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	60bb      	str	r3, [r7, #8]
}
 80047b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80047b2:	bf00      	nop
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0fc      	beq.n	80047b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80047ba:	bf00      	nop
 80047bc:	bf00      	nop
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	20000010 	.word	0x20000010
 80047cc:	00000000 	.word	0x00000000

080047d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80047d0:	4b07      	ldr	r3, [pc, #28]	; (80047f0 <pxCurrentTCBConst2>)
 80047d2:	6819      	ldr	r1, [r3, #0]
 80047d4:	6808      	ldr	r0, [r1, #0]
 80047d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80047da:	f380 8809 	msr	PSP, r0
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f04f 0000 	mov.w	r0, #0
 80047e6:	f380 8811 	msr	BASEPRI, r0
 80047ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80047ee:	4770      	bx	lr

080047f0 <pxCurrentTCBConst2>:
 80047f0:	20000348 	.word	0x20000348
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop

080047f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80047f8:	4806      	ldr	r0, [pc, #24]	; (8004814 <prvPortStartFirstTask+0x1c>)
 80047fa:	6800      	ldr	r0, [r0, #0]
 80047fc:	6800      	ldr	r0, [r0, #0]
 80047fe:	f380 8808 	msr	MSP, r0
 8004802:	b662      	cpsie	i
 8004804:	b661      	cpsie	f
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	df00      	svc	0
 8004810:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004812:	bf00      	nop
 8004814:	e000ed08 	.word	0xe000ed08

08004818 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800481e:	4b32      	ldr	r3, [pc, #200]	; (80048e8 <xPortStartScheduler+0xd0>)
 8004820:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	b2db      	uxtb	r3, r3
 8004828:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	22ff      	movs	r2, #255	; 0xff
 800482e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	b2db      	uxtb	r3, r3
 8004836:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	b2db      	uxtb	r3, r3
 800483c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004840:	b2da      	uxtb	r2, r3
 8004842:	4b2a      	ldr	r3, [pc, #168]	; (80048ec <xPortStartScheduler+0xd4>)
 8004844:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004846:	4b2a      	ldr	r3, [pc, #168]	; (80048f0 <xPortStartScheduler+0xd8>)
 8004848:	2207      	movs	r2, #7
 800484a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800484c:	e009      	b.n	8004862 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800484e:	4b28      	ldr	r3, [pc, #160]	; (80048f0 <xPortStartScheduler+0xd8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3b01      	subs	r3, #1
 8004854:	4a26      	ldr	r2, [pc, #152]	; (80048f0 <xPortStartScheduler+0xd8>)
 8004856:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004858:	78fb      	ldrb	r3, [r7, #3]
 800485a:	b2db      	uxtb	r3, r3
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	b2db      	uxtb	r3, r3
 8004860:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004862:	78fb      	ldrb	r3, [r7, #3]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486a:	2b80      	cmp	r3, #128	; 0x80
 800486c:	d0ef      	beq.n	800484e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800486e:	4b20      	ldr	r3, [pc, #128]	; (80048f0 <xPortStartScheduler+0xd8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f1c3 0307 	rsb	r3, r3, #7
 8004876:	2b04      	cmp	r3, #4
 8004878:	d00a      	beq.n	8004890 <xPortStartScheduler+0x78>
	__asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	60bb      	str	r3, [r7, #8]
}
 800488c:	bf00      	nop
 800488e:	e7fe      	b.n	800488e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004890:	4b17      	ldr	r3, [pc, #92]	; (80048f0 <xPortStartScheduler+0xd8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	021b      	lsls	r3, r3, #8
 8004896:	4a16      	ldr	r2, [pc, #88]	; (80048f0 <xPortStartScheduler+0xd8>)
 8004898:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800489a:	4b15      	ldr	r3, [pc, #84]	; (80048f0 <xPortStartScheduler+0xd8>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048a2:	4a13      	ldr	r2, [pc, #76]	; (80048f0 <xPortStartScheduler+0xd8>)
 80048a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048ae:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <xPortStartScheduler+0xdc>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a10      	ldr	r2, [pc, #64]	; (80048f4 <xPortStartScheduler+0xdc>)
 80048b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048ba:	4b0e      	ldr	r3, [pc, #56]	; (80048f4 <xPortStartScheduler+0xdc>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a0d      	ldr	r2, [pc, #52]	; (80048f4 <xPortStartScheduler+0xdc>)
 80048c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80048c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80048c6:	f000 f8b9 	bl	8004a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80048ca:	4b0b      	ldr	r3, [pc, #44]	; (80048f8 <xPortStartScheduler+0xe0>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80048d0:	f7ff ff92 	bl	80047f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80048d4:	f7ff faa0 	bl	8003e18 <vTaskSwitchContext>
	prvTaskExitError();
 80048d8:	f7ff ff4c 	bl	8004774 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	e000e400 	.word	0xe000e400
 80048ec:	20000474 	.word	0x20000474
 80048f0:	20000478 	.word	0x20000478
 80048f4:	e000ed20 	.word	0xe000ed20
 80048f8:	20000010 	.word	0x20000010

080048fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
	__asm volatile
 8004902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004906:	f383 8811 	msr	BASEPRI, r3
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	607b      	str	r3, [r7, #4]
}
 8004914:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004916:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <vPortEnterCritical+0x58>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3301      	adds	r3, #1
 800491c:	4a0d      	ldr	r2, [pc, #52]	; (8004954 <vPortEnterCritical+0x58>)
 800491e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004920:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <vPortEnterCritical+0x58>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d10f      	bne.n	8004948 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004928:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <vPortEnterCritical+0x5c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <vPortEnterCritical+0x4c>
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	603b      	str	r3, [r7, #0]
}
 8004944:	bf00      	nop
 8004946:	e7fe      	b.n	8004946 <vPortEnterCritical+0x4a>
	}
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	20000010 	.word	0x20000010
 8004958:	e000ed04 	.word	0xe000ed04

0800495c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004962:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <vPortExitCritical+0x4c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10a      	bne.n	8004980 <vPortExitCritical+0x24>
	__asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	607b      	str	r3, [r7, #4]
}
 800497c:	bf00      	nop
 800497e:	e7fe      	b.n	800497e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004980:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <vPortExitCritical+0x4c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3b01      	subs	r3, #1
 8004986:	4a08      	ldr	r2, [pc, #32]	; (80049a8 <vPortExitCritical+0x4c>)
 8004988:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800498a:	4b07      	ldr	r3, [pc, #28]	; (80049a8 <vPortExitCritical+0x4c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d105      	bne.n	800499e <vPortExitCritical+0x42>
 8004992:	2300      	movs	r3, #0
 8004994:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800499c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bc80      	pop	{r7}
 80049a6:	4770      	bx	lr
 80049a8:	20000010 	.word	0x20000010
 80049ac:	00000000 	.word	0x00000000

080049b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80049b0:	f3ef 8009 	mrs	r0, PSP
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	4b0d      	ldr	r3, [pc, #52]	; (80049f0 <pxCurrentTCBConst>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80049c0:	6010      	str	r0, [r2, #0]
 80049c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80049c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80049ca:	f380 8811 	msr	BASEPRI, r0
 80049ce:	f7ff fa23 	bl	8003e18 <vTaskSwitchContext>
 80049d2:	f04f 0000 	mov.w	r0, #0
 80049d6:	f380 8811 	msr	BASEPRI, r0
 80049da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80049de:	6819      	ldr	r1, [r3, #0]
 80049e0:	6808      	ldr	r0, [r1, #0]
 80049e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80049e6:	f380 8809 	msr	PSP, r0
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	4770      	bx	lr

080049f0 <pxCurrentTCBConst>:
 80049f0:	20000348 	.word	0x20000348
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049f4:	bf00      	nop
 80049f6:	bf00      	nop

080049f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	607b      	str	r3, [r7, #4]
}
 8004a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a12:	f7ff f943 	bl	8003c9c <xTaskIncrementTick>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a1c:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <SysTick_Handler+0x40>)
 8004a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	2300      	movs	r3, #0
 8004a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	f383 8811 	msr	BASEPRI, r3
}
 8004a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a30:	bf00      	nop
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	e000ed04 	.word	0xe000ed04

08004a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a40:	4b0a      	ldr	r3, [pc, #40]	; (8004a6c <vPortSetupTimerInterrupt+0x30>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a46:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <vPortSetupTimerInterrupt+0x34>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a4c:	4b09      	ldr	r3, [pc, #36]	; (8004a74 <vPortSetupTimerInterrupt+0x38>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a09      	ldr	r2, [pc, #36]	; (8004a78 <vPortSetupTimerInterrupt+0x3c>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	099b      	lsrs	r3, r3, #6
 8004a58:	4a08      	ldr	r2, [pc, #32]	; (8004a7c <vPortSetupTimerInterrupt+0x40>)
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a5e:	4b03      	ldr	r3, [pc, #12]	; (8004a6c <vPortSetupTimerInterrupt+0x30>)
 8004a60:	2207      	movs	r2, #7
 8004a62:	601a      	str	r2, [r3, #0]
}
 8004a64:	bf00      	nop
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bc80      	pop	{r7}
 8004a6a:	4770      	bx	lr
 8004a6c:	e000e010 	.word	0xe000e010
 8004a70:	e000e018 	.word	0xe000e018
 8004a74:	20000004 	.word	0x20000004
 8004a78:	10624dd3 	.word	0x10624dd3
 8004a7c:	e000e014 	.word	0xe000e014

08004a80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08a      	sub	sp, #40	; 0x28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a8c:	f7ff f85c 	bl	8003b48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a90:	4b58      	ldr	r3, [pc, #352]	; (8004bf4 <pvPortMalloc+0x174>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a98:	f000 f910 	bl	8004cbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a9c:	4b56      	ldr	r3, [pc, #344]	; (8004bf8 <pvPortMalloc+0x178>)
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f040 808e 	bne.w	8004bc6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01d      	beq.n	8004aec <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d014      	beq.n	8004aec <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f023 0307 	bic.w	r3, r3, #7
 8004ac8:	3308      	adds	r3, #8
 8004aca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <pvPortMalloc+0x6c>
	__asm volatile
 8004ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	617b      	str	r3, [r7, #20]
}
 8004ae8:	bf00      	nop
 8004aea:	e7fe      	b.n	8004aea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d069      	beq.n	8004bc6 <pvPortMalloc+0x146>
 8004af2:	4b42      	ldr	r3, [pc, #264]	; (8004bfc <pvPortMalloc+0x17c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d864      	bhi.n	8004bc6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004afc:	4b40      	ldr	r3, [pc, #256]	; (8004c00 <pvPortMalloc+0x180>)
 8004afe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b00:	4b3f      	ldr	r3, [pc, #252]	; (8004c00 <pvPortMalloc+0x180>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b06:	e004      	b.n	8004b12 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d903      	bls.n	8004b24 <pvPortMalloc+0xa4>
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1f1      	bne.n	8004b08 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b24:	4b33      	ldr	r3, [pc, #204]	; (8004bf4 <pvPortMalloc+0x174>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d04b      	beq.n	8004bc6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2208      	movs	r2, #8
 8004b34:	4413      	add	r3, r2
 8004b36:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	1ad2      	subs	r2, r2, r3
 8004b48:	2308      	movs	r3, #8
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d91f      	bls.n	8004b90 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4413      	add	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <pvPortMalloc+0xf8>
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	613b      	str	r3, [r7, #16]
}
 8004b74:	bf00      	nop
 8004b76:	e7fe      	b.n	8004b76 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	1ad2      	subs	r2, r2, r3
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b8a:	69b8      	ldr	r0, [r7, #24]
 8004b8c:	f000 f8f8 	bl	8004d80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b90:	4b1a      	ldr	r3, [pc, #104]	; (8004bfc <pvPortMalloc+0x17c>)
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	4a18      	ldr	r2, [pc, #96]	; (8004bfc <pvPortMalloc+0x17c>)
 8004b9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b9e:	4b17      	ldr	r3, [pc, #92]	; (8004bfc <pvPortMalloc+0x17c>)
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	4b18      	ldr	r3, [pc, #96]	; (8004c04 <pvPortMalloc+0x184>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d203      	bcs.n	8004bb2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004baa:	4b14      	ldr	r3, [pc, #80]	; (8004bfc <pvPortMalloc+0x17c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a15      	ldr	r2, [pc, #84]	; (8004c04 <pvPortMalloc+0x184>)
 8004bb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	4b10      	ldr	r3, [pc, #64]	; (8004bf8 <pvPortMalloc+0x178>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004bc6:	f7fe ffcd 	bl	8003b64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00a      	beq.n	8004bea <pvPortMalloc+0x16a>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	60fb      	str	r3, [r7, #12]
}
 8004be6:	bf00      	nop
 8004be8:	e7fe      	b.n	8004be8 <pvPortMalloc+0x168>
	return pvReturn;
 8004bea:	69fb      	ldr	r3, [r7, #28]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3728      	adds	r7, #40	; 0x28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	20001084 	.word	0x20001084
 8004bf8:	20001090 	.word	0x20001090
 8004bfc:	20001088 	.word	0x20001088
 8004c00:	2000107c 	.word	0x2000107c
 8004c04:	2000108c 	.word	0x2000108c

08004c08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d048      	beq.n	8004cac <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c1a:	2308      	movs	r3, #8
 8004c1c:	425b      	negs	r3, r3
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4413      	add	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	4b21      	ldr	r3, [pc, #132]	; (8004cb4 <vPortFree+0xac>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4013      	ands	r3, r2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10a      	bne.n	8004c4c <vPortFree+0x44>
	__asm volatile
 8004c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3a:	f383 8811 	msr	BASEPRI, r3
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	60fb      	str	r3, [r7, #12]
}
 8004c48:	bf00      	nop
 8004c4a:	e7fe      	b.n	8004c4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00a      	beq.n	8004c6a <vPortFree+0x62>
	__asm volatile
 8004c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	60bb      	str	r3, [r7, #8]
}
 8004c66:	bf00      	nop
 8004c68:	e7fe      	b.n	8004c68 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	4b11      	ldr	r3, [pc, #68]	; (8004cb4 <vPortFree+0xac>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4013      	ands	r3, r2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d019      	beq.n	8004cac <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d115      	bne.n	8004cac <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <vPortFree+0xac>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	401a      	ands	r2, r3
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c90:	f7fe ff5a 	bl	8003b48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	4b07      	ldr	r3, [pc, #28]	; (8004cb8 <vPortFree+0xb0>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	4a06      	ldr	r2, [pc, #24]	; (8004cb8 <vPortFree+0xb0>)
 8004ca0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ca2:	6938      	ldr	r0, [r7, #16]
 8004ca4:	f000 f86c 	bl	8004d80 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ca8:	f7fe ff5c 	bl	8003b64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004cac:	bf00      	nop
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	20001090 	.word	0x20001090
 8004cb8:	20001088 	.word	0x20001088

08004cbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cc2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004cc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cc8:	4b27      	ldr	r3, [pc, #156]	; (8004d68 <prvHeapInit+0xac>)
 8004cca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00c      	beq.n	8004cf0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3307      	adds	r3, #7
 8004cda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 0307 	bic.w	r3, r3, #7
 8004ce2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	4a1f      	ldr	r2, [pc, #124]	; (8004d68 <prvHeapInit+0xac>)
 8004cec:	4413      	add	r3, r2
 8004cee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cf4:	4a1d      	ldr	r2, [pc, #116]	; (8004d6c <prvHeapInit+0xb0>)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cfa:	4b1c      	ldr	r3, [pc, #112]	; (8004d6c <prvHeapInit+0xb0>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	4413      	add	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d08:	2208      	movs	r2, #8
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	1a9b      	subs	r3, r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f023 0307 	bic.w	r3, r3, #7
 8004d16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4a15      	ldr	r2, [pc, #84]	; (8004d70 <prvHeapInit+0xb4>)
 8004d1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d1e:	4b14      	ldr	r3, [pc, #80]	; (8004d70 <prvHeapInit+0xb4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2200      	movs	r2, #0
 8004d24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d26:	4b12      	ldr	r3, [pc, #72]	; (8004d70 <prvHeapInit+0xb4>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	1ad2      	subs	r2, r2, r3
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d3c:	4b0c      	ldr	r3, [pc, #48]	; (8004d70 <prvHeapInit+0xb4>)
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	4a0a      	ldr	r2, [pc, #40]	; (8004d74 <prvHeapInit+0xb8>)
 8004d4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	4a09      	ldr	r2, [pc, #36]	; (8004d78 <prvHeapInit+0xbc>)
 8004d52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d54:	4b09      	ldr	r3, [pc, #36]	; (8004d7c <prvHeapInit+0xc0>)
 8004d56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d5a:	601a      	str	r2, [r3, #0]
}
 8004d5c:	bf00      	nop
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bc80      	pop	{r7}
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	2000047c 	.word	0x2000047c
 8004d6c:	2000107c 	.word	0x2000107c
 8004d70:	20001084 	.word	0x20001084
 8004d74:	2000108c 	.word	0x2000108c
 8004d78:	20001088 	.word	0x20001088
 8004d7c:	20001090 	.word	0x20001090

08004d80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d88:	4b27      	ldr	r3, [pc, #156]	; (8004e28 <prvInsertBlockIntoFreeList+0xa8>)
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	e002      	b.n	8004d94 <prvInsertBlockIntoFreeList+0x14>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d8f7      	bhi.n	8004d8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	4413      	add	r3, r2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d108      	bne.n	8004dc2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	441a      	add	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	441a      	add	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d118      	bne.n	8004e08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	4b14      	ldr	r3, [pc, #80]	; (8004e2c <prvInsertBlockIntoFreeList+0xac>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d00d      	beq.n	8004dfe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	441a      	add	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	e008      	b.n	8004e10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004dfe:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <prvInsertBlockIntoFreeList+0xac>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	e003      	b.n	8004e10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d002      	beq.n	8004e1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e1e:	bf00      	nop
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bc80      	pop	{r7}
 8004e26:	4770      	bx	lr
 8004e28:	2000107c 	.word	0x2000107c
 8004e2c:	20001084 	.word	0x20001084

08004e30 <__errno>:
 8004e30:	4b01      	ldr	r3, [pc, #4]	; (8004e38 <__errno+0x8>)
 8004e32:	6818      	ldr	r0, [r3, #0]
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	20000014 	.word	0x20000014

08004e3c <__libc_init_array>:
 8004e3c:	b570      	push	{r4, r5, r6, lr}
 8004e3e:	2600      	movs	r6, #0
 8004e40:	4d0c      	ldr	r5, [pc, #48]	; (8004e74 <__libc_init_array+0x38>)
 8004e42:	4c0d      	ldr	r4, [pc, #52]	; (8004e78 <__libc_init_array+0x3c>)
 8004e44:	1b64      	subs	r4, r4, r5
 8004e46:	10a4      	asrs	r4, r4, #2
 8004e48:	42a6      	cmp	r6, r4
 8004e4a:	d109      	bne.n	8004e60 <__libc_init_array+0x24>
 8004e4c:	f000 ffbe 	bl	8005dcc <_init>
 8004e50:	2600      	movs	r6, #0
 8004e52:	4d0a      	ldr	r5, [pc, #40]	; (8004e7c <__libc_init_array+0x40>)
 8004e54:	4c0a      	ldr	r4, [pc, #40]	; (8004e80 <__libc_init_array+0x44>)
 8004e56:	1b64      	subs	r4, r4, r5
 8004e58:	10a4      	asrs	r4, r4, #2
 8004e5a:	42a6      	cmp	r6, r4
 8004e5c:	d105      	bne.n	8004e6a <__libc_init_array+0x2e>
 8004e5e:	bd70      	pop	{r4, r5, r6, pc}
 8004e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e64:	4798      	blx	r3
 8004e66:	3601      	adds	r6, #1
 8004e68:	e7ee      	b.n	8004e48 <__libc_init_array+0xc>
 8004e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e6e:	4798      	blx	r3
 8004e70:	3601      	adds	r6, #1
 8004e72:	e7f2      	b.n	8004e5a <__libc_init_array+0x1e>
 8004e74:	08005eb0 	.word	0x08005eb0
 8004e78:	08005eb0 	.word	0x08005eb0
 8004e7c:	08005eb0 	.word	0x08005eb0
 8004e80:	08005eb4 	.word	0x08005eb4

08004e84 <memcpy>:
 8004e84:	440a      	add	r2, r1
 8004e86:	4291      	cmp	r1, r2
 8004e88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004e8c:	d100      	bne.n	8004e90 <memcpy+0xc>
 8004e8e:	4770      	bx	lr
 8004e90:	b510      	push	{r4, lr}
 8004e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e96:	4291      	cmp	r1, r2
 8004e98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e9c:	d1f9      	bne.n	8004e92 <memcpy+0xe>
 8004e9e:	bd10      	pop	{r4, pc}

08004ea0 <memset>:
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	4402      	add	r2, r0
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d100      	bne.n	8004eaa <memset+0xa>
 8004ea8:	4770      	bx	lr
 8004eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8004eae:	e7f9      	b.n	8004ea4 <memset+0x4>

08004eb0 <pow>:
 8004eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eb4:	461f      	mov	r7, r3
 8004eb6:	4680      	mov	r8, r0
 8004eb8:	4689      	mov	r9, r1
 8004eba:	4616      	mov	r6, r2
 8004ebc:	f000 f8a4 	bl	8005008 <__ieee754_pow>
 8004ec0:	4b4d      	ldr	r3, [pc, #308]	; (8004ff8 <pow+0x148>)
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	f993 3000 	ldrsb.w	r3, [r3]
 8004ec8:	460d      	mov	r5, r1
 8004eca:	3301      	adds	r3, #1
 8004ecc:	d015      	beq.n	8004efa <pow+0x4a>
 8004ece:	4632      	mov	r2, r6
 8004ed0:	463b      	mov	r3, r7
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	4639      	mov	r1, r7
 8004ed6:	f7fb fd91 	bl	80009fc <__aeabi_dcmpun>
 8004eda:	b970      	cbnz	r0, 8004efa <pow+0x4a>
 8004edc:	4642      	mov	r2, r8
 8004ede:	464b      	mov	r3, r9
 8004ee0:	4640      	mov	r0, r8
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	f7fb fd8a 	bl	80009fc <__aeabi_dcmpun>
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2300      	movs	r3, #0
 8004eec:	b148      	cbz	r0, 8004f02 <pow+0x52>
 8004eee:	4630      	mov	r0, r6
 8004ef0:	4639      	mov	r1, r7
 8004ef2:	f7fb fd51 	bl	8000998 <__aeabi_dcmpeq>
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	d17b      	bne.n	8004ff2 <pow+0x142>
 8004efa:	4620      	mov	r0, r4
 8004efc:	4629      	mov	r1, r5
 8004efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f02:	4640      	mov	r0, r8
 8004f04:	4649      	mov	r1, r9
 8004f06:	f7fb fd47 	bl	8000998 <__aeabi_dcmpeq>
 8004f0a:	b1e0      	cbz	r0, 8004f46 <pow+0x96>
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2300      	movs	r3, #0
 8004f10:	4630      	mov	r0, r6
 8004f12:	4639      	mov	r1, r7
 8004f14:	f7fb fd40 	bl	8000998 <__aeabi_dcmpeq>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	d16a      	bne.n	8004ff2 <pow+0x142>
 8004f1c:	4630      	mov	r0, r6
 8004f1e:	4639      	mov	r1, r7
 8004f20:	f000 fe37 	bl	8005b92 <finite>
 8004f24:	2800      	cmp	r0, #0
 8004f26:	d0e8      	beq.n	8004efa <pow+0x4a>
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	4630      	mov	r0, r6
 8004f2e:	4639      	mov	r1, r7
 8004f30:	f7fb fd3c 	bl	80009ac <__aeabi_dcmplt>
 8004f34:	2800      	cmp	r0, #0
 8004f36:	d0e0      	beq.n	8004efa <pow+0x4a>
 8004f38:	f7ff ff7a 	bl	8004e30 <__errno>
 8004f3c:	2321      	movs	r3, #33	; 0x21
 8004f3e:	2400      	movs	r4, #0
 8004f40:	6003      	str	r3, [r0, #0]
 8004f42:	4d2e      	ldr	r5, [pc, #184]	; (8004ffc <pow+0x14c>)
 8004f44:	e7d9      	b.n	8004efa <pow+0x4a>
 8004f46:	4620      	mov	r0, r4
 8004f48:	4629      	mov	r1, r5
 8004f4a:	f000 fe22 	bl	8005b92 <finite>
 8004f4e:	bba8      	cbnz	r0, 8004fbc <pow+0x10c>
 8004f50:	4640      	mov	r0, r8
 8004f52:	4649      	mov	r1, r9
 8004f54:	f000 fe1d 	bl	8005b92 <finite>
 8004f58:	b380      	cbz	r0, 8004fbc <pow+0x10c>
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	4639      	mov	r1, r7
 8004f5e:	f000 fe18 	bl	8005b92 <finite>
 8004f62:	b358      	cbz	r0, 8004fbc <pow+0x10c>
 8004f64:	4622      	mov	r2, r4
 8004f66:	462b      	mov	r3, r5
 8004f68:	4620      	mov	r0, r4
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	f7fb fd46 	bl	80009fc <__aeabi_dcmpun>
 8004f70:	b160      	cbz	r0, 8004f8c <pow+0xdc>
 8004f72:	f7ff ff5d 	bl	8004e30 <__errno>
 8004f76:	2321      	movs	r3, #33	; 0x21
 8004f78:	2200      	movs	r2, #0
 8004f7a:	6003      	str	r3, [r0, #0]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	4610      	mov	r0, r2
 8004f80:	4619      	mov	r1, r3
 8004f82:	f7fb fbcb 	bl	800071c <__aeabi_ddiv>
 8004f86:	4604      	mov	r4, r0
 8004f88:	460d      	mov	r5, r1
 8004f8a:	e7b6      	b.n	8004efa <pow+0x4a>
 8004f8c:	f7ff ff50 	bl	8004e30 <__errno>
 8004f90:	2322      	movs	r3, #34	; 0x22
 8004f92:	2200      	movs	r2, #0
 8004f94:	6003      	str	r3, [r0, #0]
 8004f96:	4649      	mov	r1, r9
 8004f98:	2300      	movs	r3, #0
 8004f9a:	4640      	mov	r0, r8
 8004f9c:	f7fb fd06 	bl	80009ac <__aeabi_dcmplt>
 8004fa0:	2400      	movs	r4, #0
 8004fa2:	b148      	cbz	r0, 8004fb8 <pow+0x108>
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	4639      	mov	r1, r7
 8004fa8:	f000 fe00 	bl	8005bac <rint>
 8004fac:	4632      	mov	r2, r6
 8004fae:	463b      	mov	r3, r7
 8004fb0:	f7fb fcf2 	bl	8000998 <__aeabi_dcmpeq>
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	d0c4      	beq.n	8004f42 <pow+0x92>
 8004fb8:	4d11      	ldr	r5, [pc, #68]	; (8005000 <pow+0x150>)
 8004fba:	e79e      	b.n	8004efa <pow+0x4a>
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	4629      	mov	r1, r5
 8004fc4:	f7fb fce8 	bl	8000998 <__aeabi_dcmpeq>
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	d096      	beq.n	8004efa <pow+0x4a>
 8004fcc:	4640      	mov	r0, r8
 8004fce:	4649      	mov	r1, r9
 8004fd0:	f000 fddf 	bl	8005b92 <finite>
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	d090      	beq.n	8004efa <pow+0x4a>
 8004fd8:	4630      	mov	r0, r6
 8004fda:	4639      	mov	r1, r7
 8004fdc:	f000 fdd9 	bl	8005b92 <finite>
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	d08a      	beq.n	8004efa <pow+0x4a>
 8004fe4:	f7ff ff24 	bl	8004e30 <__errno>
 8004fe8:	2322      	movs	r3, #34	; 0x22
 8004fea:	2400      	movs	r4, #0
 8004fec:	2500      	movs	r5, #0
 8004fee:	6003      	str	r3, [r0, #0]
 8004ff0:	e783      	b.n	8004efa <pow+0x4a>
 8004ff2:	2400      	movs	r4, #0
 8004ff4:	4d03      	ldr	r5, [pc, #12]	; (8005004 <pow+0x154>)
 8004ff6:	e780      	b.n	8004efa <pow+0x4a>
 8004ff8:	20000078 	.word	0x20000078
 8004ffc:	fff00000 	.word	0xfff00000
 8005000:	7ff00000 	.word	0x7ff00000
 8005004:	3ff00000 	.word	0x3ff00000

08005008 <__ieee754_pow>:
 8005008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800500c:	b093      	sub	sp, #76	; 0x4c
 800500e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005012:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8005016:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800501a:	ea55 0302 	orrs.w	r3, r5, r2
 800501e:	4607      	mov	r7, r0
 8005020:	4688      	mov	r8, r1
 8005022:	f000 84bf 	beq.w	80059a4 <__ieee754_pow+0x99c>
 8005026:	4b7e      	ldr	r3, [pc, #504]	; (8005220 <__ieee754_pow+0x218>)
 8005028:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800502c:	429c      	cmp	r4, r3
 800502e:	4689      	mov	r9, r1
 8005030:	4682      	mov	sl, r0
 8005032:	dc09      	bgt.n	8005048 <__ieee754_pow+0x40>
 8005034:	d103      	bne.n	800503e <__ieee754_pow+0x36>
 8005036:	b978      	cbnz	r0, 8005058 <__ieee754_pow+0x50>
 8005038:	42a5      	cmp	r5, r4
 800503a:	dd02      	ble.n	8005042 <__ieee754_pow+0x3a>
 800503c:	e00c      	b.n	8005058 <__ieee754_pow+0x50>
 800503e:	429d      	cmp	r5, r3
 8005040:	dc02      	bgt.n	8005048 <__ieee754_pow+0x40>
 8005042:	429d      	cmp	r5, r3
 8005044:	d10e      	bne.n	8005064 <__ieee754_pow+0x5c>
 8005046:	b16a      	cbz	r2, 8005064 <__ieee754_pow+0x5c>
 8005048:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800504c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005050:	ea54 030a 	orrs.w	r3, r4, sl
 8005054:	f000 84a6 	beq.w	80059a4 <__ieee754_pow+0x99c>
 8005058:	4872      	ldr	r0, [pc, #456]	; (8005224 <__ieee754_pow+0x21c>)
 800505a:	b013      	add	sp, #76	; 0x4c
 800505c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005060:	f000 bd9e 	b.w	8005ba0 <nan>
 8005064:	f1b9 0f00 	cmp.w	r9, #0
 8005068:	da39      	bge.n	80050de <__ieee754_pow+0xd6>
 800506a:	4b6f      	ldr	r3, [pc, #444]	; (8005228 <__ieee754_pow+0x220>)
 800506c:	429d      	cmp	r5, r3
 800506e:	dc54      	bgt.n	800511a <__ieee754_pow+0x112>
 8005070:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005074:	429d      	cmp	r5, r3
 8005076:	f340 84a6 	ble.w	80059c6 <__ieee754_pow+0x9be>
 800507a:	152b      	asrs	r3, r5, #20
 800507c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005080:	2b14      	cmp	r3, #20
 8005082:	dd0f      	ble.n	80050a4 <__ieee754_pow+0x9c>
 8005084:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005088:	fa22 f103 	lsr.w	r1, r2, r3
 800508c:	fa01 f303 	lsl.w	r3, r1, r3
 8005090:	4293      	cmp	r3, r2
 8005092:	f040 8498 	bne.w	80059c6 <__ieee754_pow+0x9be>
 8005096:	f001 0101 	and.w	r1, r1, #1
 800509a:	f1c1 0302 	rsb	r3, r1, #2
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	b182      	cbz	r2, 80050c4 <__ieee754_pow+0xbc>
 80050a2:	e05e      	b.n	8005162 <__ieee754_pow+0x15a>
 80050a4:	2a00      	cmp	r2, #0
 80050a6:	d15a      	bne.n	800515e <__ieee754_pow+0x156>
 80050a8:	f1c3 0314 	rsb	r3, r3, #20
 80050ac:	fa45 f103 	asr.w	r1, r5, r3
 80050b0:	fa01 f303 	lsl.w	r3, r1, r3
 80050b4:	42ab      	cmp	r3, r5
 80050b6:	f040 8483 	bne.w	80059c0 <__ieee754_pow+0x9b8>
 80050ba:	f001 0101 	and.w	r1, r1, #1
 80050be:	f1c1 0302 	rsb	r3, r1, #2
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	4b59      	ldr	r3, [pc, #356]	; (800522c <__ieee754_pow+0x224>)
 80050c6:	429d      	cmp	r5, r3
 80050c8:	d130      	bne.n	800512c <__ieee754_pow+0x124>
 80050ca:	2e00      	cmp	r6, #0
 80050cc:	f280 8474 	bge.w	80059b8 <__ieee754_pow+0x9b0>
 80050d0:	463a      	mov	r2, r7
 80050d2:	4643      	mov	r3, r8
 80050d4:	2000      	movs	r0, #0
 80050d6:	4955      	ldr	r1, [pc, #340]	; (800522c <__ieee754_pow+0x224>)
 80050d8:	f7fb fb20 	bl	800071c <__aeabi_ddiv>
 80050dc:	e02f      	b.n	800513e <__ieee754_pow+0x136>
 80050de:	2300      	movs	r3, #0
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	2a00      	cmp	r2, #0
 80050e4:	d13d      	bne.n	8005162 <__ieee754_pow+0x15a>
 80050e6:	4b4e      	ldr	r3, [pc, #312]	; (8005220 <__ieee754_pow+0x218>)
 80050e8:	429d      	cmp	r5, r3
 80050ea:	d1eb      	bne.n	80050c4 <__ieee754_pow+0xbc>
 80050ec:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80050f0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80050f4:	ea53 030a 	orrs.w	r3, r3, sl
 80050f8:	f000 8454 	beq.w	80059a4 <__ieee754_pow+0x99c>
 80050fc:	4b4c      	ldr	r3, [pc, #304]	; (8005230 <__ieee754_pow+0x228>)
 80050fe:	429c      	cmp	r4, r3
 8005100:	dd0d      	ble.n	800511e <__ieee754_pow+0x116>
 8005102:	2e00      	cmp	r6, #0
 8005104:	f280 8454 	bge.w	80059b0 <__ieee754_pow+0x9a8>
 8005108:	f04f 0b00 	mov.w	fp, #0
 800510c:	f04f 0c00 	mov.w	ip, #0
 8005110:	4658      	mov	r0, fp
 8005112:	4661      	mov	r1, ip
 8005114:	b013      	add	sp, #76	; 0x4c
 8005116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800511a:	2302      	movs	r3, #2
 800511c:	e7e0      	b.n	80050e0 <__ieee754_pow+0xd8>
 800511e:	2e00      	cmp	r6, #0
 8005120:	daf2      	bge.n	8005108 <__ieee754_pow+0x100>
 8005122:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8005126:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800512a:	e7f1      	b.n	8005110 <__ieee754_pow+0x108>
 800512c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8005130:	d108      	bne.n	8005144 <__ieee754_pow+0x13c>
 8005132:	463a      	mov	r2, r7
 8005134:	4643      	mov	r3, r8
 8005136:	4638      	mov	r0, r7
 8005138:	4641      	mov	r1, r8
 800513a:	f7fb f9c5 	bl	80004c8 <__aeabi_dmul>
 800513e:	4683      	mov	fp, r0
 8005140:	468c      	mov	ip, r1
 8005142:	e7e5      	b.n	8005110 <__ieee754_pow+0x108>
 8005144:	4b3b      	ldr	r3, [pc, #236]	; (8005234 <__ieee754_pow+0x22c>)
 8005146:	429e      	cmp	r6, r3
 8005148:	d10b      	bne.n	8005162 <__ieee754_pow+0x15a>
 800514a:	f1b9 0f00 	cmp.w	r9, #0
 800514e:	db08      	blt.n	8005162 <__ieee754_pow+0x15a>
 8005150:	4638      	mov	r0, r7
 8005152:	4641      	mov	r1, r8
 8005154:	b013      	add	sp, #76	; 0x4c
 8005156:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800515a:	f000 bc6b 	b.w	8005a34 <__ieee754_sqrt>
 800515e:	2300      	movs	r3, #0
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	4638      	mov	r0, r7
 8005164:	4641      	mov	r1, r8
 8005166:	f000 fd11 	bl	8005b8c <fabs>
 800516a:	4683      	mov	fp, r0
 800516c:	468c      	mov	ip, r1
 800516e:	f1ba 0f00 	cmp.w	sl, #0
 8005172:	d129      	bne.n	80051c8 <__ieee754_pow+0x1c0>
 8005174:	b124      	cbz	r4, 8005180 <__ieee754_pow+0x178>
 8005176:	4b2d      	ldr	r3, [pc, #180]	; (800522c <__ieee754_pow+0x224>)
 8005178:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800517c:	429a      	cmp	r2, r3
 800517e:	d123      	bne.n	80051c8 <__ieee754_pow+0x1c0>
 8005180:	2e00      	cmp	r6, #0
 8005182:	da07      	bge.n	8005194 <__ieee754_pow+0x18c>
 8005184:	465a      	mov	r2, fp
 8005186:	4663      	mov	r3, ip
 8005188:	2000      	movs	r0, #0
 800518a:	4928      	ldr	r1, [pc, #160]	; (800522c <__ieee754_pow+0x224>)
 800518c:	f7fb fac6 	bl	800071c <__aeabi_ddiv>
 8005190:	4683      	mov	fp, r0
 8005192:	468c      	mov	ip, r1
 8005194:	f1b9 0f00 	cmp.w	r9, #0
 8005198:	daba      	bge.n	8005110 <__ieee754_pow+0x108>
 800519a:	9b00      	ldr	r3, [sp, #0]
 800519c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80051a0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80051a4:	4323      	orrs	r3, r4
 80051a6:	d108      	bne.n	80051ba <__ieee754_pow+0x1b2>
 80051a8:	465a      	mov	r2, fp
 80051aa:	4663      	mov	r3, ip
 80051ac:	4658      	mov	r0, fp
 80051ae:	4661      	mov	r1, ip
 80051b0:	f7fa ffd2 	bl	8000158 <__aeabi_dsub>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	e78e      	b.n	80050d8 <__ieee754_pow+0xd0>
 80051ba:	9b00      	ldr	r3, [sp, #0]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d1a7      	bne.n	8005110 <__ieee754_pow+0x108>
 80051c0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80051c4:	469c      	mov	ip, r3
 80051c6:	e7a3      	b.n	8005110 <__ieee754_pow+0x108>
 80051c8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 80051cc:	3b01      	subs	r3, #1
 80051ce:	930c      	str	r3, [sp, #48]	; 0x30
 80051d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051d2:	9b00      	ldr	r3, [sp, #0]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	d104      	bne.n	80051e2 <__ieee754_pow+0x1da>
 80051d8:	463a      	mov	r2, r7
 80051da:	4643      	mov	r3, r8
 80051dc:	4638      	mov	r0, r7
 80051de:	4641      	mov	r1, r8
 80051e0:	e7e6      	b.n	80051b0 <__ieee754_pow+0x1a8>
 80051e2:	4b15      	ldr	r3, [pc, #84]	; (8005238 <__ieee754_pow+0x230>)
 80051e4:	429d      	cmp	r5, r3
 80051e6:	f340 80f9 	ble.w	80053dc <__ieee754_pow+0x3d4>
 80051ea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80051ee:	429d      	cmp	r5, r3
 80051f0:	4b0f      	ldr	r3, [pc, #60]	; (8005230 <__ieee754_pow+0x228>)
 80051f2:	dd09      	ble.n	8005208 <__ieee754_pow+0x200>
 80051f4:	429c      	cmp	r4, r3
 80051f6:	dc0c      	bgt.n	8005212 <__ieee754_pow+0x20a>
 80051f8:	2e00      	cmp	r6, #0
 80051fa:	da85      	bge.n	8005108 <__ieee754_pow+0x100>
 80051fc:	a306      	add	r3, pc, #24	; (adr r3, 8005218 <__ieee754_pow+0x210>)
 80051fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005202:	4610      	mov	r0, r2
 8005204:	4619      	mov	r1, r3
 8005206:	e798      	b.n	800513a <__ieee754_pow+0x132>
 8005208:	429c      	cmp	r4, r3
 800520a:	dbf5      	blt.n	80051f8 <__ieee754_pow+0x1f0>
 800520c:	4b07      	ldr	r3, [pc, #28]	; (800522c <__ieee754_pow+0x224>)
 800520e:	429c      	cmp	r4, r3
 8005210:	dd14      	ble.n	800523c <__ieee754_pow+0x234>
 8005212:	2e00      	cmp	r6, #0
 8005214:	dcf2      	bgt.n	80051fc <__ieee754_pow+0x1f4>
 8005216:	e777      	b.n	8005108 <__ieee754_pow+0x100>
 8005218:	8800759c 	.word	0x8800759c
 800521c:	7e37e43c 	.word	0x7e37e43c
 8005220:	7ff00000 	.word	0x7ff00000
 8005224:	08005e68 	.word	0x08005e68
 8005228:	433fffff 	.word	0x433fffff
 800522c:	3ff00000 	.word	0x3ff00000
 8005230:	3fefffff 	.word	0x3fefffff
 8005234:	3fe00000 	.word	0x3fe00000
 8005238:	41e00000 	.word	0x41e00000
 800523c:	4661      	mov	r1, ip
 800523e:	2200      	movs	r2, #0
 8005240:	4658      	mov	r0, fp
 8005242:	4b61      	ldr	r3, [pc, #388]	; (80053c8 <__ieee754_pow+0x3c0>)
 8005244:	f7fa ff88 	bl	8000158 <__aeabi_dsub>
 8005248:	a355      	add	r3, pc, #340	; (adr r3, 80053a0 <__ieee754_pow+0x398>)
 800524a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524e:	4604      	mov	r4, r0
 8005250:	460d      	mov	r5, r1
 8005252:	f7fb f939 	bl	80004c8 <__aeabi_dmul>
 8005256:	a354      	add	r3, pc, #336	; (adr r3, 80053a8 <__ieee754_pow+0x3a0>)
 8005258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525c:	4606      	mov	r6, r0
 800525e:	460f      	mov	r7, r1
 8005260:	4620      	mov	r0, r4
 8005262:	4629      	mov	r1, r5
 8005264:	f7fb f930 	bl	80004c8 <__aeabi_dmul>
 8005268:	2200      	movs	r2, #0
 800526a:	4682      	mov	sl, r0
 800526c:	468b      	mov	fp, r1
 800526e:	4620      	mov	r0, r4
 8005270:	4629      	mov	r1, r5
 8005272:	4b56      	ldr	r3, [pc, #344]	; (80053cc <__ieee754_pow+0x3c4>)
 8005274:	f7fb f928 	bl	80004c8 <__aeabi_dmul>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	a14c      	add	r1, pc, #304	; (adr r1, 80053b0 <__ieee754_pow+0x3a8>)
 800527e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005282:	f7fa ff69 	bl	8000158 <__aeabi_dsub>
 8005286:	4622      	mov	r2, r4
 8005288:	462b      	mov	r3, r5
 800528a:	f7fb f91d 	bl	80004c8 <__aeabi_dmul>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	2000      	movs	r0, #0
 8005294:	494e      	ldr	r1, [pc, #312]	; (80053d0 <__ieee754_pow+0x3c8>)
 8005296:	f7fa ff5f 	bl	8000158 <__aeabi_dsub>
 800529a:	4622      	mov	r2, r4
 800529c:	462b      	mov	r3, r5
 800529e:	4680      	mov	r8, r0
 80052a0:	4689      	mov	r9, r1
 80052a2:	4620      	mov	r0, r4
 80052a4:	4629      	mov	r1, r5
 80052a6:	f7fb f90f 	bl	80004c8 <__aeabi_dmul>
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	4640      	mov	r0, r8
 80052b0:	4649      	mov	r1, r9
 80052b2:	f7fb f909 	bl	80004c8 <__aeabi_dmul>
 80052b6:	a340      	add	r3, pc, #256	; (adr r3, 80053b8 <__ieee754_pow+0x3b0>)
 80052b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052bc:	f7fb f904 	bl	80004c8 <__aeabi_dmul>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	4650      	mov	r0, sl
 80052c6:	4659      	mov	r1, fp
 80052c8:	f7fa ff46 	bl	8000158 <__aeabi_dsub>
 80052cc:	f04f 0a00 	mov.w	sl, #0
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4604      	mov	r4, r0
 80052d6:	460d      	mov	r5, r1
 80052d8:	4630      	mov	r0, r6
 80052da:	4639      	mov	r1, r7
 80052dc:	f7fa ff3e 	bl	800015c <__adddf3>
 80052e0:	4632      	mov	r2, r6
 80052e2:	463b      	mov	r3, r7
 80052e4:	4650      	mov	r0, sl
 80052e6:	468b      	mov	fp, r1
 80052e8:	f7fa ff36 	bl	8000158 <__aeabi_dsub>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4620      	mov	r0, r4
 80052f2:	4629      	mov	r1, r5
 80052f4:	f7fa ff30 	bl	8000158 <__aeabi_dsub>
 80052f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80052fc:	9b00      	ldr	r3, [sp, #0]
 80052fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005300:	3b01      	subs	r3, #1
 8005302:	4313      	orrs	r3, r2
 8005304:	f04f 0600 	mov.w	r6, #0
 8005308:	f04f 0200 	mov.w	r2, #0
 800530c:	bf0c      	ite	eq
 800530e:	4b31      	ldreq	r3, [pc, #196]	; (80053d4 <__ieee754_pow+0x3cc>)
 8005310:	4b2d      	ldrne	r3, [pc, #180]	; (80053c8 <__ieee754_pow+0x3c0>)
 8005312:	4604      	mov	r4, r0
 8005314:	460d      	mov	r5, r1
 8005316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800531a:	e9cd 2300 	strd	r2, r3, [sp]
 800531e:	4632      	mov	r2, r6
 8005320:	463b      	mov	r3, r7
 8005322:	f7fa ff19 	bl	8000158 <__aeabi_dsub>
 8005326:	4652      	mov	r2, sl
 8005328:	465b      	mov	r3, fp
 800532a:	f7fb f8cd 	bl	80004c8 <__aeabi_dmul>
 800532e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005332:	4680      	mov	r8, r0
 8005334:	4689      	mov	r9, r1
 8005336:	4620      	mov	r0, r4
 8005338:	4629      	mov	r1, r5
 800533a:	f7fb f8c5 	bl	80004c8 <__aeabi_dmul>
 800533e:	4602      	mov	r2, r0
 8005340:	460b      	mov	r3, r1
 8005342:	4640      	mov	r0, r8
 8005344:	4649      	mov	r1, r9
 8005346:	f7fa ff09 	bl	800015c <__adddf3>
 800534a:	4632      	mov	r2, r6
 800534c:	463b      	mov	r3, r7
 800534e:	4680      	mov	r8, r0
 8005350:	4689      	mov	r9, r1
 8005352:	4650      	mov	r0, sl
 8005354:	4659      	mov	r1, fp
 8005356:	f7fb f8b7 	bl	80004c8 <__aeabi_dmul>
 800535a:	4604      	mov	r4, r0
 800535c:	460d      	mov	r5, r1
 800535e:	460b      	mov	r3, r1
 8005360:	4602      	mov	r2, r0
 8005362:	4649      	mov	r1, r9
 8005364:	4640      	mov	r0, r8
 8005366:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800536a:	f7fa fef7 	bl	800015c <__adddf3>
 800536e:	4b1a      	ldr	r3, [pc, #104]	; (80053d8 <__ieee754_pow+0x3d0>)
 8005370:	4682      	mov	sl, r0
 8005372:	4299      	cmp	r1, r3
 8005374:	460f      	mov	r7, r1
 8005376:	460e      	mov	r6, r1
 8005378:	f340 82ed 	ble.w	8005956 <__ieee754_pow+0x94e>
 800537c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005380:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005384:	4303      	orrs	r3, r0
 8005386:	f000 81e7 	beq.w	8005758 <__ieee754_pow+0x750>
 800538a:	a30d      	add	r3, pc, #52	; (adr r3, 80053c0 <__ieee754_pow+0x3b8>)
 800538c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005390:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005394:	f7fb f898 	bl	80004c8 <__aeabi_dmul>
 8005398:	a309      	add	r3, pc, #36	; (adr r3, 80053c0 <__ieee754_pow+0x3b8>)
 800539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539e:	e6cc      	b.n	800513a <__ieee754_pow+0x132>
 80053a0:	60000000 	.word	0x60000000
 80053a4:	3ff71547 	.word	0x3ff71547
 80053a8:	f85ddf44 	.word	0xf85ddf44
 80053ac:	3e54ae0b 	.word	0x3e54ae0b
 80053b0:	55555555 	.word	0x55555555
 80053b4:	3fd55555 	.word	0x3fd55555
 80053b8:	652b82fe 	.word	0x652b82fe
 80053bc:	3ff71547 	.word	0x3ff71547
 80053c0:	8800759c 	.word	0x8800759c
 80053c4:	7e37e43c 	.word	0x7e37e43c
 80053c8:	3ff00000 	.word	0x3ff00000
 80053cc:	3fd00000 	.word	0x3fd00000
 80053d0:	3fe00000 	.word	0x3fe00000
 80053d4:	bff00000 	.word	0xbff00000
 80053d8:	408fffff 	.word	0x408fffff
 80053dc:	4bd4      	ldr	r3, [pc, #848]	; (8005730 <__ieee754_pow+0x728>)
 80053de:	2200      	movs	r2, #0
 80053e0:	ea09 0303 	and.w	r3, r9, r3
 80053e4:	b943      	cbnz	r3, 80053f8 <__ieee754_pow+0x3f0>
 80053e6:	4658      	mov	r0, fp
 80053e8:	4661      	mov	r1, ip
 80053ea:	4bd2      	ldr	r3, [pc, #840]	; (8005734 <__ieee754_pow+0x72c>)
 80053ec:	f7fb f86c 	bl	80004c8 <__aeabi_dmul>
 80053f0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80053f4:	4683      	mov	fp, r0
 80053f6:	460c      	mov	r4, r1
 80053f8:	1523      	asrs	r3, r4, #20
 80053fa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80053fe:	4413      	add	r3, r2
 8005400:	930b      	str	r3, [sp, #44]	; 0x2c
 8005402:	4bcd      	ldr	r3, [pc, #820]	; (8005738 <__ieee754_pow+0x730>)
 8005404:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005408:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800540c:	429c      	cmp	r4, r3
 800540e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005412:	dd08      	ble.n	8005426 <__ieee754_pow+0x41e>
 8005414:	4bc9      	ldr	r3, [pc, #804]	; (800573c <__ieee754_pow+0x734>)
 8005416:	429c      	cmp	r4, r3
 8005418:	f340 819c 	ble.w	8005754 <__ieee754_pow+0x74c>
 800541c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800541e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005422:	3301      	adds	r3, #1
 8005424:	930b      	str	r3, [sp, #44]	; 0x2c
 8005426:	2600      	movs	r6, #0
 8005428:	00f3      	lsls	r3, r6, #3
 800542a:	930d      	str	r3, [sp, #52]	; 0x34
 800542c:	4bc4      	ldr	r3, [pc, #784]	; (8005740 <__ieee754_pow+0x738>)
 800542e:	4658      	mov	r0, fp
 8005430:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005434:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005438:	4629      	mov	r1, r5
 800543a:	461a      	mov	r2, r3
 800543c:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005440:	4623      	mov	r3, r4
 8005442:	f7fa fe89 	bl	8000158 <__aeabi_dsub>
 8005446:	46da      	mov	sl, fp
 8005448:	462b      	mov	r3, r5
 800544a:	4652      	mov	r2, sl
 800544c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005450:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005454:	f7fa fe82 	bl	800015c <__adddf3>
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	2000      	movs	r0, #0
 800545e:	49b9      	ldr	r1, [pc, #740]	; (8005744 <__ieee754_pow+0x73c>)
 8005460:	f7fb f95c 	bl	800071c <__aeabi_ddiv>
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800546c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005470:	f7fb f82a 	bl	80004c8 <__aeabi_dmul>
 8005474:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005478:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800547c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005480:	2300      	movs	r3, #0
 8005482:	2200      	movs	r2, #0
 8005484:	46ab      	mov	fp, r5
 8005486:	106d      	asrs	r5, r5, #1
 8005488:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800548c:	9304      	str	r3, [sp, #16]
 800548e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005492:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005496:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800549a:	4640      	mov	r0, r8
 800549c:	4649      	mov	r1, r9
 800549e:	4614      	mov	r4, r2
 80054a0:	461d      	mov	r5, r3
 80054a2:	f7fb f811 	bl	80004c8 <__aeabi_dmul>
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80054ae:	f7fa fe53 	bl	8000158 <__aeabi_dsub>
 80054b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80054b6:	4606      	mov	r6, r0
 80054b8:	460f      	mov	r7, r1
 80054ba:	4620      	mov	r0, r4
 80054bc:	4629      	mov	r1, r5
 80054be:	f7fa fe4b 	bl	8000158 <__aeabi_dsub>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4650      	mov	r0, sl
 80054c8:	4659      	mov	r1, fp
 80054ca:	f7fa fe45 	bl	8000158 <__aeabi_dsub>
 80054ce:	4642      	mov	r2, r8
 80054d0:	464b      	mov	r3, r9
 80054d2:	f7fa fff9 	bl	80004c8 <__aeabi_dmul>
 80054d6:	4602      	mov	r2, r0
 80054d8:	460b      	mov	r3, r1
 80054da:	4630      	mov	r0, r6
 80054dc:	4639      	mov	r1, r7
 80054de:	f7fa fe3b 	bl	8000158 <__aeabi_dsub>
 80054e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054e6:	f7fa ffef 	bl	80004c8 <__aeabi_dmul>
 80054ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80054f2:	4610      	mov	r0, r2
 80054f4:	4619      	mov	r1, r3
 80054f6:	f7fa ffe7 	bl	80004c8 <__aeabi_dmul>
 80054fa:	a37b      	add	r3, pc, #492	; (adr r3, 80056e8 <__ieee754_pow+0x6e0>)
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	4604      	mov	r4, r0
 8005502:	460d      	mov	r5, r1
 8005504:	f7fa ffe0 	bl	80004c8 <__aeabi_dmul>
 8005508:	a379      	add	r3, pc, #484	; (adr r3, 80056f0 <__ieee754_pow+0x6e8>)
 800550a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550e:	f7fa fe25 	bl	800015c <__adddf3>
 8005512:	4622      	mov	r2, r4
 8005514:	462b      	mov	r3, r5
 8005516:	f7fa ffd7 	bl	80004c8 <__aeabi_dmul>
 800551a:	a377      	add	r3, pc, #476	; (adr r3, 80056f8 <__ieee754_pow+0x6f0>)
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	f7fa fe1c 	bl	800015c <__adddf3>
 8005524:	4622      	mov	r2, r4
 8005526:	462b      	mov	r3, r5
 8005528:	f7fa ffce 	bl	80004c8 <__aeabi_dmul>
 800552c:	a374      	add	r3, pc, #464	; (adr r3, 8005700 <__ieee754_pow+0x6f8>)
 800552e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005532:	f7fa fe13 	bl	800015c <__adddf3>
 8005536:	4622      	mov	r2, r4
 8005538:	462b      	mov	r3, r5
 800553a:	f7fa ffc5 	bl	80004c8 <__aeabi_dmul>
 800553e:	a372      	add	r3, pc, #456	; (adr r3, 8005708 <__ieee754_pow+0x700>)
 8005540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005544:	f7fa fe0a 	bl	800015c <__adddf3>
 8005548:	4622      	mov	r2, r4
 800554a:	462b      	mov	r3, r5
 800554c:	f7fa ffbc 	bl	80004c8 <__aeabi_dmul>
 8005550:	a36f      	add	r3, pc, #444	; (adr r3, 8005710 <__ieee754_pow+0x708>)
 8005552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005556:	f7fa fe01 	bl	800015c <__adddf3>
 800555a:	4622      	mov	r2, r4
 800555c:	4606      	mov	r6, r0
 800555e:	460f      	mov	r7, r1
 8005560:	462b      	mov	r3, r5
 8005562:	4620      	mov	r0, r4
 8005564:	4629      	mov	r1, r5
 8005566:	f7fa ffaf 	bl	80004c8 <__aeabi_dmul>
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	4630      	mov	r0, r6
 8005570:	4639      	mov	r1, r7
 8005572:	f7fa ffa9 	bl	80004c8 <__aeabi_dmul>
 8005576:	4604      	mov	r4, r0
 8005578:	460d      	mov	r5, r1
 800557a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800557e:	4642      	mov	r2, r8
 8005580:	464b      	mov	r3, r9
 8005582:	f7fa fdeb 	bl	800015c <__adddf3>
 8005586:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800558a:	f7fa ff9d 	bl	80004c8 <__aeabi_dmul>
 800558e:	4622      	mov	r2, r4
 8005590:	462b      	mov	r3, r5
 8005592:	f7fa fde3 	bl	800015c <__adddf3>
 8005596:	4642      	mov	r2, r8
 8005598:	4606      	mov	r6, r0
 800559a:	460f      	mov	r7, r1
 800559c:	464b      	mov	r3, r9
 800559e:	4640      	mov	r0, r8
 80055a0:	4649      	mov	r1, r9
 80055a2:	f7fa ff91 	bl	80004c8 <__aeabi_dmul>
 80055a6:	2200      	movs	r2, #0
 80055a8:	4b67      	ldr	r3, [pc, #412]	; (8005748 <__ieee754_pow+0x740>)
 80055aa:	4682      	mov	sl, r0
 80055ac:	468b      	mov	fp, r1
 80055ae:	f7fa fdd5 	bl	800015c <__adddf3>
 80055b2:	4632      	mov	r2, r6
 80055b4:	463b      	mov	r3, r7
 80055b6:	f7fa fdd1 	bl	800015c <__adddf3>
 80055ba:	9c04      	ldr	r4, [sp, #16]
 80055bc:	460d      	mov	r5, r1
 80055be:	4622      	mov	r2, r4
 80055c0:	460b      	mov	r3, r1
 80055c2:	4640      	mov	r0, r8
 80055c4:	4649      	mov	r1, r9
 80055c6:	f7fa ff7f 	bl	80004c8 <__aeabi_dmul>
 80055ca:	2200      	movs	r2, #0
 80055cc:	4680      	mov	r8, r0
 80055ce:	4689      	mov	r9, r1
 80055d0:	4620      	mov	r0, r4
 80055d2:	4629      	mov	r1, r5
 80055d4:	4b5c      	ldr	r3, [pc, #368]	; (8005748 <__ieee754_pow+0x740>)
 80055d6:	f7fa fdbf 	bl	8000158 <__aeabi_dsub>
 80055da:	4652      	mov	r2, sl
 80055dc:	465b      	mov	r3, fp
 80055de:	f7fa fdbb 	bl	8000158 <__aeabi_dsub>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	4630      	mov	r0, r6
 80055e8:	4639      	mov	r1, r7
 80055ea:	f7fa fdb5 	bl	8000158 <__aeabi_dsub>
 80055ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055f2:	f7fa ff69 	bl	80004c8 <__aeabi_dmul>
 80055f6:	4622      	mov	r2, r4
 80055f8:	4606      	mov	r6, r0
 80055fa:	460f      	mov	r7, r1
 80055fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005600:	462b      	mov	r3, r5
 8005602:	f7fa ff61 	bl	80004c8 <__aeabi_dmul>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	4630      	mov	r0, r6
 800560c:	4639      	mov	r1, r7
 800560e:	f7fa fda5 	bl	800015c <__adddf3>
 8005612:	4606      	mov	r6, r0
 8005614:	460f      	mov	r7, r1
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	4640      	mov	r0, r8
 800561c:	4649      	mov	r1, r9
 800561e:	f7fa fd9d 	bl	800015c <__adddf3>
 8005622:	a33d      	add	r3, pc, #244	; (adr r3, 8005718 <__ieee754_pow+0x710>)
 8005624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005628:	9c04      	ldr	r4, [sp, #16]
 800562a:	460d      	mov	r5, r1
 800562c:	4620      	mov	r0, r4
 800562e:	f7fa ff4b 	bl	80004c8 <__aeabi_dmul>
 8005632:	4642      	mov	r2, r8
 8005634:	464b      	mov	r3, r9
 8005636:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800563a:	4620      	mov	r0, r4
 800563c:	4629      	mov	r1, r5
 800563e:	f7fa fd8b 	bl	8000158 <__aeabi_dsub>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	4630      	mov	r0, r6
 8005648:	4639      	mov	r1, r7
 800564a:	f7fa fd85 	bl	8000158 <__aeabi_dsub>
 800564e:	a334      	add	r3, pc, #208	; (adr r3, 8005720 <__ieee754_pow+0x718>)
 8005650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005654:	f7fa ff38 	bl	80004c8 <__aeabi_dmul>
 8005658:	a333      	add	r3, pc, #204	; (adr r3, 8005728 <__ieee754_pow+0x720>)
 800565a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565e:	4606      	mov	r6, r0
 8005660:	460f      	mov	r7, r1
 8005662:	4620      	mov	r0, r4
 8005664:	4629      	mov	r1, r5
 8005666:	f7fa ff2f 	bl	80004c8 <__aeabi_dmul>
 800566a:	4602      	mov	r2, r0
 800566c:	460b      	mov	r3, r1
 800566e:	4630      	mov	r0, r6
 8005670:	4639      	mov	r1, r7
 8005672:	f7fa fd73 	bl	800015c <__adddf3>
 8005676:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005678:	4b34      	ldr	r3, [pc, #208]	; (800574c <__ieee754_pow+0x744>)
 800567a:	4413      	add	r3, r2
 800567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005680:	f7fa fd6c 	bl	800015c <__adddf3>
 8005684:	4680      	mov	r8, r0
 8005686:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005688:	4689      	mov	r9, r1
 800568a:	f7fa feb3 	bl	80003f4 <__aeabi_i2d>
 800568e:	4604      	mov	r4, r0
 8005690:	460d      	mov	r5, r1
 8005692:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005694:	4b2e      	ldr	r3, [pc, #184]	; (8005750 <__ieee754_pow+0x748>)
 8005696:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800569a:	4413      	add	r3, r2
 800569c:	e9d3 6700 	ldrd	r6, r7, [r3]
 80056a0:	4642      	mov	r2, r8
 80056a2:	464b      	mov	r3, r9
 80056a4:	f7fa fd5a 	bl	800015c <__adddf3>
 80056a8:	4632      	mov	r2, r6
 80056aa:	463b      	mov	r3, r7
 80056ac:	f7fa fd56 	bl	800015c <__adddf3>
 80056b0:	4622      	mov	r2, r4
 80056b2:	462b      	mov	r3, r5
 80056b4:	f7fa fd52 	bl	800015c <__adddf3>
 80056b8:	f8dd a010 	ldr.w	sl, [sp, #16]
 80056bc:	4622      	mov	r2, r4
 80056be:	462b      	mov	r3, r5
 80056c0:	4650      	mov	r0, sl
 80056c2:	468b      	mov	fp, r1
 80056c4:	f7fa fd48 	bl	8000158 <__aeabi_dsub>
 80056c8:	4632      	mov	r2, r6
 80056ca:	463b      	mov	r3, r7
 80056cc:	f7fa fd44 	bl	8000158 <__aeabi_dsub>
 80056d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056d4:	f7fa fd40 	bl	8000158 <__aeabi_dsub>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	4640      	mov	r0, r8
 80056de:	4649      	mov	r1, r9
 80056e0:	e608      	b.n	80052f4 <__ieee754_pow+0x2ec>
 80056e2:	bf00      	nop
 80056e4:	f3af 8000 	nop.w
 80056e8:	4a454eef 	.word	0x4a454eef
 80056ec:	3fca7e28 	.word	0x3fca7e28
 80056f0:	93c9db65 	.word	0x93c9db65
 80056f4:	3fcd864a 	.word	0x3fcd864a
 80056f8:	a91d4101 	.word	0xa91d4101
 80056fc:	3fd17460 	.word	0x3fd17460
 8005700:	518f264d 	.word	0x518f264d
 8005704:	3fd55555 	.word	0x3fd55555
 8005708:	db6fabff 	.word	0xdb6fabff
 800570c:	3fdb6db6 	.word	0x3fdb6db6
 8005710:	33333303 	.word	0x33333303
 8005714:	3fe33333 	.word	0x3fe33333
 8005718:	e0000000 	.word	0xe0000000
 800571c:	3feec709 	.word	0x3feec709
 8005720:	dc3a03fd 	.word	0xdc3a03fd
 8005724:	3feec709 	.word	0x3feec709
 8005728:	145b01f5 	.word	0x145b01f5
 800572c:	be3e2fe0 	.word	0xbe3e2fe0
 8005730:	7ff00000 	.word	0x7ff00000
 8005734:	43400000 	.word	0x43400000
 8005738:	0003988e 	.word	0x0003988e
 800573c:	000bb679 	.word	0x000bb679
 8005740:	08005e70 	.word	0x08005e70
 8005744:	3ff00000 	.word	0x3ff00000
 8005748:	40080000 	.word	0x40080000
 800574c:	08005e90 	.word	0x08005e90
 8005750:	08005e80 	.word	0x08005e80
 8005754:	2601      	movs	r6, #1
 8005756:	e667      	b.n	8005428 <__ieee754_pow+0x420>
 8005758:	a39d      	add	r3, pc, #628	; (adr r3, 80059d0 <__ieee754_pow+0x9c8>)
 800575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575e:	4640      	mov	r0, r8
 8005760:	4649      	mov	r1, r9
 8005762:	f7fa fcfb 	bl	800015c <__adddf3>
 8005766:	4622      	mov	r2, r4
 8005768:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800576c:	462b      	mov	r3, r5
 800576e:	4650      	mov	r0, sl
 8005770:	4639      	mov	r1, r7
 8005772:	f7fa fcf1 	bl	8000158 <__aeabi_dsub>
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800577e:	f7fb f933 	bl	80009e8 <__aeabi_dcmpgt>
 8005782:	2800      	cmp	r0, #0
 8005784:	f47f ae01 	bne.w	800538a <__ieee754_pow+0x382>
 8005788:	4aa5      	ldr	r2, [pc, #660]	; (8005a20 <__ieee754_pow+0xa18>)
 800578a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800578e:	4293      	cmp	r3, r2
 8005790:	f340 8103 	ble.w	800599a <__ieee754_pow+0x992>
 8005794:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005798:	2000      	movs	r0, #0
 800579a:	151b      	asrs	r3, r3, #20
 800579c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80057a0:	fa4a f303 	asr.w	r3, sl, r3
 80057a4:	4433      	add	r3, r6
 80057a6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80057aa:	4f9e      	ldr	r7, [pc, #632]	; (8005a24 <__ieee754_pow+0xa1c>)
 80057ac:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80057b0:	4117      	asrs	r7, r2
 80057b2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80057b6:	ea23 0107 	bic.w	r1, r3, r7
 80057ba:	f1c2 0214 	rsb	r2, r2, #20
 80057be:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80057c2:	460b      	mov	r3, r1
 80057c4:	fa4a fa02 	asr.w	sl, sl, r2
 80057c8:	2e00      	cmp	r6, #0
 80057ca:	4602      	mov	r2, r0
 80057cc:	4629      	mov	r1, r5
 80057ce:	4620      	mov	r0, r4
 80057d0:	bfb8      	it	lt
 80057d2:	f1ca 0a00 	rsblt	sl, sl, #0
 80057d6:	f7fa fcbf 	bl	8000158 <__aeabi_dsub>
 80057da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057e2:	2400      	movs	r4, #0
 80057e4:	4642      	mov	r2, r8
 80057e6:	464b      	mov	r3, r9
 80057e8:	f7fa fcb8 	bl	800015c <__adddf3>
 80057ec:	a37a      	add	r3, pc, #488	; (adr r3, 80059d8 <__ieee754_pow+0x9d0>)
 80057ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f2:	4620      	mov	r0, r4
 80057f4:	460d      	mov	r5, r1
 80057f6:	f7fa fe67 	bl	80004c8 <__aeabi_dmul>
 80057fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057fe:	4606      	mov	r6, r0
 8005800:	460f      	mov	r7, r1
 8005802:	4620      	mov	r0, r4
 8005804:	4629      	mov	r1, r5
 8005806:	f7fa fca7 	bl	8000158 <__aeabi_dsub>
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	4640      	mov	r0, r8
 8005810:	4649      	mov	r1, r9
 8005812:	f7fa fca1 	bl	8000158 <__aeabi_dsub>
 8005816:	a372      	add	r3, pc, #456	; (adr r3, 80059e0 <__ieee754_pow+0x9d8>)
 8005818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581c:	f7fa fe54 	bl	80004c8 <__aeabi_dmul>
 8005820:	a371      	add	r3, pc, #452	; (adr r3, 80059e8 <__ieee754_pow+0x9e0>)
 8005822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005826:	4680      	mov	r8, r0
 8005828:	4689      	mov	r9, r1
 800582a:	4620      	mov	r0, r4
 800582c:	4629      	mov	r1, r5
 800582e:	f7fa fe4b 	bl	80004c8 <__aeabi_dmul>
 8005832:	4602      	mov	r2, r0
 8005834:	460b      	mov	r3, r1
 8005836:	4640      	mov	r0, r8
 8005838:	4649      	mov	r1, r9
 800583a:	f7fa fc8f 	bl	800015c <__adddf3>
 800583e:	4604      	mov	r4, r0
 8005840:	460d      	mov	r5, r1
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	4630      	mov	r0, r6
 8005848:	4639      	mov	r1, r7
 800584a:	f7fa fc87 	bl	800015c <__adddf3>
 800584e:	4632      	mov	r2, r6
 8005850:	463b      	mov	r3, r7
 8005852:	4680      	mov	r8, r0
 8005854:	4689      	mov	r9, r1
 8005856:	f7fa fc7f 	bl	8000158 <__aeabi_dsub>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	4620      	mov	r0, r4
 8005860:	4629      	mov	r1, r5
 8005862:	f7fa fc79 	bl	8000158 <__aeabi_dsub>
 8005866:	4642      	mov	r2, r8
 8005868:	4606      	mov	r6, r0
 800586a:	460f      	mov	r7, r1
 800586c:	464b      	mov	r3, r9
 800586e:	4640      	mov	r0, r8
 8005870:	4649      	mov	r1, r9
 8005872:	f7fa fe29 	bl	80004c8 <__aeabi_dmul>
 8005876:	a35e      	add	r3, pc, #376	; (adr r3, 80059f0 <__ieee754_pow+0x9e8>)
 8005878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587c:	4604      	mov	r4, r0
 800587e:	460d      	mov	r5, r1
 8005880:	f7fa fe22 	bl	80004c8 <__aeabi_dmul>
 8005884:	a35c      	add	r3, pc, #368	; (adr r3, 80059f8 <__ieee754_pow+0x9f0>)
 8005886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588a:	f7fa fc65 	bl	8000158 <__aeabi_dsub>
 800588e:	4622      	mov	r2, r4
 8005890:	462b      	mov	r3, r5
 8005892:	f7fa fe19 	bl	80004c8 <__aeabi_dmul>
 8005896:	a35a      	add	r3, pc, #360	; (adr r3, 8005a00 <__ieee754_pow+0x9f8>)
 8005898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589c:	f7fa fc5e 	bl	800015c <__adddf3>
 80058a0:	4622      	mov	r2, r4
 80058a2:	462b      	mov	r3, r5
 80058a4:	f7fa fe10 	bl	80004c8 <__aeabi_dmul>
 80058a8:	a357      	add	r3, pc, #348	; (adr r3, 8005a08 <__ieee754_pow+0xa00>)
 80058aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ae:	f7fa fc53 	bl	8000158 <__aeabi_dsub>
 80058b2:	4622      	mov	r2, r4
 80058b4:	462b      	mov	r3, r5
 80058b6:	f7fa fe07 	bl	80004c8 <__aeabi_dmul>
 80058ba:	a355      	add	r3, pc, #340	; (adr r3, 8005a10 <__ieee754_pow+0xa08>)
 80058bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c0:	f7fa fc4c 	bl	800015c <__adddf3>
 80058c4:	4622      	mov	r2, r4
 80058c6:	462b      	mov	r3, r5
 80058c8:	f7fa fdfe 	bl	80004c8 <__aeabi_dmul>
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4640      	mov	r0, r8
 80058d2:	4649      	mov	r1, r9
 80058d4:	f7fa fc40 	bl	8000158 <__aeabi_dsub>
 80058d8:	4604      	mov	r4, r0
 80058da:	460d      	mov	r5, r1
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	4640      	mov	r0, r8
 80058e2:	4649      	mov	r1, r9
 80058e4:	f7fa fdf0 	bl	80004c8 <__aeabi_dmul>
 80058e8:	2200      	movs	r2, #0
 80058ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058f2:	4620      	mov	r0, r4
 80058f4:	4629      	mov	r1, r5
 80058f6:	f7fa fc2f 	bl	8000158 <__aeabi_dsub>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005902:	f7fa ff0b 	bl	800071c <__aeabi_ddiv>
 8005906:	4632      	mov	r2, r6
 8005908:	4604      	mov	r4, r0
 800590a:	460d      	mov	r5, r1
 800590c:	463b      	mov	r3, r7
 800590e:	4640      	mov	r0, r8
 8005910:	4649      	mov	r1, r9
 8005912:	f7fa fdd9 	bl	80004c8 <__aeabi_dmul>
 8005916:	4632      	mov	r2, r6
 8005918:	463b      	mov	r3, r7
 800591a:	f7fa fc1f 	bl	800015c <__adddf3>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	4620      	mov	r0, r4
 8005924:	4629      	mov	r1, r5
 8005926:	f7fa fc17 	bl	8000158 <__aeabi_dsub>
 800592a:	4642      	mov	r2, r8
 800592c:	464b      	mov	r3, r9
 800592e:	f7fa fc13 	bl	8000158 <__aeabi_dsub>
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	2000      	movs	r0, #0
 8005938:	493b      	ldr	r1, [pc, #236]	; (8005a28 <__ieee754_pow+0xa20>)
 800593a:	f7fa fc0d 	bl	8000158 <__aeabi_dsub>
 800593e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005942:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005946:	da2b      	bge.n	80059a0 <__ieee754_pow+0x998>
 8005948:	4652      	mov	r2, sl
 800594a:	f000 f9b9 	bl	8005cc0 <scalbn>
 800594e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005952:	f7ff bbf2 	b.w	800513a <__ieee754_pow+0x132>
 8005956:	4b35      	ldr	r3, [pc, #212]	; (8005a2c <__ieee754_pow+0xa24>)
 8005958:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800595c:	429f      	cmp	r7, r3
 800595e:	f77f af13 	ble.w	8005788 <__ieee754_pow+0x780>
 8005962:	4b33      	ldr	r3, [pc, #204]	; (8005a30 <__ieee754_pow+0xa28>)
 8005964:	440b      	add	r3, r1
 8005966:	4303      	orrs	r3, r0
 8005968:	d00b      	beq.n	8005982 <__ieee754_pow+0x97a>
 800596a:	a32b      	add	r3, pc, #172	; (adr r3, 8005a18 <__ieee754_pow+0xa10>)
 800596c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005970:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005974:	f7fa fda8 	bl	80004c8 <__aeabi_dmul>
 8005978:	a327      	add	r3, pc, #156	; (adr r3, 8005a18 <__ieee754_pow+0xa10>)
 800597a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597e:	f7ff bbdc 	b.w	800513a <__ieee754_pow+0x132>
 8005982:	4622      	mov	r2, r4
 8005984:	462b      	mov	r3, r5
 8005986:	f7fa fbe7 	bl	8000158 <__aeabi_dsub>
 800598a:	4642      	mov	r2, r8
 800598c:	464b      	mov	r3, r9
 800598e:	f7fb f821 	bl	80009d4 <__aeabi_dcmpge>
 8005992:	2800      	cmp	r0, #0
 8005994:	f43f aef8 	beq.w	8005788 <__ieee754_pow+0x780>
 8005998:	e7e7      	b.n	800596a <__ieee754_pow+0x962>
 800599a:	f04f 0a00 	mov.w	sl, #0
 800599e:	e71e      	b.n	80057de <__ieee754_pow+0x7d6>
 80059a0:	4621      	mov	r1, r4
 80059a2:	e7d4      	b.n	800594e <__ieee754_pow+0x946>
 80059a4:	f04f 0b00 	mov.w	fp, #0
 80059a8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8005a28 <__ieee754_pow+0xa20>
 80059ac:	f7ff bbb0 	b.w	8005110 <__ieee754_pow+0x108>
 80059b0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80059b4:	f7ff bbac 	b.w	8005110 <__ieee754_pow+0x108>
 80059b8:	4638      	mov	r0, r7
 80059ba:	4641      	mov	r1, r8
 80059bc:	f7ff bbbf 	b.w	800513e <__ieee754_pow+0x136>
 80059c0:	9200      	str	r2, [sp, #0]
 80059c2:	f7ff bb7f 	b.w	80050c4 <__ieee754_pow+0xbc>
 80059c6:	2300      	movs	r3, #0
 80059c8:	f7ff bb69 	b.w	800509e <__ieee754_pow+0x96>
 80059cc:	f3af 8000 	nop.w
 80059d0:	652b82fe 	.word	0x652b82fe
 80059d4:	3c971547 	.word	0x3c971547
 80059d8:	00000000 	.word	0x00000000
 80059dc:	3fe62e43 	.word	0x3fe62e43
 80059e0:	fefa39ef 	.word	0xfefa39ef
 80059e4:	3fe62e42 	.word	0x3fe62e42
 80059e8:	0ca86c39 	.word	0x0ca86c39
 80059ec:	be205c61 	.word	0xbe205c61
 80059f0:	72bea4d0 	.word	0x72bea4d0
 80059f4:	3e663769 	.word	0x3e663769
 80059f8:	c5d26bf1 	.word	0xc5d26bf1
 80059fc:	3ebbbd41 	.word	0x3ebbbd41
 8005a00:	af25de2c 	.word	0xaf25de2c
 8005a04:	3f11566a 	.word	0x3f11566a
 8005a08:	16bebd93 	.word	0x16bebd93
 8005a0c:	3f66c16c 	.word	0x3f66c16c
 8005a10:	5555553e 	.word	0x5555553e
 8005a14:	3fc55555 	.word	0x3fc55555
 8005a18:	c2f8f359 	.word	0xc2f8f359
 8005a1c:	01a56e1f 	.word	0x01a56e1f
 8005a20:	3fe00000 	.word	0x3fe00000
 8005a24:	000fffff 	.word	0x000fffff
 8005a28:	3ff00000 	.word	0x3ff00000
 8005a2c:	4090cbff 	.word	0x4090cbff
 8005a30:	3f6f3400 	.word	0x3f6f3400

08005a34 <__ieee754_sqrt>:
 8005a34:	f8df c150 	ldr.w	ip, [pc, #336]	; 8005b88 <__ieee754_sqrt+0x154>
 8005a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a3c:	ea3c 0c01 	bics.w	ip, ip, r1
 8005a40:	460b      	mov	r3, r1
 8005a42:	4606      	mov	r6, r0
 8005a44:	460d      	mov	r5, r1
 8005a46:	460a      	mov	r2, r1
 8005a48:	4607      	mov	r7, r0
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	d10e      	bne.n	8005a6c <__ieee754_sqrt+0x38>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	f7fa fd3a 	bl	80004c8 <__aeabi_dmul>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4630      	mov	r0, r6
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	f7fa fb7e 	bl	800015c <__adddf3>
 8005a60:	4606      	mov	r6, r0
 8005a62:	460d      	mov	r5, r1
 8005a64:	4630      	mov	r0, r6
 8005a66:	4629      	mov	r1, r5
 8005a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a6c:	2900      	cmp	r1, #0
 8005a6e:	dc0d      	bgt.n	8005a8c <__ieee754_sqrt+0x58>
 8005a70:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005a74:	ea5c 0707 	orrs.w	r7, ip, r7
 8005a78:	d0f4      	beq.n	8005a64 <__ieee754_sqrt+0x30>
 8005a7a:	b139      	cbz	r1, 8005a8c <__ieee754_sqrt+0x58>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	f7fa fb6b 	bl	8000158 <__aeabi_dsub>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	f7fa fe49 	bl	800071c <__aeabi_ddiv>
 8005a8a:	e7e9      	b.n	8005a60 <__ieee754_sqrt+0x2c>
 8005a8c:	1512      	asrs	r2, r2, #20
 8005a8e:	d074      	beq.n	8005b7a <__ieee754_sqrt+0x146>
 8005a90:	2000      	movs	r0, #0
 8005a92:	07d5      	lsls	r5, r2, #31
 8005a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a98:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8005a9c:	bf5e      	ittt	pl
 8005a9e:	0fe3      	lsrpl	r3, r4, #31
 8005aa0:	0064      	lslpl	r4, r4, #1
 8005aa2:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8005aa6:	0fe3      	lsrs	r3, r4, #31
 8005aa8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005aac:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8005ab0:	2516      	movs	r5, #22
 8005ab2:	4601      	mov	r1, r0
 8005ab4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005ab8:	1076      	asrs	r6, r6, #1
 8005aba:	0064      	lsls	r4, r4, #1
 8005abc:	188f      	adds	r7, r1, r2
 8005abe:	429f      	cmp	r7, r3
 8005ac0:	bfde      	ittt	le
 8005ac2:	1bdb      	suble	r3, r3, r7
 8005ac4:	18b9      	addle	r1, r7, r2
 8005ac6:	1880      	addle	r0, r0, r2
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	3d01      	subs	r5, #1
 8005acc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005ad0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005ad4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005ad8:	d1f0      	bne.n	8005abc <__ieee754_sqrt+0x88>
 8005ada:	462a      	mov	r2, r5
 8005adc:	f04f 0e20 	mov.w	lr, #32
 8005ae0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8005ae4:	428b      	cmp	r3, r1
 8005ae6:	eb07 0c05 	add.w	ip, r7, r5
 8005aea:	dc02      	bgt.n	8005af2 <__ieee754_sqrt+0xbe>
 8005aec:	d113      	bne.n	8005b16 <__ieee754_sqrt+0xe2>
 8005aee:	45a4      	cmp	ip, r4
 8005af0:	d811      	bhi.n	8005b16 <__ieee754_sqrt+0xe2>
 8005af2:	f1bc 0f00 	cmp.w	ip, #0
 8005af6:	eb0c 0507 	add.w	r5, ip, r7
 8005afa:	da43      	bge.n	8005b84 <__ieee754_sqrt+0x150>
 8005afc:	2d00      	cmp	r5, #0
 8005afe:	db41      	blt.n	8005b84 <__ieee754_sqrt+0x150>
 8005b00:	f101 0801 	add.w	r8, r1, #1
 8005b04:	1a5b      	subs	r3, r3, r1
 8005b06:	4641      	mov	r1, r8
 8005b08:	45a4      	cmp	ip, r4
 8005b0a:	bf88      	it	hi
 8005b0c:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8005b10:	eba4 040c 	sub.w	r4, r4, ip
 8005b14:	443a      	add	r2, r7
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	f1be 0e01 	subs.w	lr, lr, #1
 8005b1c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005b20:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8005b24:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005b28:	d1dc      	bne.n	8005ae4 <__ieee754_sqrt+0xb0>
 8005b2a:	4323      	orrs	r3, r4
 8005b2c:	d006      	beq.n	8005b3c <__ieee754_sqrt+0x108>
 8005b2e:	1c54      	adds	r4, r2, #1
 8005b30:	bf0b      	itete	eq
 8005b32:	4672      	moveq	r2, lr
 8005b34:	3201      	addne	r2, #1
 8005b36:	3001      	addeq	r0, #1
 8005b38:	f022 0201 	bicne.w	r2, r2, #1
 8005b3c:	1043      	asrs	r3, r0, #1
 8005b3e:	07c1      	lsls	r1, r0, #31
 8005b40:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005b44:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005b48:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005b4c:	bf48      	it	mi
 8005b4e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005b52:	4610      	mov	r0, r2
 8005b54:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8005b58:	e782      	b.n	8005a60 <__ieee754_sqrt+0x2c>
 8005b5a:	0ae3      	lsrs	r3, r4, #11
 8005b5c:	3915      	subs	r1, #21
 8005b5e:	0564      	lsls	r4, r4, #21
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0fa      	beq.n	8005b5a <__ieee754_sqrt+0x126>
 8005b64:	02de      	lsls	r6, r3, #11
 8005b66:	d50a      	bpl.n	8005b7e <__ieee754_sqrt+0x14a>
 8005b68:	f1c2 0020 	rsb	r0, r2, #32
 8005b6c:	fa24 f000 	lsr.w	r0, r4, r0
 8005b70:	1e55      	subs	r5, r2, #1
 8005b72:	4094      	lsls	r4, r2
 8005b74:	4303      	orrs	r3, r0
 8005b76:	1b4a      	subs	r2, r1, r5
 8005b78:	e78a      	b.n	8005a90 <__ieee754_sqrt+0x5c>
 8005b7a:	4611      	mov	r1, r2
 8005b7c:	e7f0      	b.n	8005b60 <__ieee754_sqrt+0x12c>
 8005b7e:	005b      	lsls	r3, r3, #1
 8005b80:	3201      	adds	r2, #1
 8005b82:	e7ef      	b.n	8005b64 <__ieee754_sqrt+0x130>
 8005b84:	4688      	mov	r8, r1
 8005b86:	e7bd      	b.n	8005b04 <__ieee754_sqrt+0xd0>
 8005b88:	7ff00000 	.word	0x7ff00000

08005b8c <fabs>:
 8005b8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005b90:	4770      	bx	lr

08005b92 <finite>:
 8005b92:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8005b96:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005b9a:	0fc0      	lsrs	r0, r0, #31
 8005b9c:	4770      	bx	lr
	...

08005ba0 <nan>:
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	4901      	ldr	r1, [pc, #4]	; (8005ba8 <nan+0x8>)
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	7ff80000 	.word	0x7ff80000

08005bac <rint>:
 8005bac:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8005bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bb2:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 8005bb6:	2f13      	cmp	r7, #19
 8005bb8:	4602      	mov	r2, r0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	460c      	mov	r4, r1
 8005bbe:	4605      	mov	r5, r0
 8005bc0:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8005bc4:	dc59      	bgt.n	8005c7a <rint+0xce>
 8005bc6:	2f00      	cmp	r7, #0
 8005bc8:	da2a      	bge.n	8005c20 <rint+0x74>
 8005bca:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005bce:	4301      	orrs	r1, r0
 8005bd0:	d022      	beq.n	8005c18 <rint+0x6c>
 8005bd2:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8005bd6:	4301      	orrs	r1, r0
 8005bd8:	424d      	negs	r5, r1
 8005bda:	430d      	orrs	r5, r1
 8005bdc:	4936      	ldr	r1, [pc, #216]	; (8005cb8 <rint+0x10c>)
 8005bde:	0c5c      	lsrs	r4, r3, #17
 8005be0:	0b2d      	lsrs	r5, r5, #12
 8005be2:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 8005be6:	0464      	lsls	r4, r4, #17
 8005be8:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005bec:	ea45 0304 	orr.w	r3, r5, r4
 8005bf0:	e9d1 4500 	ldrd	r4, r5, [r1]
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	4629      	mov	r1, r5
 8005bf8:	f7fa fab0 	bl	800015c <__adddf3>
 8005bfc:	e9cd 0100 	strd	r0, r1, [sp]
 8005c00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c04:	462b      	mov	r3, r5
 8005c06:	4622      	mov	r2, r4
 8005c08:	f7fa faa6 	bl	8000158 <__aeabi_dsub>
 8005c0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005c10:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 8005c14:	4602      	mov	r2, r0
 8005c16:	460b      	mov	r3, r1
 8005c18:	4610      	mov	r0, r2
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	b003      	add	sp, #12
 8005c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c20:	4926      	ldr	r1, [pc, #152]	; (8005cbc <rint+0x110>)
 8005c22:	4139      	asrs	r1, r7
 8005c24:	ea03 0001 	and.w	r0, r3, r1
 8005c28:	4310      	orrs	r0, r2
 8005c2a:	d0f5      	beq.n	8005c18 <rint+0x6c>
 8005c2c:	084b      	lsrs	r3, r1, #1
 8005c2e:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 8005c32:	ea52 0501 	orrs.w	r5, r2, r1
 8005c36:	d00c      	beq.n	8005c52 <rint+0xa6>
 8005c38:	ea24 0303 	bic.w	r3, r4, r3
 8005c3c:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8005c40:	2f13      	cmp	r7, #19
 8005c42:	bf0c      	ite	eq
 8005c44:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8005c48:	2500      	movne	r5, #0
 8005c4a:	fa44 f707 	asr.w	r7, r4, r7
 8005c4e:	ea43 0407 	orr.w	r4, r3, r7
 8005c52:	4919      	ldr	r1, [pc, #100]	; (8005cb8 <rint+0x10c>)
 8005c54:	4623      	mov	r3, r4
 8005c56:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8005c5a:	462a      	mov	r2, r5
 8005c5c:	e9d6 4500 	ldrd	r4, r5, [r6]
 8005c60:	4620      	mov	r0, r4
 8005c62:	4629      	mov	r1, r5
 8005c64:	f7fa fa7a 	bl	800015c <__adddf3>
 8005c68:	e9cd 0100 	strd	r0, r1, [sp]
 8005c6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c70:	4622      	mov	r2, r4
 8005c72:	462b      	mov	r3, r5
 8005c74:	f7fa fa70 	bl	8000158 <__aeabi_dsub>
 8005c78:	e7cc      	b.n	8005c14 <rint+0x68>
 8005c7a:	2f33      	cmp	r7, #51	; 0x33
 8005c7c:	dd05      	ble.n	8005c8a <rint+0xde>
 8005c7e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8005c82:	d1c9      	bne.n	8005c18 <rint+0x6c>
 8005c84:	f7fa fa6a 	bl	800015c <__adddf3>
 8005c88:	e7c4      	b.n	8005c14 <rint+0x68>
 8005c8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005c8e:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8005c92:	fa21 f10c 	lsr.w	r1, r1, ip
 8005c96:	4208      	tst	r0, r1
 8005c98:	d0be      	beq.n	8005c18 <rint+0x6c>
 8005c9a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8005c9e:	bf18      	it	ne
 8005ca0:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8005ca4:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8005ca8:	bf1e      	ittt	ne
 8005caa:	ea20 0303 	bicne.w	r3, r0, r3
 8005cae:	fa45 fc0c 	asrne.w	ip, r5, ip
 8005cb2:	ea43 050c 	orrne.w	r5, r3, ip
 8005cb6:	e7cc      	b.n	8005c52 <rint+0xa6>
 8005cb8:	08005ea0 	.word	0x08005ea0
 8005cbc:	000fffff 	.word	0x000fffff

08005cc0 <scalbn>:
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8005cc6:	4604      	mov	r4, r0
 8005cc8:	460d      	mov	r5, r1
 8005cca:	4617      	mov	r7, r2
 8005ccc:	460b      	mov	r3, r1
 8005cce:	b996      	cbnz	r6, 8005cf6 <scalbn+0x36>
 8005cd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005cd4:	4303      	orrs	r3, r0
 8005cd6:	d039      	beq.n	8005d4c <scalbn+0x8c>
 8005cd8:	4b35      	ldr	r3, [pc, #212]	; (8005db0 <scalbn+0xf0>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f7fa fbf4 	bl	80004c8 <__aeabi_dmul>
 8005ce0:	4b34      	ldr	r3, [pc, #208]	; (8005db4 <scalbn+0xf4>)
 8005ce2:	4604      	mov	r4, r0
 8005ce4:	429f      	cmp	r7, r3
 8005ce6:	460d      	mov	r5, r1
 8005ce8:	da0f      	bge.n	8005d0a <scalbn+0x4a>
 8005cea:	a32d      	add	r3, pc, #180	; (adr r3, 8005da0 <scalbn+0xe0>)
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f7fa fbea 	bl	80004c8 <__aeabi_dmul>
 8005cf4:	e006      	b.n	8005d04 <scalbn+0x44>
 8005cf6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005cfa:	4296      	cmp	r6, r2
 8005cfc:	d10a      	bne.n	8005d14 <scalbn+0x54>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	f7fa fa2c 	bl	800015c <__adddf3>
 8005d04:	4604      	mov	r4, r0
 8005d06:	460d      	mov	r5, r1
 8005d08:	e020      	b.n	8005d4c <scalbn+0x8c>
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005d10:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8005d14:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8005d18:	19b9      	adds	r1, r7, r6
 8005d1a:	4291      	cmp	r1, r2
 8005d1c:	dd0e      	ble.n	8005d3c <scalbn+0x7c>
 8005d1e:	a322      	add	r3, pc, #136	; (adr r3, 8005da8 <scalbn+0xe8>)
 8005d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d24:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005d28:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8005d2c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8005d30:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8005d34:	4820      	ldr	r0, [pc, #128]	; (8005db8 <scalbn+0xf8>)
 8005d36:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8005d3a:	e7d9      	b.n	8005cf0 <scalbn+0x30>
 8005d3c:	2900      	cmp	r1, #0
 8005d3e:	dd08      	ble.n	8005d52 <scalbn+0x92>
 8005d40:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005d44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005d48:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	4629      	mov	r1, r5
 8005d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d52:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8005d56:	da16      	bge.n	8005d86 <scalbn+0xc6>
 8005d58:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005d5c:	429f      	cmp	r7, r3
 8005d5e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8005d62:	dd08      	ble.n	8005d76 <scalbn+0xb6>
 8005d64:	4c15      	ldr	r4, [pc, #84]	; (8005dbc <scalbn+0xfc>)
 8005d66:	4814      	ldr	r0, [pc, #80]	; (8005db8 <scalbn+0xf8>)
 8005d68:	f363 74df 	bfi	r4, r3, #31, #1
 8005d6c:	a30e      	add	r3, pc, #56	; (adr r3, 8005da8 <scalbn+0xe8>)
 8005d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d72:	4621      	mov	r1, r4
 8005d74:	e7bc      	b.n	8005cf0 <scalbn+0x30>
 8005d76:	4c12      	ldr	r4, [pc, #72]	; (8005dc0 <scalbn+0x100>)
 8005d78:	4812      	ldr	r0, [pc, #72]	; (8005dc4 <scalbn+0x104>)
 8005d7a:	f363 74df 	bfi	r4, r3, #31, #1
 8005d7e:	a308      	add	r3, pc, #32	; (adr r3, 8005da0 <scalbn+0xe0>)
 8005d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d84:	e7f5      	b.n	8005d72 <scalbn+0xb2>
 8005d86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005d8a:	3136      	adds	r1, #54	; 0x36
 8005d8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005d90:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005d94:	4620      	mov	r0, r4
 8005d96:	4629      	mov	r1, r5
 8005d98:	2200      	movs	r2, #0
 8005d9a:	4b0b      	ldr	r3, [pc, #44]	; (8005dc8 <scalbn+0x108>)
 8005d9c:	e7a8      	b.n	8005cf0 <scalbn+0x30>
 8005d9e:	bf00      	nop
 8005da0:	c2f8f359 	.word	0xc2f8f359
 8005da4:	01a56e1f 	.word	0x01a56e1f
 8005da8:	8800759c 	.word	0x8800759c
 8005dac:	7e37e43c 	.word	0x7e37e43c
 8005db0:	43500000 	.word	0x43500000
 8005db4:	ffff3cb0 	.word	0xffff3cb0
 8005db8:	8800759c 	.word	0x8800759c
 8005dbc:	7e37e43c 	.word	0x7e37e43c
 8005dc0:	01a56e1f 	.word	0x01a56e1f
 8005dc4:	c2f8f359 	.word	0xc2f8f359
 8005dc8:	3c900000 	.word	0x3c900000

08005dcc <_init>:
 8005dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dce:	bf00      	nop
 8005dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd2:	bc08      	pop	{r3}
 8005dd4:	469e      	mov	lr, r3
 8005dd6:	4770      	bx	lr

08005dd8 <_fini>:
 8005dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dda:	bf00      	nop
 8005ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dde:	bc08      	pop	{r3}
 8005de0:	469e      	mov	lr, r3
 8005de2:	4770      	bx	lr


Trabajo_FreeRTOS_sinRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000345c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003570  08003570  00013570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035d8  080035d8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080035d8  080035d8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035d8  080035d8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035d8  080035d8  000135d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035dc  080035dc  000135dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080035e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000078  08003658  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08003658  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c76  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e1  00000000  00000000  00028d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000658  00000000  00000000  0002a5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a0  00000000  00000000  0002ac50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013748  00000000  00000000  0002b1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000073b4  00000000  00000000  0003e938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000694e7  00000000  00000000  00045cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000af1d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bc8  00000000  00000000  000af228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08003554 	.word	0x08003554

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08003554 	.word	0x08003554

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <checkStatus>:
#define INITIAL_STATE 42374813  // Es mi DNI
#define TIME_SLEEP 250000


// ======================= Important functions =======================
void checkStatus(board_t* board){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	uint8_t isAlive = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 8; i++){
 8000a74:	2300      	movs	r3, #0
 8000a76:	73bb      	strb	r3, [r7, #14]
 8000a78:	e009      	b.n	8000a8e <checkStatus+0x26>
		if (board->num[i] != 0){
 8000a7a:	7bbb      	ldrb	r3, [r7, #14]
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	5cd3      	ldrb	r3, [r2, r3]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <checkStatus+0x20>
			isAlive = 1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 8; i++){
 8000a88:	7bbb      	ldrb	r3, [r7, #14]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	73bb      	strb	r3, [r7, #14]
 8000a8e:	7bbb      	ldrb	r3, [r7, #14]
 8000a90:	2b07      	cmp	r3, #7
 8000a92:	d9f2      	bls.n	8000a7a <checkStatus+0x12>
		}
	}

	if(!isAlive){
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d102      	bne.n	8000aa0 <checkStatus+0x38>
		generateBoard(board);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 f804 	bl	8000aa8 <generateBoard>
	}
}
 8000aa0:	bf00      	nop
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <generateBoard>:


void generateBoard(board_t* board){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
    uint8_t boardLine = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 0 ; i < 8; i++){
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	73fb      	strb	r3, [r7, #15]
 8000ab8:	e014      	b.n	8000ae4 <generateBoard+0x3c>
      boardLine = (uint8_t) xor32();
 8000aba:	f000 f8d7 	bl	8000c6c <xor32>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	73bb      	strb	r3, [r7, #14]
      board->num[i] = boardLine;
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	7bb9      	ldrb	r1, [r7, #14]
 8000ac8:	54d1      	strb	r1, [r2, r3]
      generateLine(boardLine, board->value[i]);
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	3301      	adds	r3, #1
 8000ace:	00db      	lsls	r3, r3, #3
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	441a      	add	r2, r3
 8000ad4:	7bbb      	ldrb	r3, [r7, #14]
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 f908 	bl	8000cee <generateLine>
    for (uint8_t i = 0 ; i < 8; i++){
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	2b07      	cmp	r3, #7
 8000ae8:	d9e7      	bls.n	8000aba <generateBoard+0x12>
    }

}
 8000aea:	bf00      	nop
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <updateBoard>:

void updateBoard(board_t* actualBoard, board_t* futureBoard){
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0 ; i < 8; i++){
 8000afe:	2300      	movs	r3, #0
 8000b00:	73fb      	strb	r3, [r7, #15]
 8000b02:	e02a      	b.n	8000b5a <updateBoard+0x66>
      for (uint8_t j = 0 ; j < 8; j++){
 8000b04:	2300      	movs	r3, #0
 8000b06:	73bb      	strb	r3, [r7, #14]
 8000b08:	e014      	b.n	8000b34 <updateBoard+0x40>
         // Acá estamos loopeando por cada pixel.
         futureBoard->value[i][j] = isAlive(actualBoard, i, j);
 8000b0a:	7bba      	ldrb	r2, [r7, #14]
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	4619      	mov	r1, r3
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f000 f82a 	bl	8000b6a <isAlive>
 8000b16:	4603      	mov	r3, r0
 8000b18:	4619      	mov	r1, r3
 8000b1a:	7bfa      	ldrb	r2, [r7, #15]
 8000b1c:	7bbb      	ldrb	r3, [r7, #14]
 8000b1e:	4608      	mov	r0, r1
 8000b20:	6839      	ldr	r1, [r7, #0]
 8000b22:	00d2      	lsls	r2, r2, #3
 8000b24:	440a      	add	r2, r1
 8000b26:	4413      	add	r3, r2
 8000b28:	3308      	adds	r3, #8
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	701a      	strb	r2, [r3, #0]
      for (uint8_t j = 0 ; j < 8; j++){
 8000b2e:	7bbb      	ldrb	r3, [r7, #14]
 8000b30:	3301      	adds	r3, #1
 8000b32:	73bb      	strb	r3, [r7, #14]
 8000b34:	7bbb      	ldrb	r3, [r7, #14]
 8000b36:	2b07      	cmp	r3, #7
 8000b38:	d9e7      	bls.n	8000b0a <updateBoard+0x16>
      }
      futureBoard->num[i] = bin2dec(futureBoard->value[i]); //After updating the bit fields, we also update the uint8_t value.
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	683a      	ldr	r2, [r7, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	7bfc      	ldrb	r4, [r7, #15]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f900 	bl	8000d4c <bin2dec>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	461a      	mov	r2, r3
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	551a      	strb	r2, [r3, r4]
    for (uint8_t i = 0 ; i < 8; i++){
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	3301      	adds	r3, #1
 8000b58:	73fb      	strb	r3, [r7, #15]
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	2b07      	cmp	r3, #7
 8000b5e:	d9d1      	bls.n	8000b04 <updateBoard+0x10>
    }
}
 8000b60:	bf00      	nop
 8000b62:	bf00      	nop
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd90      	pop	{r4, r7, pc}

08000b6a <isAlive>:

_Bool isAlive(board_t* board, uint8_t y, uint8_t x){
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b084      	sub	sp, #16
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	460b      	mov	r3, r1
 8000b74:	70fb      	strb	r3, [r7, #3]
 8000b76:	4613      	mov	r3, r2
 8000b78:	70bb      	strb	r3, [r7, #2]
    _Bool outputState = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	73fb      	strb	r3, [r7, #15]
    uint8_t neighbors_count = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	73bb      	strb	r3, [r7, #14]
    uint8_t neiY;
    uint8_t neiX;
    int8_t i;
    int8_t j;

    for (i = -1 ; i <= 1; i++){
 8000b82:	23ff      	movs	r3, #255	; 0xff
 8000b84:	737b      	strb	r3, [r7, #13]
 8000b86:	e039      	b.n	8000bfc <isAlive+0x92>
        neiY = checkBorder(y + i);
 8000b88:	7b7a      	ldrb	r2, [r7, #13]
 8000b8a:	78fb      	ldrb	r3, [r7, #3]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	b25b      	sxtb	r3, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 f850 	bl	8000c38 <checkBorder>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	72fb      	strb	r3, [r7, #11]
        for (j = -1 ; j <= 1; j++){
 8000b9c:	23ff      	movs	r3, #255	; 0xff
 8000b9e:	733b      	strb	r3, [r7, #12]
 8000ba0:	e022      	b.n	8000be8 <isAlive+0x7e>
            neiX = checkBorder(x + j);
 8000ba2:	7b3a      	ldrb	r2, [r7, #12]
 8000ba4:	78bb      	ldrb	r3, [r7, #2]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	b25b      	sxtb	r3, r3
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f843 	bl	8000c38 <checkBorder>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	72bb      	strb	r3, [r7, #10]
            if (i != 0 || j != 0){    // I check all the neighbors excepting the actual pixel
 8000bb6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d103      	bne.n	8000bc6 <isAlive+0x5c>
 8000bbe:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d00a      	beq.n	8000bdc <isAlive+0x72>
                neighbors_count += board->value[neiY][neiX];
 8000bc6:	7afa      	ldrb	r2, [r7, #11]
 8000bc8:	7abb      	ldrb	r3, [r7, #10]
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	00d2      	lsls	r2, r2, #3
 8000bce:	440a      	add	r2, r1
 8000bd0:	4413      	add	r3, r2
 8000bd2:	3308      	adds	r3, #8
 8000bd4:	781a      	ldrb	r2, [r3, #0]
 8000bd6:	7bbb      	ldrb	r3, [r7, #14]
 8000bd8:	4413      	add	r3, r2
 8000bda:	73bb      	strb	r3, [r7, #14]
        for (j = -1 ; j <= 1; j++){
 8000bdc:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	3301      	adds	r3, #1
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	733b      	strb	r3, [r7, #12]
 8000be8:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	ddd8      	ble.n	8000ba2 <isAlive+0x38>
    for (i = -1 ; i <= 1; i++){
 8000bf0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	737b      	strb	r3, [r7, #13]
 8000bfc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	ddc1      	ble.n	8000b88 <isAlive+0x1e>
            }
        }
    }

    if (neighbors_count == 3){
 8000c04:	7bbb      	ldrb	r3, [r7, #14]
 8000c06:	2b03      	cmp	r3, #3
 8000c08:	d102      	bne.n	8000c10 <isAlive+0xa6>
        // Se reproduce o se mantiene
        outputState = 1;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	73fb      	strb	r3, [r7, #15]
 8000c0e:	e00e      	b.n	8000c2e <isAlive+0xc4>
    }else if (neighbors_count == 2 && board->value[y][x] == 1){
 8000c10:	7bbb      	ldrb	r3, [r7, #14]
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d10b      	bne.n	8000c2e <isAlive+0xc4>
 8000c16:	78fa      	ldrb	r2, [r7, #3]
 8000c18:	78bb      	ldrb	r3, [r7, #2]
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	00d2      	lsls	r2, r2, #3
 8000c1e:	440a      	add	r2, r1
 8000c20:	4413      	add	r3, r2
 8000c22:	3308      	adds	r3, #8
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d101      	bne.n	8000c2e <isAlive+0xc4>
        // Si está viva, sigue viva
        outputState = 1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	73fb      	strb	r3, [r7, #15]
    }

    return outputState;
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <checkBorder>:

uint8_t checkBorder(int8_t index){
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
    uint8_t output = index;
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	73fb      	strb	r3, [r7, #15]

    if (index < 0){
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	da02      	bge.n	8000c54 <checkBorder+0x1c>
        output = 8-1;
 8000c4e:	2307      	movs	r3, #7
 8000c50:	73fb      	strb	r3, [r7, #15]
 8000c52:	e005      	b.n	8000c60 <checkBorder+0x28>
    }else if (index > 8-1){
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	2b07      	cmp	r3, #7
 8000c5a:	dd01      	ble.n	8000c60 <checkBorder+0x28>
        output = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73fb      	strb	r3, [r7, #15]
    } // else : output = index
    return output;
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <xor32>:

// ======================= Small - functions =======================
uint32_t xor32(void){
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
	static uint32_t y = INITIAL_STATE;
	y^= y<<13;
 8000c70:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <xor32+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	035a      	lsls	r2, r3, #13
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <xor32+0x40>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4053      	eors	r3, r2
 8000c7c:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <xor32+0x40>)
 8000c7e:	6013      	str	r3, [r2, #0]
	y^= y>>17;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <xor32+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	0c5a      	lsrs	r2, r3, #17
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <xor32+0x40>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4053      	eors	r3, r2
 8000c8c:	4a07      	ldr	r2, [pc, #28]	; (8000cac <xor32+0x40>)
 8000c8e:	6013      	str	r3, [r2, #0]
	y^= y<<5;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <xor32+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	015a      	lsls	r2, r3, #5
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <xor32+0x40>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4053      	eors	r3, r2
 8000c9c:	4a03      	ldr	r2, [pc, #12]	; (8000cac <xor32+0x40>)
 8000c9e:	6013      	str	r3, [r2, #0]
	return y;
 8000ca0:	4b02      	ldr	r3, [pc, #8]	; (8000cac <xor32+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	20000000 	.word	0x20000000

08000cb0 <clearBoard>:

void clearBoard(board_t* board){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0 ; i < 8; i++){
 8000cb8:	2300      	movs	r3, #0
 8000cba:	73fb      	strb	r3, [r7, #15]
 8000cbc:	e00f      	b.n	8000cde <clearBoard+0x2e>
	      board->num[i] = 0;
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	54d1      	strb	r1, [r2, r3]
	      generateLine(0, board->value[i]);
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f000 f80b 	bl	8000cee <generateLine>
	for (uint8_t i = 0 ; i < 8; i++){
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	73fb      	strb	r3, [r7, #15]
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	2b07      	cmp	r3, #7
 8000ce2:	d9ec      	bls.n	8000cbe <clearBoard+0xe>
	    }
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <generateLine>:

void generateLine(uint8_t input, uint8_t* output){
 8000cee:	b480      	push	{r7}
 8000cf0:	b085      	sub	sp, #20
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	6039      	str	r1, [r7, #0]
 8000cf8:	71fb      	strb	r3, [r7, #7]
	int8_t i;
    for(i = 8-1; i >= 0; i--){
 8000cfa:	2307      	movs	r3, #7
 8000cfc:	73fb      	strb	r3, [r7, #15]
 8000cfe:	e01b      	b.n	8000d38 <generateLine+0x4a>
      if((input & (1 << i))){
 8000d00:	79fa      	ldrb	r2, [r7, #7]
 8000d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d06:	fa42 f303 	asr.w	r3, r2, r3
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d006      	beq.n	8000d20 <generateLine+0x32>
        output[i] = 1;
 8000d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d16:	683a      	ldr	r2, [r7, #0]
 8000d18:	4413      	add	r3, r2
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	701a      	strb	r2, [r3, #0]
 8000d1e:	e005      	b.n	8000d2c <generateLine+0x3e>
      }else{
        output[i] = 0;
 8000d20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d24:	683a      	ldr	r2, [r7, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
    for(i = 8-1; i >= 0; i--){
 8000d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	3b01      	subs	r3, #1
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	73fb      	strb	r3, [r7, #15]
 8000d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	dadf      	bge.n	8000d00 <generateLine+0x12>
      }
    }
}
 8000d40:	bf00      	nop
 8000d42:	bf00      	nop
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <bin2dec>:

uint8_t bin2dec(uint8_t* input){
 8000d4c:	b5b0      	push	{r4, r5, r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
    uint8_t output = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]
    for(int8_t i = 8-1; i >= 0; i--){
 8000d58:	2307      	movs	r3, #7
 8000d5a:	73bb      	strb	r3, [r7, #14]
 8000d5c:	e02d      	b.n	8000dba <bin2dec+0x6e>
      if(input[i]){
 8000d5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d020      	beq.n	8000dae <bin2dec+0x62>
        output += pow(2, i);
 8000d6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fb3f 	bl	80003f4 <__aeabi_i2d>
 8000d76:	4602      	mov	r2, r0
 8000d78:	460b      	mov	r3, r1
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000d82:	f001 fc59 	bl	8002638 <pow>
 8000d86:	4604      	mov	r4, r0
 8000d88:	460d      	mov	r5, r1
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fb31 	bl	80003f4 <__aeabi_i2d>
 8000d92:	4602      	mov	r2, r0
 8000d94:	460b      	mov	r3, r1
 8000d96:	4620      	mov	r0, r4
 8000d98:	4629      	mov	r1, r5
 8000d9a:	f7ff f9df 	bl	800015c <__adddf3>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	460b      	mov	r3, r1
 8000da2:	4610      	mov	r0, r2
 8000da4:	4619      	mov	r1, r3
 8000da6:	f7ff fe3f 	bl	8000a28 <__aeabi_d2uiz>
 8000daa:	4603      	mov	r3, r0
 8000dac:	73fb      	strb	r3, [r7, #15]
    for(int8_t i = 8-1; i >= 0; i--){
 8000dae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	3b01      	subs	r3, #1
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	73bb      	strb	r3, [r7, #14]
 8000dba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	dacd      	bge.n	8000d5e <bin2dec+0x12>
      }
    }
    return output;
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bdb0      	pop	{r4, r5, r7, pc}

08000dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b0a6      	sub	sp, #152	; 0x98
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000dd2:	f000 fae5 	bl	80013a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
	SystemClock_Config();
 8000dd6:	f000 f83f 	bl	8000e58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000dda:	f000 f8bb 	bl	8000f54 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000dde:	f000 f881 	bl	8000ee4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	for(i=0;i<1000000;i++);
 8000de2:	2300      	movs	r3, #0
 8000de4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000de8:	e004      	b.n	8000df4 <main+0x28>
 8000dea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000dee:	3301      	adds	r3, #1
 8000df0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000df4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000df8:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <main+0x80>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	ddf5      	ble.n	8000dea <main+0x1e>
	inicializar_max7219(&hspi1, GPIOA, GPIO_PIN_4);
 8000dfe:	2210      	movs	r2, #16
 8000e00:	4913      	ldr	r1, [pc, #76]	; (8000e50 <main+0x84>)
 8000e02:	4814      	ldr	r0, [pc, #80]	; (8000e54 <main+0x88>)
 8000e04:	f000 f99a 	bl	800113c <inicializar_max7219>

	clearBoard(&actualBoard);
 8000e08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff4f 	bl	8000cb0 <clearBoard>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		checkStatus(&actualBoard);
 8000e12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fe26 	bl	8000a68 <checkStatus>

		tarea_matriz(&actualBoard);
 8000e1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 f8f7 	bl	8001014 <tarea_matriz>
		updateBoard(&actualBoard, &futureBoard);
 8000e26:	1d3a      	adds	r2, r7, #4
 8000e28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fe60 	bl	8000af4 <updateBoard>
		actualBoard = futureBoard;
 8000e34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e38:	1d39      	adds	r1, r7, #4
 8000e3a:	2248      	movs	r2, #72	; 0x48
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 fbe5 	bl	800260c <memcpy>
		HAL_Delay(250);
 8000e42:	20fa      	movs	r0, #250	; 0xfa
 8000e44:	f000 fb0e 	bl	8001464 <HAL_Delay>
		checkStatus(&actualBoard);
 8000e48:	e7e3      	b.n	8000e12 <main+0x46>
 8000e4a:	bf00      	nop
 8000e4c:	000f423f 	.word	0x000f423f
 8000e50:	40010800 	.word	0x40010800
 8000e54:	200000a8 	.word	0x200000a8

08000e58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b090      	sub	sp, #64	; 0x40
 8000e5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5e:	f107 0318 	add.w	r3, r7, #24
 8000e62:	2228      	movs	r2, #40	; 0x28
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 fbde 	bl	8002628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e96:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9c:	f107 0318 	add.w	r3, r7, #24
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 fd83 	bl	80019ac <HAL_RCC_OscConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000eac:	f000 f8d2 	bl	8001054 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb0:	230f      	movs	r3, #15
 8000eb2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2102      	movs	r1, #2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 ffee 	bl	8001eac <HAL_RCC_ClockConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ed6:	f000 f8bd 	bl	8001054 <Error_Handler>
  }
}
 8000eda:	bf00      	nop
 8000edc:	3740      	adds	r7, #64	; 0x40
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <MX_SPI1_Init+0x68>)
 8000eea:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <MX_SPI1_Init+0x6c>)
 8000eec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eee:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <MX_SPI1_Init+0x68>)
 8000ef0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ef4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <MX_SPI1_Init+0x68>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <MX_SPI1_Init+0x68>)
 8000efe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_SPI1_Init+0x68>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <MX_SPI1_Init+0x68>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_SPI1_Init+0x68>)
 8000f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_SPI1_Init+0x68>)
 8000f1a:	2218      	movs	r2, #24
 8000f1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <MX_SPI1_Init+0x68>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_SPI1_Init+0x68>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <MX_SPI1_Init+0x68>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_SPI1_Init+0x68>)
 8000f32:	220a      	movs	r2, #10
 8000f34:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_SPI1_Init+0x68>)
 8000f38:	f001 f920 	bl	800217c <HAL_SPI_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000f42:	f000 f887 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200000a8 	.word	0x200000a8
 8000f50:	40013000 	.word	0x40013000

08000f54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5a:	f107 0310 	add.w	r3, r7, #16
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f68:	4b27      	ldr	r3, [pc, #156]	; (8001008 <MX_GPIO_Init+0xb4>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a26      	ldr	r2, [pc, #152]	; (8001008 <MX_GPIO_Init+0xb4>)
 8000f6e:	f043 0310 	orr.w	r3, r3, #16
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <MX_GPIO_Init+0xb4>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f003 0310 	and.w	r3, r3, #16
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f80:	4b21      	ldr	r3, [pc, #132]	; (8001008 <MX_GPIO_Init+0xb4>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a20      	ldr	r2, [pc, #128]	; (8001008 <MX_GPIO_Init+0xb4>)
 8000f86:	f043 0320 	orr.w	r3, r3, #32
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <MX_GPIO_Init+0xb4>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0320 	and.w	r3, r3, #32
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <MX_GPIO_Init+0xb4>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <MX_GPIO_Init+0xb4>)
 8000f9e:	f043 0304 	orr.w	r3, r3, #4
 8000fa2:	6193      	str	r3, [r2, #24]
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <MX_GPIO_Init+0xb4>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb6:	4815      	ldr	r0, [pc, #84]	; (800100c <MX_GPIO_Init+0xb8>)
 8000fb8:	f000 fce0 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2110      	movs	r1, #16
 8000fc0:	4813      	ldr	r0, [pc, #76]	; (8001010 <MX_GPIO_Init+0xbc>)
 8000fc2:	f000 fcdb 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480b      	ldr	r0, [pc, #44]	; (800100c <MX_GPIO_Init+0xb8>)
 8000fe0:	f000 fb48 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <MX_GPIO_Init+0xbc>)
 8000ffc:	f000 fb3a 	bl	8001674 <HAL_GPIO_Init>

}
 8001000:	bf00      	nop
 8001002:	3720      	adds	r7, #32
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40021000 	.word	0x40021000
 800100c:	40011000 	.word	0x40011000
 8001010:	40010800 	.word	0x40010800

08001014 <tarea_matriz>:

/* USER CODE BEGIN 4 */
void tarea_matriz(board_t* board)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	int i;
	static uint8_t pantalla[8] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

	for(i=0;i<8;i++) {
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	e00b      	b.n	800103a <tarea_matriz+0x26>
		pantalla[i] = board->num[i];	// Escribe el contenido de la nueva pantalla.
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4413      	add	r3, r2
 8001028:	7819      	ldrb	r1, [r3, #0]
 800102a:	4a09      	ldr	r2, [pc, #36]	; (8001050 <tarea_matriz+0x3c>)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4413      	add	r3, r2
 8001030:	460a      	mov	r2, r1
 8001032:	701a      	strb	r2, [r3, #0]
	for(i=0;i<8;i++) {
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3301      	adds	r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2b07      	cmp	r3, #7
 800103e:	ddf0      	ble.n	8001022 <tarea_matriz+0xe>
	}
	dibujar_max7219(pantalla);
 8001040:	4803      	ldr	r0, [pc, #12]	; (8001050 <tarea_matriz+0x3c>)
 8001042:	f000 f85e 	bl	8001102 <dibujar_max7219>
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000094 	.word	0x20000094

08001054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <comando>:
static SPI_HandleTypeDef *spi_handler;
static GPIO_TypeDef *gpio_cs;
static uint16_t pin_cs;

static void comando(uint32_t address, uint32_t data)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
	uint16_t datoSerie;
	datoSerie = ((address & 0x0F) << 8) | (data & 0xFF);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	b29b      	uxth	r3, r3
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b29b      	uxth	r3, r3
 8001072:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001076:	b29a      	uxth	r2, r3
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b29b      	uxth	r3, r3
 800107c:	b2db      	uxtb	r3, r3
 800107e:	b29b      	uxth	r3, r3
 8001080:	4313      	orrs	r3, r2
 8001082:	b29b      	uxth	r3, r3
 8001084:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(gpio_cs, pin_cs, GPIO_PIN_RESET);
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <comando+0x60>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <comando+0x64>)
 800108c:	8811      	ldrh	r1, [r2, #0]
 800108e:	2200      	movs	r2, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f000 fc73 	bl	800197c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_handler, (void*) &datoSerie, 1, 10);
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <comando+0x68>)
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	f107 010e 	add.w	r1, r7, #14
 800109e:	230a      	movs	r3, #10
 80010a0:	2201      	movs	r2, #1
 80010a2:	f001 f8cc 	bl	800223e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(gpio_cs, pin_cs, GPIO_PIN_SET);
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <comando+0x60>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <comando+0x64>)
 80010ac:	8811      	ldrh	r1, [r2, #0]
 80010ae:	2201      	movs	r2, #1
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 fc63 	bl	800197c <HAL_GPIO_WritePin>
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200000a0 	.word	0x200000a0
 80010c4:	200000a4 	.word	0x200000a4
 80010c8:	2000009c 	.word	0x2000009c

080010cc <llenar_max7219>:

void llenar_max7219(uint8_t dato)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
	int i;
	for (i = 0; i < 8; i++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	e00a      	b.n	80010f2 <llenar_max7219+0x26>
		comando(i + 1, dato);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	3301      	adds	r3, #1
 80010e0:	461a      	mov	r2, r3
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	4619      	mov	r1, r3
 80010e6:	4610      	mov	r0, r2
 80010e8:	f7ff ffba 	bl	8001060 <comando>
	for (i = 0; i < 8; i++)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3301      	adds	r3, #1
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2b07      	cmp	r3, #7
 80010f6:	ddf1      	ble.n	80010dc <llenar_max7219+0x10>
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <dibujar_max7219>:

void dibujar_max7219(uint8_t *datos)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < 8; i++)
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	e00c      	b.n	800112a <dibujar_max7219+0x28>
		comando(i + 1, datos[i]);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	3301      	adds	r3, #1
 8001114:	4618      	mov	r0, r3
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	4413      	add	r3, r2
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	4619      	mov	r1, r3
 8001120:	f7ff ff9e 	bl	8001060 <comando>
	for (i = 0; i < 8; i++)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	3301      	adds	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2b07      	cmp	r3, #7
 800112e:	ddef      	ble.n	8001110 <dibujar_max7219+0xe>
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <inicializar_max7219>:

void inicializar_max7219(SPI_HandleTypeDef *spi, GPIO_TypeDef *GPIO_cs,
		uint16_t GPIO_Pin_cs)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	4613      	mov	r3, r2
 8001148:	80fb      	strh	r3, [r7, #6]
	spi_handler = spi;
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <inicializar_max7219+0x58>)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6013      	str	r3, [r2, #0]
	gpio_cs = GPIO_cs;
 8001150:	4a11      	ldr	r2, [pc, #68]	; (8001198 <inicializar_max7219+0x5c>)
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	6013      	str	r3, [r2, #0]
	pin_cs = GPIO_Pin_cs;
 8001156:	4a11      	ldr	r2, [pc, #68]	; (800119c <inicializar_max7219+0x60>)
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	8013      	strh	r3, [r2, #0]

	comando(0x0C, 0x01);	//Enciendo
 800115c:	2101      	movs	r1, #1
 800115e:	200c      	movs	r0, #12
 8001160:	f7ff ff7e 	bl	8001060 <comando>
	comando(0x0F, 0x00);	//Salgo de modoTest
 8001164:	2100      	movs	r1, #0
 8001166:	200f      	movs	r0, #15
 8001168:	f7ff ff7a 	bl	8001060 <comando>
	comando(0x09, 0x00);	//Sin decodificar
 800116c:	2100      	movs	r1, #0
 800116e:	2009      	movs	r0, #9
 8001170:	f7ff ff76 	bl	8001060 <comando>
	comando(0x0B, 0x07);	//Muestro todas las lineas.
 8001174:	2107      	movs	r1, #7
 8001176:	200b      	movs	r0, #11
 8001178:	f7ff ff72 	bl	8001060 <comando>
	comando(0x0A, 0x01);	//Intensidad
 800117c:	2101      	movs	r1, #1
 800117e:	200a      	movs	r0, #10
 8001180:	f7ff ff6e 	bl	8001060 <comando>
	llenar_max7219(0x00);	//Borro la pantalla.
 8001184:	2000      	movs	r0, #0
 8001186:	f7ff ffa1 	bl	80010cc <llenar_max7219>

}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	2000009c 	.word	0x2000009c
 8001198:	200000a0 	.word	0x200000a0
 800119c:	200000a4 	.word	0x200000a4

080011a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_MspInit+0x5c>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	4a14      	ldr	r2, [pc, #80]	; (80011fc <HAL_MspInit+0x5c>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6193      	str	r3, [r2, #24]
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_MspInit+0x5c>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_MspInit+0x5c>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <HAL_MspInit+0x5c>)
 80011c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c8:	61d3      	str	r3, [r2, #28]
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_MspInit+0x5c>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_MspInit+0x60>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <HAL_MspInit+0x60>)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	40021000 	.word	0x40021000
 8001200:	40010000 	.word	0x40010000

08001204 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a1b      	ldr	r2, [pc, #108]	; (800128c <HAL_SPI_MspInit+0x88>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d12f      	bne.n	8001284 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001224:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <HAL_SPI_MspInit+0x8c>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a19      	ldr	r2, [pc, #100]	; (8001290 <HAL_SPI_MspInit+0x8c>)
 800122a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <HAL_SPI_MspInit+0x8c>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <HAL_SPI_MspInit+0x8c>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a13      	ldr	r2, [pc, #76]	; (8001290 <HAL_SPI_MspInit+0x8c>)
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <HAL_SPI_MspInit+0x8c>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001254:	23a0      	movs	r3, #160	; 0xa0
 8001256:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	4619      	mov	r1, r3
 8001266:	480b      	ldr	r0, [pc, #44]	; (8001294 <HAL_SPI_MspInit+0x90>)
 8001268:	f000 fa04 	bl	8001674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800126c:	2340      	movs	r3, #64	; 0x40
 800126e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	4619      	mov	r1, r3
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <HAL_SPI_MspInit+0x90>)
 8001280:	f000 f9f8 	bl	8001674 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001284:	bf00      	nop
 8001286:	3720      	adds	r7, #32
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40013000 	.word	0x40013000
 8001290:	40021000 	.word	0x40021000
 8001294:	40010800 	.word	0x40010800

08001298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <HardFault_Handler+0x4>

080012aa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ae:	e7fe      	b.n	80012ae <MemManage_Handler+0x4>

080012b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <BusFault_Handler+0x4>

080012b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <UsageFault_Handler+0x4>

080012bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e4:	f000 f8a2 	bl	800142c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}

080012ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <SystemInit+0x5c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a14      	ldr	r2, [pc, #80]	; (8001348 <SystemInit+0x5c>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <SystemInit+0x5c>)
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	4911      	ldr	r1, [pc, #68]	; (8001348 <SystemInit+0x5c>)
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <SystemInit+0x60>)
 8001304:	4013      	ands	r3, r2
 8001306:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <SystemInit+0x5c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <SystemInit+0x5c>)
 800130e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001316:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <SystemInit+0x5c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <SystemInit+0x5c>)
 800131e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001322:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <SystemInit+0x5c>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	4a07      	ldr	r2, [pc, #28]	; (8001348 <SystemInit+0x5c>)
 800132a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800132e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <SystemInit+0x5c>)
 8001332:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001336:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <SystemInit+0x64>)
 800133a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800133e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	40021000 	.word	0x40021000
 800134c:	f8ff0000 	.word	0xf8ff0000
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001354:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001356:	e003      	b.n	8001360 <LoopCopyDataInit>

08001358 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800135a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800135c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800135e:	3104      	adds	r1, #4

08001360 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001360:	480a      	ldr	r0, [pc, #40]	; (800138c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001364:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001366:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001368:	d3f6      	bcc.n	8001358 <CopyDataInit>
  ldr r2, =_sbss
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800136c:	e002      	b.n	8001374 <LoopFillZerobss>

0800136e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001370:	f842 3b04 	str.w	r3, [r2], #4

08001374 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001376:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001378:	d3f9      	bcc.n	800136e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800137a:	f7ff ffb7 	bl	80012ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800137e:	f001 f921 	bl	80025c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001382:	f7ff fd23 	bl	8000dcc <main>
  bx lr
 8001386:	4770      	bx	lr
  ldr r3, =_sidata
 8001388:	080035e0 	.word	0x080035e0
  ldr r0, =_sdata
 800138c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001390:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8001394:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8001398:	20000104 	.word	0x20000104

0800139c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800139c:	e7fe      	b.n	800139c <ADC1_2_IRQHandler>
	...

080013a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_Init+0x28>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <HAL_Init+0x28>)
 80013aa:	f043 0310 	orr.w	r3, r3, #16
 80013ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b0:	2003      	movs	r0, #3
 80013b2:	f000 f92b 	bl	800160c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b6:	2000      	movs	r0, #0
 80013b8:	f000 f808 	bl	80013cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013bc:	f7ff fef0 	bl	80011a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40022000 	.word	0x40022000

080013cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_InitTick+0x54>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_InitTick+0x58>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4619      	mov	r1, r3
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f935 	bl	800165a <HAL_SYSTICK_Config>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00e      	b.n	8001418 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b0f      	cmp	r3, #15
 80013fe:	d80a      	bhi.n	8001416 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001400:	2200      	movs	r2, #0
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001408:	f000 f90b 	bl	8001622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800140c:	4a06      	ldr	r2, [pc, #24]	; (8001428 <HAL_InitTick+0x5c>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	e000      	b.n	8001418 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000004 	.word	0x20000004
 8001424:	2000000c 	.word	0x2000000c
 8001428:	20000008 	.word	0x20000008

0800142c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_IncTick+0x1c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_IncTick+0x20>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4413      	add	r3, r2
 800143c:	4a03      	ldr	r2, [pc, #12]	; (800144c <HAL_IncTick+0x20>)
 800143e:	6013      	str	r3, [r2, #0]
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	2000000c 	.word	0x2000000c
 800144c:	20000100 	.word	0x20000100

08001450 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b02      	ldr	r3, [pc, #8]	; (8001460 <HAL_GetTick+0x10>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	20000100 	.word	0x20000100

08001464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800146c:	f7ff fff0 	bl	8001450 <HAL_GetTick>
 8001470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800147c:	d005      	beq.n	800148a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <HAL_Delay+0x44>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4413      	add	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800148a:	bf00      	nop
 800148c:	f7ff ffe0 	bl	8001450 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	429a      	cmp	r2, r3
 800149a:	d8f7      	bhi.n	800148c <HAL_Delay+0x28>
  {
  }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	2000000c 	.word	0x2000000c

080014ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c8:	4013      	ands	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014de:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	60d3      	str	r3, [r2, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <__NVIC_GetPriorityGrouping+0x18>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	f003 0307 	and.w	r3, r3, #7
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db0a      	blt.n	800153a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	490c      	ldr	r1, [pc, #48]	; (800155c <__NVIC_SetPriority+0x4c>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	0112      	lsls	r2, r2, #4
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	440b      	add	r3, r1
 8001534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001538:	e00a      	b.n	8001550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4908      	ldr	r1, [pc, #32]	; (8001560 <__NVIC_SetPriority+0x50>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	3b04      	subs	r3, #4
 8001548:	0112      	lsls	r2, r2, #4
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	440b      	add	r3, r1
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f1c3 0307 	rsb	r3, r3, #7
 800157e:	2b04      	cmp	r3, #4
 8001580:	bf28      	it	cs
 8001582:	2304      	movcs	r3, #4
 8001584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3304      	adds	r3, #4
 800158a:	2b06      	cmp	r3, #6
 800158c:	d902      	bls.n	8001594 <NVIC_EncodePriority+0x30>
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3b03      	subs	r3, #3
 8001592:	e000      	b.n	8001596 <NVIC_EncodePriority+0x32>
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43da      	mvns	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	401a      	ands	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	43d9      	mvns	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	4313      	orrs	r3, r2
         );
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3724      	adds	r7, #36	; 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d8:	d301      	bcc.n	80015de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015da:	2301      	movs	r3, #1
 80015dc:	e00f      	b.n	80015fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <SysTick_Config+0x40>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e6:	210f      	movs	r1, #15
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015ec:	f7ff ff90 	bl	8001510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <SysTick_Config+0x40>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f6:	4b04      	ldr	r3, [pc, #16]	; (8001608 <SysTick_Config+0x40>)
 80015f8:	2207      	movs	r2, #7
 80015fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	e000e010 	.word	0xe000e010

0800160c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ff49 	bl	80014ac <__NVIC_SetPriorityGrouping>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001622:	b580      	push	{r7, lr}
 8001624:	b086      	sub	sp, #24
 8001626:	af00      	add	r7, sp, #0
 8001628:	4603      	mov	r3, r0
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001634:	f7ff ff5e 	bl	80014f4 <__NVIC_GetPriorityGrouping>
 8001638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	6978      	ldr	r0, [r7, #20]
 8001640:	f7ff ff90 	bl	8001564 <NVIC_EncodePriority>
 8001644:	4602      	mov	r2, r0
 8001646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff5f 	bl	8001510 <__NVIC_SetPriority>
}
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffb0 	bl	80015c8 <SysTick_Config>
 8001668:	4603      	mov	r3, r0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001674:	b480      	push	{r7}
 8001676:	b08b      	sub	sp, #44	; 0x2c
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001686:	e169      	b.n	800195c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001688:	2201      	movs	r2, #1
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	f040 8158 	bne.w	8001956 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	4a9a      	ldr	r2, [pc, #616]	; (8001914 <HAL_GPIO_Init+0x2a0>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d05e      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016b0:	4a98      	ldr	r2, [pc, #608]	; (8001914 <HAL_GPIO_Init+0x2a0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d875      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016b6:	4a98      	ldr	r2, [pc, #608]	; (8001918 <HAL_GPIO_Init+0x2a4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d058      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016bc:	4a96      	ldr	r2, [pc, #600]	; (8001918 <HAL_GPIO_Init+0x2a4>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d86f      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016c2:	4a96      	ldr	r2, [pc, #600]	; (800191c <HAL_GPIO_Init+0x2a8>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d052      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016c8:	4a94      	ldr	r2, [pc, #592]	; (800191c <HAL_GPIO_Init+0x2a8>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d869      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016ce:	4a94      	ldr	r2, [pc, #592]	; (8001920 <HAL_GPIO_Init+0x2ac>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d04c      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016d4:	4a92      	ldr	r2, [pc, #584]	; (8001920 <HAL_GPIO_Init+0x2ac>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d863      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016da:	4a92      	ldr	r2, [pc, #584]	; (8001924 <HAL_GPIO_Init+0x2b0>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d046      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016e0:	4a90      	ldr	r2, [pc, #576]	; (8001924 <HAL_GPIO_Init+0x2b0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d85d      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016e6:	2b12      	cmp	r3, #18
 80016e8:	d82a      	bhi.n	8001740 <HAL_GPIO_Init+0xcc>
 80016ea:	2b12      	cmp	r3, #18
 80016ec:	d859      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016ee:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <HAL_GPIO_Init+0x80>)
 80016f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f4:	0800176f 	.word	0x0800176f
 80016f8:	08001749 	.word	0x08001749
 80016fc:	0800175b 	.word	0x0800175b
 8001700:	0800179d 	.word	0x0800179d
 8001704:	080017a3 	.word	0x080017a3
 8001708:	080017a3 	.word	0x080017a3
 800170c:	080017a3 	.word	0x080017a3
 8001710:	080017a3 	.word	0x080017a3
 8001714:	080017a3 	.word	0x080017a3
 8001718:	080017a3 	.word	0x080017a3
 800171c:	080017a3 	.word	0x080017a3
 8001720:	080017a3 	.word	0x080017a3
 8001724:	080017a3 	.word	0x080017a3
 8001728:	080017a3 	.word	0x080017a3
 800172c:	080017a3 	.word	0x080017a3
 8001730:	080017a3 	.word	0x080017a3
 8001734:	080017a3 	.word	0x080017a3
 8001738:	08001751 	.word	0x08001751
 800173c:	08001765 	.word	0x08001765
 8001740:	4a79      	ldr	r2, [pc, #484]	; (8001928 <HAL_GPIO_Init+0x2b4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d013      	beq.n	800176e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001746:	e02c      	b.n	80017a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	623b      	str	r3, [r7, #32]
          break;
 800174e:	e029      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	3304      	adds	r3, #4
 8001756:	623b      	str	r3, [r7, #32]
          break;
 8001758:	e024      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	3308      	adds	r3, #8
 8001760:	623b      	str	r3, [r7, #32]
          break;
 8001762:	e01f      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	330c      	adds	r3, #12
 800176a:	623b      	str	r3, [r7, #32]
          break;
 800176c:	e01a      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001776:	2304      	movs	r3, #4
 8001778:	623b      	str	r3, [r7, #32]
          break;
 800177a:	e013      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d105      	bne.n	8001790 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001784:	2308      	movs	r3, #8
 8001786:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	611a      	str	r2, [r3, #16]
          break;
 800178e:	e009      	b.n	80017a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001790:	2308      	movs	r3, #8
 8001792:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	615a      	str	r2, [r3, #20]
          break;
 800179a:	e003      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
          break;
 80017a0:	e000      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          break;
 80017a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	2bff      	cmp	r3, #255	; 0xff
 80017a8:	d801      	bhi.n	80017ae <HAL_GPIO_Init+0x13a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	e001      	b.n	80017b2 <HAL_GPIO_Init+0x13e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3304      	adds	r3, #4
 80017b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2bff      	cmp	r3, #255	; 0xff
 80017b8:	d802      	bhi.n	80017c0 <HAL_GPIO_Init+0x14c>
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	e002      	b.n	80017c6 <HAL_GPIO_Init+0x152>
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	3b08      	subs	r3, #8
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	210f      	movs	r1, #15
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	fa01 f303 	lsl.w	r3, r1, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	401a      	ands	r2, r3
 80017d8:	6a39      	ldr	r1, [r7, #32]
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	431a      	orrs	r2, r3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 80b1 	beq.w	8001956 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017f4:	4b4d      	ldr	r3, [pc, #308]	; (800192c <HAL_GPIO_Init+0x2b8>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a4c      	ldr	r2, [pc, #304]	; (800192c <HAL_GPIO_Init+0x2b8>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b4a      	ldr	r3, [pc, #296]	; (800192c <HAL_GPIO_Init+0x2b8>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800180c:	4a48      	ldr	r2, [pc, #288]	; (8001930 <HAL_GPIO_Init+0x2bc>)
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	3302      	adds	r3, #2
 8001814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001818:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	220f      	movs	r2, #15
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	4013      	ands	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a40      	ldr	r2, [pc, #256]	; (8001934 <HAL_GPIO_Init+0x2c0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d013      	beq.n	8001860 <HAL_GPIO_Init+0x1ec>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a3f      	ldr	r2, [pc, #252]	; (8001938 <HAL_GPIO_Init+0x2c4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d00d      	beq.n	800185c <HAL_GPIO_Init+0x1e8>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a3e      	ldr	r2, [pc, #248]	; (800193c <HAL_GPIO_Init+0x2c8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d007      	beq.n	8001858 <HAL_GPIO_Init+0x1e4>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a3d      	ldr	r2, [pc, #244]	; (8001940 <HAL_GPIO_Init+0x2cc>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d101      	bne.n	8001854 <HAL_GPIO_Init+0x1e0>
 8001850:	2303      	movs	r3, #3
 8001852:	e006      	b.n	8001862 <HAL_GPIO_Init+0x1ee>
 8001854:	2304      	movs	r3, #4
 8001856:	e004      	b.n	8001862 <HAL_GPIO_Init+0x1ee>
 8001858:	2302      	movs	r3, #2
 800185a:	e002      	b.n	8001862 <HAL_GPIO_Init+0x1ee>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <HAL_GPIO_Init+0x1ee>
 8001860:	2300      	movs	r3, #0
 8001862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001864:	f002 0203 	and.w	r2, r2, #3
 8001868:	0092      	lsls	r2, r2, #2
 800186a:	4093      	lsls	r3, r2
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001872:	492f      	ldr	r1, [pc, #188]	; (8001930 <HAL_GPIO_Init+0x2bc>)
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d006      	beq.n	800189a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	492c      	ldr	r1, [pc, #176]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	600b      	str	r3, [r1, #0]
 8001898:	e006      	b.n	80018a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800189a:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	4928      	ldr	r1, [pc, #160]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018b4:	4b23      	ldr	r3, [pc, #140]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	4922      	ldr	r1, [pc, #136]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	604b      	str	r3, [r1, #4]
 80018c0:	e006      	b.n	80018d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	491e      	ldr	r1, [pc, #120]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d006      	beq.n	80018ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	4918      	ldr	r1, [pc, #96]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	608b      	str	r3, [r1, #8]
 80018e8:	e006      	b.n	80018f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018ea:	4b16      	ldr	r3, [pc, #88]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	4914      	ldr	r1, [pc, #80]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d021      	beq.n	8001948 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	490e      	ldr	r1, [pc, #56]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	60cb      	str	r3, [r1, #12]
 8001910:	e021      	b.n	8001956 <HAL_GPIO_Init+0x2e2>
 8001912:	bf00      	nop
 8001914:	10320000 	.word	0x10320000
 8001918:	10310000 	.word	0x10310000
 800191c:	10220000 	.word	0x10220000
 8001920:	10210000 	.word	0x10210000
 8001924:	10120000 	.word	0x10120000
 8001928:	10110000 	.word	0x10110000
 800192c:	40021000 	.word	0x40021000
 8001930:	40010000 	.word	0x40010000
 8001934:	40010800 	.word	0x40010800
 8001938:	40010c00 	.word	0x40010c00
 800193c:	40011000 	.word	0x40011000
 8001940:	40011400 	.word	0x40011400
 8001944:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_GPIO_Init+0x304>)
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	43db      	mvns	r3, r3
 8001950:	4909      	ldr	r1, [pc, #36]	; (8001978 <HAL_GPIO_Init+0x304>)
 8001952:	4013      	ands	r3, r2
 8001954:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	3301      	adds	r3, #1
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	fa22 f303 	lsr.w	r3, r2, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	f47f ae8e 	bne.w	8001688 <HAL_GPIO_Init+0x14>
  }
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	372c      	adds	r7, #44	; 0x2c
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	40010400 	.word	0x40010400

0800197c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
 8001988:	4613      	mov	r3, r2
 800198a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800198c:	787b      	ldrb	r3, [r7, #1]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001998:	e003      	b.n	80019a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800199a:	887b      	ldrh	r3, [r7, #2]
 800199c:	041a      	lsls	r2, r3, #16
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	611a      	str	r2, [r3, #16]
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e26c      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 8087 	beq.w	8001ada <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019cc:	4b92      	ldr	r3, [pc, #584]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d00c      	beq.n	80019f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019d8:	4b8f      	ldr	r3, [pc, #572]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 030c 	and.w	r3, r3, #12
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d112      	bne.n	8001a0a <HAL_RCC_OscConfig+0x5e>
 80019e4:	4b8c      	ldr	r3, [pc, #560]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f0:	d10b      	bne.n	8001a0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f2:	4b89      	ldr	r3, [pc, #548]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d06c      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x12c>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d168      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e246      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a12:	d106      	bne.n	8001a22 <HAL_RCC_OscConfig+0x76>
 8001a14:	4b80      	ldr	r3, [pc, #512]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a7f      	ldr	r2, [pc, #508]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	e02e      	b.n	8001a80 <HAL_RCC_OscConfig+0xd4>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0x98>
 8001a2a:	4b7b      	ldr	r3, [pc, #492]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a7a      	ldr	r2, [pc, #488]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	4b78      	ldr	r3, [pc, #480]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a77      	ldr	r2, [pc, #476]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e01d      	b.n	8001a80 <HAL_RCC_OscConfig+0xd4>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a4c:	d10c      	bne.n	8001a68 <HAL_RCC_OscConfig+0xbc>
 8001a4e:	4b72      	ldr	r3, [pc, #456]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a71      	ldr	r2, [pc, #452]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	4b6f      	ldr	r3, [pc, #444]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a6e      	ldr	r2, [pc, #440]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	e00b      	b.n	8001a80 <HAL_RCC_OscConfig+0xd4>
 8001a68:	4b6b      	ldr	r3, [pc, #428]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a6a      	ldr	r2, [pc, #424]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	4b68      	ldr	r3, [pc, #416]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a67      	ldr	r2, [pc, #412]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d013      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7ff fce2 	bl	8001450 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a90:	f7ff fcde 	bl	8001450 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b64      	cmp	r3, #100	; 0x64
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e1fa      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa2:	4b5d      	ldr	r3, [pc, #372]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0xe4>
 8001aae:	e014      	b.n	8001ada <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fcce 	bl	8001450 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab8:	f7ff fcca 	bl	8001450 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b64      	cmp	r3, #100	; 0x64
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e1e6      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aca:	4b53      	ldr	r3, [pc, #332]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x10c>
 8001ad6:	e000      	b.n	8001ada <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d063      	beq.n	8001bae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ae6:	4b4c      	ldr	r3, [pc, #304]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00b      	beq.n	8001b0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001af2:	4b49      	ldr	r3, [pc, #292]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d11c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x18c>
 8001afe:	4b46      	ldr	r3, [pc, #280]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d116      	bne.n	8001b38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0a:	4b43      	ldr	r3, [pc, #268]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d005      	beq.n	8001b22 <HAL_RCC_OscConfig+0x176>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d001      	beq.n	8001b22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e1ba      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b22:	4b3d      	ldr	r3, [pc, #244]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4939      	ldr	r1, [pc, #228]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b36:	e03a      	b.n	8001bae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d020      	beq.n	8001b82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b40:	4b36      	ldr	r3, [pc, #216]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7ff fc83 	bl	8001450 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b4e:	f7ff fc7f 	bl	8001450 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e19b      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b60:	4b2d      	ldr	r3, [pc, #180]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6c:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	4927      	ldr	r1, [pc, #156]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	600b      	str	r3, [r1, #0]
 8001b80:	e015      	b.n	8001bae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7ff fc62 	bl	8001450 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b90:	f7ff fc5e 	bl	8001450 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e17a      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d03a      	beq.n	8001c30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d019      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <HAL_RCC_OscConfig+0x274>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc8:	f7ff fc42 	bl	8001450 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd0:	f7ff fc3e 	bl	8001450 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e15a      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f000 faa6 	bl	8002140 <RCC_Delay>
 8001bf4:	e01c      	b.n	8001c30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_RCC_OscConfig+0x274>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfc:	f7ff fc28 	bl	8001450 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c02:	e00f      	b.n	8001c24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c04:	f7ff fc24 	bl	8001450 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d908      	bls.n	8001c24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e140      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	42420000 	.word	0x42420000
 8001c20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c24:	4b9e      	ldr	r3, [pc, #632]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1e9      	bne.n	8001c04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 80a6 	beq.w	8001d8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c42:	4b97      	ldr	r3, [pc, #604]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10d      	bne.n	8001c6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	4b94      	ldr	r3, [pc, #592]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	4a93      	ldr	r2, [pc, #588]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c58:	61d3      	str	r3, [r2, #28]
 8001c5a:	4b91      	ldr	r3, [pc, #580]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c66:	2301      	movs	r3, #1
 8001c68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6a:	4b8e      	ldr	r3, [pc, #568]	; (8001ea4 <HAL_RCC_OscConfig+0x4f8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d118      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c76:	4b8b      	ldr	r3, [pc, #556]	; (8001ea4 <HAL_RCC_OscConfig+0x4f8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a8a      	ldr	r2, [pc, #552]	; (8001ea4 <HAL_RCC_OscConfig+0x4f8>)
 8001c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c82:	f7ff fbe5 	bl	8001450 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8a:	f7ff fbe1 	bl	8001450 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b64      	cmp	r3, #100	; 0x64
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e0fd      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9c:	4b81      	ldr	r3, [pc, #516]	; (8001ea4 <HAL_RCC_OscConfig+0x4f8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d106      	bne.n	8001cbe <HAL_RCC_OscConfig+0x312>
 8001cb0:	4b7b      	ldr	r3, [pc, #492]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4a7a      	ldr	r2, [pc, #488]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6213      	str	r3, [r2, #32]
 8001cbc:	e02d      	b.n	8001d1a <HAL_RCC_OscConfig+0x36e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x334>
 8001cc6:	4b76      	ldr	r3, [pc, #472]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	4a75      	ldr	r2, [pc, #468]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	6213      	str	r3, [r2, #32]
 8001cd2:	4b73      	ldr	r3, [pc, #460]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	4a72      	ldr	r2, [pc, #456]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	f023 0304 	bic.w	r3, r3, #4
 8001cdc:	6213      	str	r3, [r2, #32]
 8001cde:	e01c      	b.n	8001d1a <HAL_RCC_OscConfig+0x36e>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	2b05      	cmp	r3, #5
 8001ce6:	d10c      	bne.n	8001d02 <HAL_RCC_OscConfig+0x356>
 8001ce8:	4b6d      	ldr	r3, [pc, #436]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4a6c      	ldr	r2, [pc, #432]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cee:	f043 0304 	orr.w	r3, r3, #4
 8001cf2:	6213      	str	r3, [r2, #32]
 8001cf4:	4b6a      	ldr	r3, [pc, #424]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	4a69      	ldr	r2, [pc, #420]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6213      	str	r3, [r2, #32]
 8001d00:	e00b      	b.n	8001d1a <HAL_RCC_OscConfig+0x36e>
 8001d02:	4b67      	ldr	r3, [pc, #412]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	4a66      	ldr	r2, [pc, #408]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	f023 0301 	bic.w	r3, r3, #1
 8001d0c:	6213      	str	r3, [r2, #32]
 8001d0e:	4b64      	ldr	r3, [pc, #400]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	4a63      	ldr	r2, [pc, #396]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	f023 0304 	bic.w	r3, r3, #4
 8001d18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d015      	beq.n	8001d4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d22:	f7ff fb95 	bl	8001450 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d28:	e00a      	b.n	8001d40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2a:	f7ff fb91 	bl	8001450 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e0ab      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d40:	4b57      	ldr	r3, [pc, #348]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0ee      	beq.n	8001d2a <HAL_RCC_OscConfig+0x37e>
 8001d4c:	e014      	b.n	8001d78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4e:	f7ff fb7f 	bl	8001450 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d54:	e00a      	b.n	8001d6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d56:	f7ff fb7b 	bl	8001450 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e095      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1ee      	bne.n	8001d56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d105      	bne.n	8001d8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7e:	4b48      	ldr	r3, [pc, #288]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	4a47      	ldr	r2, [pc, #284]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 8081 	beq.w	8001e96 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d94:	4b42      	ldr	r3, [pc, #264]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 030c 	and.w	r3, r3, #12
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d061      	beq.n	8001e64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d146      	bne.n	8001e36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da8:	4b3f      	ldr	r3, [pc, #252]	; (8001ea8 <HAL_RCC_OscConfig+0x4fc>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dae:	f7ff fb4f 	bl	8001450 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db6:	f7ff fb4b 	bl	8001450 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e067      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc8:	4b35      	ldr	r3, [pc, #212]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f0      	bne.n	8001db6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ddc:	d108      	bne.n	8001df0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dde:	4b30      	ldr	r3, [pc, #192]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	492d      	ldr	r1, [pc, #180]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df0:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a19      	ldr	r1, [r3, #32]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	430b      	orrs	r3, r1
 8001e02:	4927      	ldr	r1, [pc, #156]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e08:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <HAL_RCC_OscConfig+0x4fc>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0e:	f7ff fb1f 	bl	8001450 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e16:	f7ff fb1b 	bl	8001450 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e037      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e28:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x46a>
 8001e34:	e02f      	b.n	8001e96 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e36:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <HAL_RCC_OscConfig+0x4fc>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fb08 	bl	8001450 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e44:	f7ff fb04 	bl	8001450 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e020      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e56:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x498>
 8001e62:	e018      	b.n	8001e96 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e013      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d106      	bne.n	8001e92 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d001      	beq.n	8001e96 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40007000 	.word	0x40007000
 8001ea8:	42420060 	.word	0x42420060

08001eac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0d0      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec0:	4b6a      	ldr	r3, [pc, #424]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d910      	bls.n	8001ef0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ece:	4b67      	ldr	r3, [pc, #412]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 0207 	bic.w	r2, r3, #7
 8001ed6:	4965      	ldr	r1, [pc, #404]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b63      	ldr	r3, [pc, #396]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0b8      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d020      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f08:	4b59      	ldr	r3, [pc, #356]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	4a58      	ldr	r2, [pc, #352]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f20:	4b53      	ldr	r3, [pc, #332]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	4a52      	ldr	r2, [pc, #328]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2c:	4b50      	ldr	r3, [pc, #320]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	494d      	ldr	r1, [pc, #308]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d040      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d115      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e07f      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6a:	4b41      	ldr	r3, [pc, #260]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e073      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7a:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e06b      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f8a:	4b39      	ldr	r3, [pc, #228]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f023 0203 	bic.w	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4936      	ldr	r1, [pc, #216]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f9c:	f7ff fa58 	bl	8001450 <HAL_GetTick>
 8001fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa4:	f7ff fa54 	bl	8001450 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e053      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 020c 	and.w	r2, r3, #12
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d1eb      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fcc:	4b27      	ldr	r3, [pc, #156]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d210      	bcs.n	8001ffc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 0207 	bic.w	r2, r3, #7
 8001fe2:	4922      	ldr	r1, [pc, #136]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e032      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d008      	beq.n	800201a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002008:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4916      	ldr	r1, [pc, #88]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	4313      	orrs	r3, r2
 8002018:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	490e      	ldr	r1, [pc, #56]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	4313      	orrs	r3, r2
 8002038:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800203a:	f000 f821 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 800203e:	4602      	mov	r2, r0
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	490a      	ldr	r1, [pc, #40]	; (8002074 <HAL_RCC_ClockConfig+0x1c8>)
 800204c:	5ccb      	ldrb	r3, [r1, r3]
 800204e:	fa22 f303 	lsr.w	r3, r2, r3
 8002052:	4a09      	ldr	r2, [pc, #36]	; (8002078 <HAL_RCC_ClockConfig+0x1cc>)
 8002054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_RCC_ClockConfig+0x1d0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff f9b6 	bl	80013cc <HAL_InitTick>

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40022000 	.word	0x40022000
 8002070:	40021000 	.word	0x40021000
 8002074:	08003580 	.word	0x08003580
 8002078:	20000004 	.word	0x20000004
 800207c:	20000008 	.word	0x20000008

08002080 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002080:	b490      	push	{r4, r7}
 8002082:	b08a      	sub	sp, #40	; 0x28
 8002084:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002086:	4b2a      	ldr	r3, [pc, #168]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002088:	1d3c      	adds	r4, r7, #4
 800208a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800208c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002090:	f240 2301 	movw	r3, #513	; 0x201
 8002094:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
 800209e:	2300      	movs	r3, #0
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020aa:	4b22      	ldr	r3, [pc, #136]	; (8002134 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d002      	beq.n	80020c0 <HAL_RCC_GetSysClockFreq+0x40>
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d003      	beq.n	80020c6 <HAL_RCC_GetSysClockFreq+0x46>
 80020be:	e02d      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020c0:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020c2:	623b      	str	r3, [r7, #32]
      break;
 80020c4:	e02d      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	0c9b      	lsrs	r3, r3, #18
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020d2:	4413      	add	r3, r2
 80020d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020d8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d013      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020e4:	4b13      	ldr	r3, [pc, #76]	; (8002134 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	0c5b      	lsrs	r3, r3, #17
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020f2:	4413      	add	r3, r2
 80020f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	4a0e      	ldr	r2, [pc, #56]	; (8002138 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020fe:	fb02 f203 	mul.w	r2, r2, r3
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	fbb2 f3f3 	udiv	r3, r2, r3
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
 800210a:	e004      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	4a0b      	ldr	r2, [pc, #44]	; (800213c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002110:	fb02 f303 	mul.w	r3, r2, r3
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	623b      	str	r3, [r7, #32]
      break;
 800211a:	e002      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_RCC_GetSysClockFreq+0xb8>)
 800211e:	623b      	str	r3, [r7, #32]
      break;
 8002120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002122:	6a3b      	ldr	r3, [r7, #32]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3728      	adds	r7, #40	; 0x28
 8002128:	46bd      	mov	sp, r7
 800212a:	bc90      	pop	{r4, r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	08003570 	.word	0x08003570
 8002134:	40021000 	.word	0x40021000
 8002138:	007a1200 	.word	0x007a1200
 800213c:	003d0900 	.word	0x003d0900

08002140 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002148:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <RCC_Delay+0x34>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a0a      	ldr	r2, [pc, #40]	; (8002178 <RCC_Delay+0x38>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	0a5b      	lsrs	r3, r3, #9
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	fb02 f303 	mul.w	r3, r2, r3
 800215a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800215c:	bf00      	nop
  }
  while (Delay --);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1e5a      	subs	r2, r3, #1
 8002162:	60fa      	str	r2, [r7, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f9      	bne.n	800215c <RCC_Delay+0x1c>
}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	20000004 	.word	0x20000004
 8002178:	10624dd3 	.word	0x10624dd3

0800217c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e053      	b.n	8002236 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d106      	bne.n	80021ae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff f82b 	bl	8001204 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2202      	movs	r2, #2
 80021b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021c4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	431a      	orrs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	ea42 0103 	orr.w	r1, r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	0c1a      	lsrs	r2, r3, #16
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f002 0204 	and.w	r2, r2, #4
 8002214:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	69da      	ldr	r2, [r3, #28]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002224:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b088      	sub	sp, #32
 8002242:	af00      	add	r7, sp, #0
 8002244:	60f8      	str	r0, [r7, #12]
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	603b      	str	r3, [r7, #0]
 800224a:	4613      	mov	r3, r2
 800224c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_SPI_Transmit+0x22>
 800225c:	2302      	movs	r3, #2
 800225e:	e11e      	b.n	800249e <HAL_SPI_Transmit+0x260>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002268:	f7ff f8f2 	bl	8001450 <HAL_GetTick>
 800226c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b01      	cmp	r3, #1
 800227c:	d002      	beq.n	8002284 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800227e:	2302      	movs	r3, #2
 8002280:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002282:	e103      	b.n	800248c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <HAL_SPI_Transmit+0x52>
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002294:	e0fa      	b.n	800248c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2203      	movs	r2, #3
 800229a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	88fa      	ldrh	r2, [r7, #6]
 80022ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	88fa      	ldrh	r2, [r7, #6]
 80022b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022dc:	d107      	bne.n	80022ee <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f8:	2b40      	cmp	r3, #64	; 0x40
 80022fa:	d007      	beq.n	800230c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800230a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002314:	d14b      	bne.n	80023ae <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <HAL_SPI_Transmit+0xe6>
 800231e:	8afb      	ldrh	r3, [r7, #22]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d13e      	bne.n	80023a2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	881a      	ldrh	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	1c9a      	adds	r2, r3, #2
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800233e:	b29b      	uxth	r3, r3
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002348:	e02b      	b.n	80023a2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b02      	cmp	r3, #2
 8002356:	d112      	bne.n	800237e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	881a      	ldrh	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	1c9a      	adds	r2, r3, #2
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002372:	b29b      	uxth	r3, r3
 8002374:	3b01      	subs	r3, #1
 8002376:	b29a      	uxth	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	86da      	strh	r2, [r3, #54]	; 0x36
 800237c:	e011      	b.n	80023a2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800237e:	f7ff f867 	bl	8001450 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d803      	bhi.n	8002396 <HAL_SPI_Transmit+0x158>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002394:	d102      	bne.n	800239c <HAL_SPI_Transmit+0x15e>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d102      	bne.n	80023a2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80023a0:	e074      	b.n	800248c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1ce      	bne.n	800234a <HAL_SPI_Transmit+0x10c>
 80023ac:	e04c      	b.n	8002448 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <HAL_SPI_Transmit+0x17e>
 80023b6:	8afb      	ldrh	r3, [r7, #22]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d140      	bne.n	800243e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	330c      	adds	r3, #12
 80023c6:	7812      	ldrb	r2, [r2, #0]
 80023c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023d8:	b29b      	uxth	r3, r3
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80023e2:	e02c      	b.n	800243e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d113      	bne.n	800241a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	330c      	adds	r3, #12
 80023fc:	7812      	ldrb	r2, [r2, #0]
 80023fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800240e:	b29b      	uxth	r3, r3
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	86da      	strh	r2, [r3, #54]	; 0x36
 8002418:	e011      	b.n	800243e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800241a:	f7ff f819 	bl	8001450 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d803      	bhi.n	8002432 <HAL_SPI_Transmit+0x1f4>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002430:	d102      	bne.n	8002438 <HAL_SPI_Transmit+0x1fa>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d102      	bne.n	800243e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800243c:	e026      	b.n	800248c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002442:	b29b      	uxth	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1cd      	bne.n	80023e4 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	6839      	ldr	r1, [r7, #0]
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 f894 	bl	800257a <SPI_EndRxTxTransaction>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2220      	movs	r2, #32
 800245c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10a      	bne.n	800247c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	77fb      	strb	r3, [r7, #31]
 8002488:	e000      	b.n	800248c <HAL_SPI_Transmit+0x24e>
  }

error:
 800248a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800249c:	7ffb      	ldrb	r3, [r7, #31]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3720      	adds	r7, #32
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	603b      	str	r3, [r7, #0]
 80024b2:	4613      	mov	r3, r2
 80024b4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024b6:	e04c      	b.n	8002552 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024be:	d048      	beq.n	8002552 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80024c0:	f7fe ffc6 	bl	8001450 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d902      	bls.n	80024d6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d13d      	bne.n	8002552 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024ee:	d111      	bne.n	8002514 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024f8:	d004      	beq.n	8002504 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002502:	d107      	bne.n	8002514 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002512:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800251c:	d10f      	bne.n	800253e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800253c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e00f      	b.n	8002572 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	4013      	ands	r3, r2
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	429a      	cmp	r2, r3
 8002560:	bf0c      	ite	eq
 8002562:	2301      	moveq	r3, #1
 8002564:	2300      	movne	r3, #0
 8002566:	b2db      	uxtb	r3, r3
 8002568:	461a      	mov	r2, r3
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	429a      	cmp	r2, r3
 800256e:	d1a3      	bne.n	80024b8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b086      	sub	sp, #24
 800257e:	af02      	add	r7, sp, #8
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2200      	movs	r2, #0
 800258e:	2180      	movs	r1, #128	; 0x80
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f7ff ff88 	bl	80024a6 <SPI_WaitFlagStateUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d007      	beq.n	80025ac <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a0:	f043 0220 	orr.w	r2, r3, #32
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e000      	b.n	80025ae <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <__errno>:
 80025b8:	4b01      	ldr	r3, [pc, #4]	; (80025c0 <__errno+0x8>)
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	20000010 	.word	0x20000010

080025c4 <__libc_init_array>:
 80025c4:	b570      	push	{r4, r5, r6, lr}
 80025c6:	2600      	movs	r6, #0
 80025c8:	4d0c      	ldr	r5, [pc, #48]	; (80025fc <__libc_init_array+0x38>)
 80025ca:	4c0d      	ldr	r4, [pc, #52]	; (8002600 <__libc_init_array+0x3c>)
 80025cc:	1b64      	subs	r4, r4, r5
 80025ce:	10a4      	asrs	r4, r4, #2
 80025d0:	42a6      	cmp	r6, r4
 80025d2:	d109      	bne.n	80025e8 <__libc_init_array+0x24>
 80025d4:	f000 ffbe 	bl	8003554 <_init>
 80025d8:	2600      	movs	r6, #0
 80025da:	4d0a      	ldr	r5, [pc, #40]	; (8002604 <__libc_init_array+0x40>)
 80025dc:	4c0a      	ldr	r4, [pc, #40]	; (8002608 <__libc_init_array+0x44>)
 80025de:	1b64      	subs	r4, r4, r5
 80025e0:	10a4      	asrs	r4, r4, #2
 80025e2:	42a6      	cmp	r6, r4
 80025e4:	d105      	bne.n	80025f2 <__libc_init_array+0x2e>
 80025e6:	bd70      	pop	{r4, r5, r6, pc}
 80025e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ec:	4798      	blx	r3
 80025ee:	3601      	adds	r6, #1
 80025f0:	e7ee      	b.n	80025d0 <__libc_init_array+0xc>
 80025f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80025f6:	4798      	blx	r3
 80025f8:	3601      	adds	r6, #1
 80025fa:	e7f2      	b.n	80025e2 <__libc_init_array+0x1e>
 80025fc:	080035d8 	.word	0x080035d8
 8002600:	080035d8 	.word	0x080035d8
 8002604:	080035d8 	.word	0x080035d8
 8002608:	080035dc 	.word	0x080035dc

0800260c <memcpy>:
 800260c:	440a      	add	r2, r1
 800260e:	4291      	cmp	r1, r2
 8002610:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002614:	d100      	bne.n	8002618 <memcpy+0xc>
 8002616:	4770      	bx	lr
 8002618:	b510      	push	{r4, lr}
 800261a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800261e:	4291      	cmp	r1, r2
 8002620:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002624:	d1f9      	bne.n	800261a <memcpy+0xe>
 8002626:	bd10      	pop	{r4, pc}

08002628 <memset>:
 8002628:	4603      	mov	r3, r0
 800262a:	4402      	add	r2, r0
 800262c:	4293      	cmp	r3, r2
 800262e:	d100      	bne.n	8002632 <memset+0xa>
 8002630:	4770      	bx	lr
 8002632:	f803 1b01 	strb.w	r1, [r3], #1
 8002636:	e7f9      	b.n	800262c <memset+0x4>

08002638 <pow>:
 8002638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800263c:	461f      	mov	r7, r3
 800263e:	4680      	mov	r8, r0
 8002640:	4689      	mov	r9, r1
 8002642:	4616      	mov	r6, r2
 8002644:	f000 f8a4 	bl	8002790 <__ieee754_pow>
 8002648:	4b4d      	ldr	r3, [pc, #308]	; (8002780 <pow+0x148>)
 800264a:	4604      	mov	r4, r0
 800264c:	f993 3000 	ldrsb.w	r3, [r3]
 8002650:	460d      	mov	r5, r1
 8002652:	3301      	adds	r3, #1
 8002654:	d015      	beq.n	8002682 <pow+0x4a>
 8002656:	4632      	mov	r2, r6
 8002658:	463b      	mov	r3, r7
 800265a:	4630      	mov	r0, r6
 800265c:	4639      	mov	r1, r7
 800265e:	f7fe f9cd 	bl	80009fc <__aeabi_dcmpun>
 8002662:	b970      	cbnz	r0, 8002682 <pow+0x4a>
 8002664:	4642      	mov	r2, r8
 8002666:	464b      	mov	r3, r9
 8002668:	4640      	mov	r0, r8
 800266a:	4649      	mov	r1, r9
 800266c:	f7fe f9c6 	bl	80009fc <__aeabi_dcmpun>
 8002670:	2200      	movs	r2, #0
 8002672:	2300      	movs	r3, #0
 8002674:	b148      	cbz	r0, 800268a <pow+0x52>
 8002676:	4630      	mov	r0, r6
 8002678:	4639      	mov	r1, r7
 800267a:	f7fe f98d 	bl	8000998 <__aeabi_dcmpeq>
 800267e:	2800      	cmp	r0, #0
 8002680:	d17b      	bne.n	800277a <pow+0x142>
 8002682:	4620      	mov	r0, r4
 8002684:	4629      	mov	r1, r5
 8002686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800268a:	4640      	mov	r0, r8
 800268c:	4649      	mov	r1, r9
 800268e:	f7fe f983 	bl	8000998 <__aeabi_dcmpeq>
 8002692:	b1e0      	cbz	r0, 80026ce <pow+0x96>
 8002694:	2200      	movs	r2, #0
 8002696:	2300      	movs	r3, #0
 8002698:	4630      	mov	r0, r6
 800269a:	4639      	mov	r1, r7
 800269c:	f7fe f97c 	bl	8000998 <__aeabi_dcmpeq>
 80026a0:	2800      	cmp	r0, #0
 80026a2:	d16a      	bne.n	800277a <pow+0x142>
 80026a4:	4630      	mov	r0, r6
 80026a6:	4639      	mov	r1, r7
 80026a8:	f000 fe37 	bl	800331a <finite>
 80026ac:	2800      	cmp	r0, #0
 80026ae:	d0e8      	beq.n	8002682 <pow+0x4a>
 80026b0:	2200      	movs	r2, #0
 80026b2:	2300      	movs	r3, #0
 80026b4:	4630      	mov	r0, r6
 80026b6:	4639      	mov	r1, r7
 80026b8:	f7fe f978 	bl	80009ac <__aeabi_dcmplt>
 80026bc:	2800      	cmp	r0, #0
 80026be:	d0e0      	beq.n	8002682 <pow+0x4a>
 80026c0:	f7ff ff7a 	bl	80025b8 <__errno>
 80026c4:	2321      	movs	r3, #33	; 0x21
 80026c6:	2400      	movs	r4, #0
 80026c8:	6003      	str	r3, [r0, #0]
 80026ca:	4d2e      	ldr	r5, [pc, #184]	; (8002784 <pow+0x14c>)
 80026cc:	e7d9      	b.n	8002682 <pow+0x4a>
 80026ce:	4620      	mov	r0, r4
 80026d0:	4629      	mov	r1, r5
 80026d2:	f000 fe22 	bl	800331a <finite>
 80026d6:	bba8      	cbnz	r0, 8002744 <pow+0x10c>
 80026d8:	4640      	mov	r0, r8
 80026da:	4649      	mov	r1, r9
 80026dc:	f000 fe1d 	bl	800331a <finite>
 80026e0:	b380      	cbz	r0, 8002744 <pow+0x10c>
 80026e2:	4630      	mov	r0, r6
 80026e4:	4639      	mov	r1, r7
 80026e6:	f000 fe18 	bl	800331a <finite>
 80026ea:	b358      	cbz	r0, 8002744 <pow+0x10c>
 80026ec:	4622      	mov	r2, r4
 80026ee:	462b      	mov	r3, r5
 80026f0:	4620      	mov	r0, r4
 80026f2:	4629      	mov	r1, r5
 80026f4:	f7fe f982 	bl	80009fc <__aeabi_dcmpun>
 80026f8:	b160      	cbz	r0, 8002714 <pow+0xdc>
 80026fa:	f7ff ff5d 	bl	80025b8 <__errno>
 80026fe:	2321      	movs	r3, #33	; 0x21
 8002700:	2200      	movs	r2, #0
 8002702:	6003      	str	r3, [r0, #0]
 8002704:	2300      	movs	r3, #0
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	f7fe f807 	bl	800071c <__aeabi_ddiv>
 800270e:	4604      	mov	r4, r0
 8002710:	460d      	mov	r5, r1
 8002712:	e7b6      	b.n	8002682 <pow+0x4a>
 8002714:	f7ff ff50 	bl	80025b8 <__errno>
 8002718:	2322      	movs	r3, #34	; 0x22
 800271a:	2200      	movs	r2, #0
 800271c:	6003      	str	r3, [r0, #0]
 800271e:	4649      	mov	r1, r9
 8002720:	2300      	movs	r3, #0
 8002722:	4640      	mov	r0, r8
 8002724:	f7fe f942 	bl	80009ac <__aeabi_dcmplt>
 8002728:	2400      	movs	r4, #0
 800272a:	b148      	cbz	r0, 8002740 <pow+0x108>
 800272c:	4630      	mov	r0, r6
 800272e:	4639      	mov	r1, r7
 8002730:	f000 fe00 	bl	8003334 <rint>
 8002734:	4632      	mov	r2, r6
 8002736:	463b      	mov	r3, r7
 8002738:	f7fe f92e 	bl	8000998 <__aeabi_dcmpeq>
 800273c:	2800      	cmp	r0, #0
 800273e:	d0c4      	beq.n	80026ca <pow+0x92>
 8002740:	4d11      	ldr	r5, [pc, #68]	; (8002788 <pow+0x150>)
 8002742:	e79e      	b.n	8002682 <pow+0x4a>
 8002744:	2200      	movs	r2, #0
 8002746:	2300      	movs	r3, #0
 8002748:	4620      	mov	r0, r4
 800274a:	4629      	mov	r1, r5
 800274c:	f7fe f924 	bl	8000998 <__aeabi_dcmpeq>
 8002750:	2800      	cmp	r0, #0
 8002752:	d096      	beq.n	8002682 <pow+0x4a>
 8002754:	4640      	mov	r0, r8
 8002756:	4649      	mov	r1, r9
 8002758:	f000 fddf 	bl	800331a <finite>
 800275c:	2800      	cmp	r0, #0
 800275e:	d090      	beq.n	8002682 <pow+0x4a>
 8002760:	4630      	mov	r0, r6
 8002762:	4639      	mov	r1, r7
 8002764:	f000 fdd9 	bl	800331a <finite>
 8002768:	2800      	cmp	r0, #0
 800276a:	d08a      	beq.n	8002682 <pow+0x4a>
 800276c:	f7ff ff24 	bl	80025b8 <__errno>
 8002770:	2322      	movs	r3, #34	; 0x22
 8002772:	2400      	movs	r4, #0
 8002774:	2500      	movs	r5, #0
 8002776:	6003      	str	r3, [r0, #0]
 8002778:	e783      	b.n	8002682 <pow+0x4a>
 800277a:	2400      	movs	r4, #0
 800277c:	4d03      	ldr	r5, [pc, #12]	; (800278c <pow+0x154>)
 800277e:	e780      	b.n	8002682 <pow+0x4a>
 8002780:	20000074 	.word	0x20000074
 8002784:	fff00000 	.word	0xfff00000
 8002788:	7ff00000 	.word	0x7ff00000
 800278c:	3ff00000 	.word	0x3ff00000

08002790 <__ieee754_pow>:
 8002790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002794:	b093      	sub	sp, #76	; 0x4c
 8002796:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800279a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800279e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80027a2:	ea55 0302 	orrs.w	r3, r5, r2
 80027a6:	4607      	mov	r7, r0
 80027a8:	4688      	mov	r8, r1
 80027aa:	f000 84bf 	beq.w	800312c <__ieee754_pow+0x99c>
 80027ae:	4b7e      	ldr	r3, [pc, #504]	; (80029a8 <__ieee754_pow+0x218>)
 80027b0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80027b4:	429c      	cmp	r4, r3
 80027b6:	4689      	mov	r9, r1
 80027b8:	4682      	mov	sl, r0
 80027ba:	dc09      	bgt.n	80027d0 <__ieee754_pow+0x40>
 80027bc:	d103      	bne.n	80027c6 <__ieee754_pow+0x36>
 80027be:	b978      	cbnz	r0, 80027e0 <__ieee754_pow+0x50>
 80027c0:	42a5      	cmp	r5, r4
 80027c2:	dd02      	ble.n	80027ca <__ieee754_pow+0x3a>
 80027c4:	e00c      	b.n	80027e0 <__ieee754_pow+0x50>
 80027c6:	429d      	cmp	r5, r3
 80027c8:	dc02      	bgt.n	80027d0 <__ieee754_pow+0x40>
 80027ca:	429d      	cmp	r5, r3
 80027cc:	d10e      	bne.n	80027ec <__ieee754_pow+0x5c>
 80027ce:	b16a      	cbz	r2, 80027ec <__ieee754_pow+0x5c>
 80027d0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80027d4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80027d8:	ea54 030a 	orrs.w	r3, r4, sl
 80027dc:	f000 84a6 	beq.w	800312c <__ieee754_pow+0x99c>
 80027e0:	4872      	ldr	r0, [pc, #456]	; (80029ac <__ieee754_pow+0x21c>)
 80027e2:	b013      	add	sp, #76	; 0x4c
 80027e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027e8:	f000 bd9e 	b.w	8003328 <nan>
 80027ec:	f1b9 0f00 	cmp.w	r9, #0
 80027f0:	da39      	bge.n	8002866 <__ieee754_pow+0xd6>
 80027f2:	4b6f      	ldr	r3, [pc, #444]	; (80029b0 <__ieee754_pow+0x220>)
 80027f4:	429d      	cmp	r5, r3
 80027f6:	dc54      	bgt.n	80028a2 <__ieee754_pow+0x112>
 80027f8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80027fc:	429d      	cmp	r5, r3
 80027fe:	f340 84a6 	ble.w	800314e <__ieee754_pow+0x9be>
 8002802:	152b      	asrs	r3, r5, #20
 8002804:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002808:	2b14      	cmp	r3, #20
 800280a:	dd0f      	ble.n	800282c <__ieee754_pow+0x9c>
 800280c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8002810:	fa22 f103 	lsr.w	r1, r2, r3
 8002814:	fa01 f303 	lsl.w	r3, r1, r3
 8002818:	4293      	cmp	r3, r2
 800281a:	f040 8498 	bne.w	800314e <__ieee754_pow+0x9be>
 800281e:	f001 0101 	and.w	r1, r1, #1
 8002822:	f1c1 0302 	rsb	r3, r1, #2
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	b182      	cbz	r2, 800284c <__ieee754_pow+0xbc>
 800282a:	e05e      	b.n	80028ea <__ieee754_pow+0x15a>
 800282c:	2a00      	cmp	r2, #0
 800282e:	d15a      	bne.n	80028e6 <__ieee754_pow+0x156>
 8002830:	f1c3 0314 	rsb	r3, r3, #20
 8002834:	fa45 f103 	asr.w	r1, r5, r3
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	42ab      	cmp	r3, r5
 800283e:	f040 8483 	bne.w	8003148 <__ieee754_pow+0x9b8>
 8002842:	f001 0101 	and.w	r1, r1, #1
 8002846:	f1c1 0302 	rsb	r3, r1, #2
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	4b59      	ldr	r3, [pc, #356]	; (80029b4 <__ieee754_pow+0x224>)
 800284e:	429d      	cmp	r5, r3
 8002850:	d130      	bne.n	80028b4 <__ieee754_pow+0x124>
 8002852:	2e00      	cmp	r6, #0
 8002854:	f280 8474 	bge.w	8003140 <__ieee754_pow+0x9b0>
 8002858:	463a      	mov	r2, r7
 800285a:	4643      	mov	r3, r8
 800285c:	2000      	movs	r0, #0
 800285e:	4955      	ldr	r1, [pc, #340]	; (80029b4 <__ieee754_pow+0x224>)
 8002860:	f7fd ff5c 	bl	800071c <__aeabi_ddiv>
 8002864:	e02f      	b.n	80028c6 <__ieee754_pow+0x136>
 8002866:	2300      	movs	r3, #0
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	2a00      	cmp	r2, #0
 800286c:	d13d      	bne.n	80028ea <__ieee754_pow+0x15a>
 800286e:	4b4e      	ldr	r3, [pc, #312]	; (80029a8 <__ieee754_pow+0x218>)
 8002870:	429d      	cmp	r5, r3
 8002872:	d1eb      	bne.n	800284c <__ieee754_pow+0xbc>
 8002874:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8002878:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800287c:	ea53 030a 	orrs.w	r3, r3, sl
 8002880:	f000 8454 	beq.w	800312c <__ieee754_pow+0x99c>
 8002884:	4b4c      	ldr	r3, [pc, #304]	; (80029b8 <__ieee754_pow+0x228>)
 8002886:	429c      	cmp	r4, r3
 8002888:	dd0d      	ble.n	80028a6 <__ieee754_pow+0x116>
 800288a:	2e00      	cmp	r6, #0
 800288c:	f280 8454 	bge.w	8003138 <__ieee754_pow+0x9a8>
 8002890:	f04f 0b00 	mov.w	fp, #0
 8002894:	f04f 0c00 	mov.w	ip, #0
 8002898:	4658      	mov	r0, fp
 800289a:	4661      	mov	r1, ip
 800289c:	b013      	add	sp, #76	; 0x4c
 800289e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028a2:	2302      	movs	r3, #2
 80028a4:	e7e0      	b.n	8002868 <__ieee754_pow+0xd8>
 80028a6:	2e00      	cmp	r6, #0
 80028a8:	daf2      	bge.n	8002890 <__ieee754_pow+0x100>
 80028aa:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80028ae:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80028b2:	e7f1      	b.n	8002898 <__ieee754_pow+0x108>
 80028b4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80028b8:	d108      	bne.n	80028cc <__ieee754_pow+0x13c>
 80028ba:	463a      	mov	r2, r7
 80028bc:	4643      	mov	r3, r8
 80028be:	4638      	mov	r0, r7
 80028c0:	4641      	mov	r1, r8
 80028c2:	f7fd fe01 	bl	80004c8 <__aeabi_dmul>
 80028c6:	4683      	mov	fp, r0
 80028c8:	468c      	mov	ip, r1
 80028ca:	e7e5      	b.n	8002898 <__ieee754_pow+0x108>
 80028cc:	4b3b      	ldr	r3, [pc, #236]	; (80029bc <__ieee754_pow+0x22c>)
 80028ce:	429e      	cmp	r6, r3
 80028d0:	d10b      	bne.n	80028ea <__ieee754_pow+0x15a>
 80028d2:	f1b9 0f00 	cmp.w	r9, #0
 80028d6:	db08      	blt.n	80028ea <__ieee754_pow+0x15a>
 80028d8:	4638      	mov	r0, r7
 80028da:	4641      	mov	r1, r8
 80028dc:	b013      	add	sp, #76	; 0x4c
 80028de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028e2:	f000 bc6b 	b.w	80031bc <__ieee754_sqrt>
 80028e6:	2300      	movs	r3, #0
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	4638      	mov	r0, r7
 80028ec:	4641      	mov	r1, r8
 80028ee:	f000 fd11 	bl	8003314 <fabs>
 80028f2:	4683      	mov	fp, r0
 80028f4:	468c      	mov	ip, r1
 80028f6:	f1ba 0f00 	cmp.w	sl, #0
 80028fa:	d129      	bne.n	8002950 <__ieee754_pow+0x1c0>
 80028fc:	b124      	cbz	r4, 8002908 <__ieee754_pow+0x178>
 80028fe:	4b2d      	ldr	r3, [pc, #180]	; (80029b4 <__ieee754_pow+0x224>)
 8002900:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8002904:	429a      	cmp	r2, r3
 8002906:	d123      	bne.n	8002950 <__ieee754_pow+0x1c0>
 8002908:	2e00      	cmp	r6, #0
 800290a:	da07      	bge.n	800291c <__ieee754_pow+0x18c>
 800290c:	465a      	mov	r2, fp
 800290e:	4663      	mov	r3, ip
 8002910:	2000      	movs	r0, #0
 8002912:	4928      	ldr	r1, [pc, #160]	; (80029b4 <__ieee754_pow+0x224>)
 8002914:	f7fd ff02 	bl	800071c <__aeabi_ddiv>
 8002918:	4683      	mov	fp, r0
 800291a:	468c      	mov	ip, r1
 800291c:	f1b9 0f00 	cmp.w	r9, #0
 8002920:	daba      	bge.n	8002898 <__ieee754_pow+0x108>
 8002922:	9b00      	ldr	r3, [sp, #0]
 8002924:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002928:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800292c:	4323      	orrs	r3, r4
 800292e:	d108      	bne.n	8002942 <__ieee754_pow+0x1b2>
 8002930:	465a      	mov	r2, fp
 8002932:	4663      	mov	r3, ip
 8002934:	4658      	mov	r0, fp
 8002936:	4661      	mov	r1, ip
 8002938:	f7fd fc0e 	bl	8000158 <__aeabi_dsub>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	e78e      	b.n	8002860 <__ieee754_pow+0xd0>
 8002942:	9b00      	ldr	r3, [sp, #0]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d1a7      	bne.n	8002898 <__ieee754_pow+0x108>
 8002948:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800294c:	469c      	mov	ip, r3
 800294e:	e7a3      	b.n	8002898 <__ieee754_pow+0x108>
 8002950:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8002954:	3b01      	subs	r3, #1
 8002956:	930c      	str	r3, [sp, #48]	; 0x30
 8002958:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800295a:	9b00      	ldr	r3, [sp, #0]
 800295c:	4313      	orrs	r3, r2
 800295e:	d104      	bne.n	800296a <__ieee754_pow+0x1da>
 8002960:	463a      	mov	r2, r7
 8002962:	4643      	mov	r3, r8
 8002964:	4638      	mov	r0, r7
 8002966:	4641      	mov	r1, r8
 8002968:	e7e6      	b.n	8002938 <__ieee754_pow+0x1a8>
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <__ieee754_pow+0x230>)
 800296c:	429d      	cmp	r5, r3
 800296e:	f340 80f9 	ble.w	8002b64 <__ieee754_pow+0x3d4>
 8002972:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8002976:	429d      	cmp	r5, r3
 8002978:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <__ieee754_pow+0x228>)
 800297a:	dd09      	ble.n	8002990 <__ieee754_pow+0x200>
 800297c:	429c      	cmp	r4, r3
 800297e:	dc0c      	bgt.n	800299a <__ieee754_pow+0x20a>
 8002980:	2e00      	cmp	r6, #0
 8002982:	da85      	bge.n	8002890 <__ieee754_pow+0x100>
 8002984:	a306      	add	r3, pc, #24	; (adr r3, 80029a0 <__ieee754_pow+0x210>)
 8002986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298a:	4610      	mov	r0, r2
 800298c:	4619      	mov	r1, r3
 800298e:	e798      	b.n	80028c2 <__ieee754_pow+0x132>
 8002990:	429c      	cmp	r4, r3
 8002992:	dbf5      	blt.n	8002980 <__ieee754_pow+0x1f0>
 8002994:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <__ieee754_pow+0x224>)
 8002996:	429c      	cmp	r4, r3
 8002998:	dd14      	ble.n	80029c4 <__ieee754_pow+0x234>
 800299a:	2e00      	cmp	r6, #0
 800299c:	dcf2      	bgt.n	8002984 <__ieee754_pow+0x1f4>
 800299e:	e777      	b.n	8002890 <__ieee754_pow+0x100>
 80029a0:	8800759c 	.word	0x8800759c
 80029a4:	7e37e43c 	.word	0x7e37e43c
 80029a8:	7ff00000 	.word	0x7ff00000
 80029ac:	08003590 	.word	0x08003590
 80029b0:	433fffff 	.word	0x433fffff
 80029b4:	3ff00000 	.word	0x3ff00000
 80029b8:	3fefffff 	.word	0x3fefffff
 80029bc:	3fe00000 	.word	0x3fe00000
 80029c0:	41e00000 	.word	0x41e00000
 80029c4:	4661      	mov	r1, ip
 80029c6:	2200      	movs	r2, #0
 80029c8:	4658      	mov	r0, fp
 80029ca:	4b61      	ldr	r3, [pc, #388]	; (8002b50 <__ieee754_pow+0x3c0>)
 80029cc:	f7fd fbc4 	bl	8000158 <__aeabi_dsub>
 80029d0:	a355      	add	r3, pc, #340	; (adr r3, 8002b28 <__ieee754_pow+0x398>)
 80029d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d6:	4604      	mov	r4, r0
 80029d8:	460d      	mov	r5, r1
 80029da:	f7fd fd75 	bl	80004c8 <__aeabi_dmul>
 80029de:	a354      	add	r3, pc, #336	; (adr r3, 8002b30 <__ieee754_pow+0x3a0>)
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	4606      	mov	r6, r0
 80029e6:	460f      	mov	r7, r1
 80029e8:	4620      	mov	r0, r4
 80029ea:	4629      	mov	r1, r5
 80029ec:	f7fd fd6c 	bl	80004c8 <__aeabi_dmul>
 80029f0:	2200      	movs	r2, #0
 80029f2:	4682      	mov	sl, r0
 80029f4:	468b      	mov	fp, r1
 80029f6:	4620      	mov	r0, r4
 80029f8:	4629      	mov	r1, r5
 80029fa:	4b56      	ldr	r3, [pc, #344]	; (8002b54 <__ieee754_pow+0x3c4>)
 80029fc:	f7fd fd64 	bl	80004c8 <__aeabi_dmul>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	a14c      	add	r1, pc, #304	; (adr r1, 8002b38 <__ieee754_pow+0x3a8>)
 8002a06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a0a:	f7fd fba5 	bl	8000158 <__aeabi_dsub>
 8002a0e:	4622      	mov	r2, r4
 8002a10:	462b      	mov	r3, r5
 8002a12:	f7fd fd59 	bl	80004c8 <__aeabi_dmul>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	494e      	ldr	r1, [pc, #312]	; (8002b58 <__ieee754_pow+0x3c8>)
 8002a1e:	f7fd fb9b 	bl	8000158 <__aeabi_dsub>
 8002a22:	4622      	mov	r2, r4
 8002a24:	462b      	mov	r3, r5
 8002a26:	4680      	mov	r8, r0
 8002a28:	4689      	mov	r9, r1
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	4629      	mov	r1, r5
 8002a2e:	f7fd fd4b 	bl	80004c8 <__aeabi_dmul>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4640      	mov	r0, r8
 8002a38:	4649      	mov	r1, r9
 8002a3a:	f7fd fd45 	bl	80004c8 <__aeabi_dmul>
 8002a3e:	a340      	add	r3, pc, #256	; (adr r3, 8002b40 <__ieee754_pow+0x3b0>)
 8002a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a44:	f7fd fd40 	bl	80004c8 <__aeabi_dmul>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4650      	mov	r0, sl
 8002a4e:	4659      	mov	r1, fp
 8002a50:	f7fd fb82 	bl	8000158 <__aeabi_dsub>
 8002a54:	f04f 0a00 	mov.w	sl, #0
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4604      	mov	r4, r0
 8002a5e:	460d      	mov	r5, r1
 8002a60:	4630      	mov	r0, r6
 8002a62:	4639      	mov	r1, r7
 8002a64:	f7fd fb7a 	bl	800015c <__adddf3>
 8002a68:	4632      	mov	r2, r6
 8002a6a:	463b      	mov	r3, r7
 8002a6c:	4650      	mov	r0, sl
 8002a6e:	468b      	mov	fp, r1
 8002a70:	f7fd fb72 	bl	8000158 <__aeabi_dsub>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4620      	mov	r0, r4
 8002a7a:	4629      	mov	r1, r5
 8002a7c:	f7fd fb6c 	bl	8000158 <__aeabi_dsub>
 8002a80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002a84:	9b00      	ldr	r3, [sp, #0]
 8002a86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f04f 0600 	mov.w	r6, #0
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	bf0c      	ite	eq
 8002a96:	4b31      	ldreq	r3, [pc, #196]	; (8002b5c <__ieee754_pow+0x3cc>)
 8002a98:	4b2d      	ldrne	r3, [pc, #180]	; (8002b50 <__ieee754_pow+0x3c0>)
 8002a9a:	4604      	mov	r4, r0
 8002a9c:	460d      	mov	r5, r1
 8002a9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002aa2:	e9cd 2300 	strd	r2, r3, [sp]
 8002aa6:	4632      	mov	r2, r6
 8002aa8:	463b      	mov	r3, r7
 8002aaa:	f7fd fb55 	bl	8000158 <__aeabi_dsub>
 8002aae:	4652      	mov	r2, sl
 8002ab0:	465b      	mov	r3, fp
 8002ab2:	f7fd fd09 	bl	80004c8 <__aeabi_dmul>
 8002ab6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002aba:	4680      	mov	r8, r0
 8002abc:	4689      	mov	r9, r1
 8002abe:	4620      	mov	r0, r4
 8002ac0:	4629      	mov	r1, r5
 8002ac2:	f7fd fd01 	bl	80004c8 <__aeabi_dmul>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4640      	mov	r0, r8
 8002acc:	4649      	mov	r1, r9
 8002ace:	f7fd fb45 	bl	800015c <__adddf3>
 8002ad2:	4632      	mov	r2, r6
 8002ad4:	463b      	mov	r3, r7
 8002ad6:	4680      	mov	r8, r0
 8002ad8:	4689      	mov	r9, r1
 8002ada:	4650      	mov	r0, sl
 8002adc:	4659      	mov	r1, fp
 8002ade:	f7fd fcf3 	bl	80004c8 <__aeabi_dmul>
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	460d      	mov	r5, r1
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4649      	mov	r1, r9
 8002aec:	4640      	mov	r0, r8
 8002aee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002af2:	f7fd fb33 	bl	800015c <__adddf3>
 8002af6:	4b1a      	ldr	r3, [pc, #104]	; (8002b60 <__ieee754_pow+0x3d0>)
 8002af8:	4682      	mov	sl, r0
 8002afa:	4299      	cmp	r1, r3
 8002afc:	460f      	mov	r7, r1
 8002afe:	460e      	mov	r6, r1
 8002b00:	f340 82ed 	ble.w	80030de <__ieee754_pow+0x94e>
 8002b04:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8002b08:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8002b0c:	4303      	orrs	r3, r0
 8002b0e:	f000 81e7 	beq.w	8002ee0 <__ieee754_pow+0x750>
 8002b12:	a30d      	add	r3, pc, #52	; (adr r3, 8002b48 <__ieee754_pow+0x3b8>)
 8002b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002b1c:	f7fd fcd4 	bl	80004c8 <__aeabi_dmul>
 8002b20:	a309      	add	r3, pc, #36	; (adr r3, 8002b48 <__ieee754_pow+0x3b8>)
 8002b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b26:	e6cc      	b.n	80028c2 <__ieee754_pow+0x132>
 8002b28:	60000000 	.word	0x60000000
 8002b2c:	3ff71547 	.word	0x3ff71547
 8002b30:	f85ddf44 	.word	0xf85ddf44
 8002b34:	3e54ae0b 	.word	0x3e54ae0b
 8002b38:	55555555 	.word	0x55555555
 8002b3c:	3fd55555 	.word	0x3fd55555
 8002b40:	652b82fe 	.word	0x652b82fe
 8002b44:	3ff71547 	.word	0x3ff71547
 8002b48:	8800759c 	.word	0x8800759c
 8002b4c:	7e37e43c 	.word	0x7e37e43c
 8002b50:	3ff00000 	.word	0x3ff00000
 8002b54:	3fd00000 	.word	0x3fd00000
 8002b58:	3fe00000 	.word	0x3fe00000
 8002b5c:	bff00000 	.word	0xbff00000
 8002b60:	408fffff 	.word	0x408fffff
 8002b64:	4bd4      	ldr	r3, [pc, #848]	; (8002eb8 <__ieee754_pow+0x728>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	ea09 0303 	and.w	r3, r9, r3
 8002b6c:	b943      	cbnz	r3, 8002b80 <__ieee754_pow+0x3f0>
 8002b6e:	4658      	mov	r0, fp
 8002b70:	4661      	mov	r1, ip
 8002b72:	4bd2      	ldr	r3, [pc, #840]	; (8002ebc <__ieee754_pow+0x72c>)
 8002b74:	f7fd fca8 	bl	80004c8 <__aeabi_dmul>
 8002b78:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8002b7c:	4683      	mov	fp, r0
 8002b7e:	460c      	mov	r4, r1
 8002b80:	1523      	asrs	r3, r4, #20
 8002b82:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002b86:	4413      	add	r3, r2
 8002b88:	930b      	str	r3, [sp, #44]	; 0x2c
 8002b8a:	4bcd      	ldr	r3, [pc, #820]	; (8002ec0 <__ieee754_pow+0x730>)
 8002b8c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002b90:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8002b94:	429c      	cmp	r4, r3
 8002b96:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002b9a:	dd08      	ble.n	8002bae <__ieee754_pow+0x41e>
 8002b9c:	4bc9      	ldr	r3, [pc, #804]	; (8002ec4 <__ieee754_pow+0x734>)
 8002b9e:	429c      	cmp	r4, r3
 8002ba0:	f340 819c 	ble.w	8002edc <__ieee754_pow+0x74c>
 8002ba4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002ba6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002baa:	3301      	adds	r3, #1
 8002bac:	930b      	str	r3, [sp, #44]	; 0x2c
 8002bae:	2600      	movs	r6, #0
 8002bb0:	00f3      	lsls	r3, r6, #3
 8002bb2:	930d      	str	r3, [sp, #52]	; 0x34
 8002bb4:	4bc4      	ldr	r3, [pc, #784]	; (8002ec8 <__ieee754_pow+0x738>)
 8002bb6:	4658      	mov	r0, fp
 8002bb8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002bbc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8002bc8:	4623      	mov	r3, r4
 8002bca:	f7fd fac5 	bl	8000158 <__aeabi_dsub>
 8002bce:	46da      	mov	sl, fp
 8002bd0:	462b      	mov	r3, r5
 8002bd2:	4652      	mov	r2, sl
 8002bd4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002bd8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002bdc:	f7fd fabe 	bl	800015c <__adddf3>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	2000      	movs	r0, #0
 8002be6:	49b9      	ldr	r1, [pc, #740]	; (8002ecc <__ieee754_pow+0x73c>)
 8002be8:	f7fd fd98 	bl	800071c <__aeabi_ddiv>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002bf4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002bf8:	f7fd fc66 	bl	80004c8 <__aeabi_dmul>
 8002bfc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002c00:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8002c04:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002c08:	2300      	movs	r3, #0
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	46ab      	mov	fp, r5
 8002c0e:	106d      	asrs	r5, r5, #1
 8002c10:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002c14:	9304      	str	r3, [sp, #16]
 8002c16:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8002c1a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8002c1e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8002c22:	4640      	mov	r0, r8
 8002c24:	4649      	mov	r1, r9
 8002c26:	4614      	mov	r4, r2
 8002c28:	461d      	mov	r5, r3
 8002c2a:	f7fd fc4d 	bl	80004c8 <__aeabi_dmul>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002c36:	f7fd fa8f 	bl	8000158 <__aeabi_dsub>
 8002c3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002c3e:	4606      	mov	r6, r0
 8002c40:	460f      	mov	r7, r1
 8002c42:	4620      	mov	r0, r4
 8002c44:	4629      	mov	r1, r5
 8002c46:	f7fd fa87 	bl	8000158 <__aeabi_dsub>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4650      	mov	r0, sl
 8002c50:	4659      	mov	r1, fp
 8002c52:	f7fd fa81 	bl	8000158 <__aeabi_dsub>
 8002c56:	4642      	mov	r2, r8
 8002c58:	464b      	mov	r3, r9
 8002c5a:	f7fd fc35 	bl	80004c8 <__aeabi_dmul>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4630      	mov	r0, r6
 8002c64:	4639      	mov	r1, r7
 8002c66:	f7fd fa77 	bl	8000158 <__aeabi_dsub>
 8002c6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002c6e:	f7fd fc2b 	bl	80004c8 <__aeabi_dmul>
 8002c72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002c76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f7fd fc23 	bl	80004c8 <__aeabi_dmul>
 8002c82:	a37b      	add	r3, pc, #492	; (adr r3, 8002e70 <__ieee754_pow+0x6e0>)
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	4604      	mov	r4, r0
 8002c8a:	460d      	mov	r5, r1
 8002c8c:	f7fd fc1c 	bl	80004c8 <__aeabi_dmul>
 8002c90:	a379      	add	r3, pc, #484	; (adr r3, 8002e78 <__ieee754_pow+0x6e8>)
 8002c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c96:	f7fd fa61 	bl	800015c <__adddf3>
 8002c9a:	4622      	mov	r2, r4
 8002c9c:	462b      	mov	r3, r5
 8002c9e:	f7fd fc13 	bl	80004c8 <__aeabi_dmul>
 8002ca2:	a377      	add	r3, pc, #476	; (adr r3, 8002e80 <__ieee754_pow+0x6f0>)
 8002ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca8:	f7fd fa58 	bl	800015c <__adddf3>
 8002cac:	4622      	mov	r2, r4
 8002cae:	462b      	mov	r3, r5
 8002cb0:	f7fd fc0a 	bl	80004c8 <__aeabi_dmul>
 8002cb4:	a374      	add	r3, pc, #464	; (adr r3, 8002e88 <__ieee754_pow+0x6f8>)
 8002cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cba:	f7fd fa4f 	bl	800015c <__adddf3>
 8002cbe:	4622      	mov	r2, r4
 8002cc0:	462b      	mov	r3, r5
 8002cc2:	f7fd fc01 	bl	80004c8 <__aeabi_dmul>
 8002cc6:	a372      	add	r3, pc, #456	; (adr r3, 8002e90 <__ieee754_pow+0x700>)
 8002cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ccc:	f7fd fa46 	bl	800015c <__adddf3>
 8002cd0:	4622      	mov	r2, r4
 8002cd2:	462b      	mov	r3, r5
 8002cd4:	f7fd fbf8 	bl	80004c8 <__aeabi_dmul>
 8002cd8:	a36f      	add	r3, pc, #444	; (adr r3, 8002e98 <__ieee754_pow+0x708>)
 8002cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cde:	f7fd fa3d 	bl	800015c <__adddf3>
 8002ce2:	4622      	mov	r2, r4
 8002ce4:	4606      	mov	r6, r0
 8002ce6:	460f      	mov	r7, r1
 8002ce8:	462b      	mov	r3, r5
 8002cea:	4620      	mov	r0, r4
 8002cec:	4629      	mov	r1, r5
 8002cee:	f7fd fbeb 	bl	80004c8 <__aeabi_dmul>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4630      	mov	r0, r6
 8002cf8:	4639      	mov	r1, r7
 8002cfa:	f7fd fbe5 	bl	80004c8 <__aeabi_dmul>
 8002cfe:	4604      	mov	r4, r0
 8002d00:	460d      	mov	r5, r1
 8002d02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002d06:	4642      	mov	r2, r8
 8002d08:	464b      	mov	r3, r9
 8002d0a:	f7fd fa27 	bl	800015c <__adddf3>
 8002d0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002d12:	f7fd fbd9 	bl	80004c8 <__aeabi_dmul>
 8002d16:	4622      	mov	r2, r4
 8002d18:	462b      	mov	r3, r5
 8002d1a:	f7fd fa1f 	bl	800015c <__adddf3>
 8002d1e:	4642      	mov	r2, r8
 8002d20:	4606      	mov	r6, r0
 8002d22:	460f      	mov	r7, r1
 8002d24:	464b      	mov	r3, r9
 8002d26:	4640      	mov	r0, r8
 8002d28:	4649      	mov	r1, r9
 8002d2a:	f7fd fbcd 	bl	80004c8 <__aeabi_dmul>
 8002d2e:	2200      	movs	r2, #0
 8002d30:	4b67      	ldr	r3, [pc, #412]	; (8002ed0 <__ieee754_pow+0x740>)
 8002d32:	4682      	mov	sl, r0
 8002d34:	468b      	mov	fp, r1
 8002d36:	f7fd fa11 	bl	800015c <__adddf3>
 8002d3a:	4632      	mov	r2, r6
 8002d3c:	463b      	mov	r3, r7
 8002d3e:	f7fd fa0d 	bl	800015c <__adddf3>
 8002d42:	9c04      	ldr	r4, [sp, #16]
 8002d44:	460d      	mov	r5, r1
 8002d46:	4622      	mov	r2, r4
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4640      	mov	r0, r8
 8002d4c:	4649      	mov	r1, r9
 8002d4e:	f7fd fbbb 	bl	80004c8 <__aeabi_dmul>
 8002d52:	2200      	movs	r2, #0
 8002d54:	4680      	mov	r8, r0
 8002d56:	4689      	mov	r9, r1
 8002d58:	4620      	mov	r0, r4
 8002d5a:	4629      	mov	r1, r5
 8002d5c:	4b5c      	ldr	r3, [pc, #368]	; (8002ed0 <__ieee754_pow+0x740>)
 8002d5e:	f7fd f9fb 	bl	8000158 <__aeabi_dsub>
 8002d62:	4652      	mov	r2, sl
 8002d64:	465b      	mov	r3, fp
 8002d66:	f7fd f9f7 	bl	8000158 <__aeabi_dsub>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4630      	mov	r0, r6
 8002d70:	4639      	mov	r1, r7
 8002d72:	f7fd f9f1 	bl	8000158 <__aeabi_dsub>
 8002d76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002d7a:	f7fd fba5 	bl	80004c8 <__aeabi_dmul>
 8002d7e:	4622      	mov	r2, r4
 8002d80:	4606      	mov	r6, r0
 8002d82:	460f      	mov	r7, r1
 8002d84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002d88:	462b      	mov	r3, r5
 8002d8a:	f7fd fb9d 	bl	80004c8 <__aeabi_dmul>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4630      	mov	r0, r6
 8002d94:	4639      	mov	r1, r7
 8002d96:	f7fd f9e1 	bl	800015c <__adddf3>
 8002d9a:	4606      	mov	r6, r0
 8002d9c:	460f      	mov	r7, r1
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4640      	mov	r0, r8
 8002da4:	4649      	mov	r1, r9
 8002da6:	f7fd f9d9 	bl	800015c <__adddf3>
 8002daa:	a33d      	add	r3, pc, #244	; (adr r3, 8002ea0 <__ieee754_pow+0x710>)
 8002dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db0:	9c04      	ldr	r4, [sp, #16]
 8002db2:	460d      	mov	r5, r1
 8002db4:	4620      	mov	r0, r4
 8002db6:	f7fd fb87 	bl	80004c8 <__aeabi_dmul>
 8002dba:	4642      	mov	r2, r8
 8002dbc:	464b      	mov	r3, r9
 8002dbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	f7fd f9c7 	bl	8000158 <__aeabi_dsub>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4630      	mov	r0, r6
 8002dd0:	4639      	mov	r1, r7
 8002dd2:	f7fd f9c1 	bl	8000158 <__aeabi_dsub>
 8002dd6:	a334      	add	r3, pc, #208	; (adr r3, 8002ea8 <__ieee754_pow+0x718>)
 8002dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ddc:	f7fd fb74 	bl	80004c8 <__aeabi_dmul>
 8002de0:	a333      	add	r3, pc, #204	; (adr r3, 8002eb0 <__ieee754_pow+0x720>)
 8002de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de6:	4606      	mov	r6, r0
 8002de8:	460f      	mov	r7, r1
 8002dea:	4620      	mov	r0, r4
 8002dec:	4629      	mov	r1, r5
 8002dee:	f7fd fb6b 	bl	80004c8 <__aeabi_dmul>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4630      	mov	r0, r6
 8002df8:	4639      	mov	r1, r7
 8002dfa:	f7fd f9af 	bl	800015c <__adddf3>
 8002dfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002e00:	4b34      	ldr	r3, [pc, #208]	; (8002ed4 <__ieee754_pow+0x744>)
 8002e02:	4413      	add	r3, r2
 8002e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e08:	f7fd f9a8 	bl	800015c <__adddf3>
 8002e0c:	4680      	mov	r8, r0
 8002e0e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002e10:	4689      	mov	r9, r1
 8002e12:	f7fd faef 	bl	80003f4 <__aeabi_i2d>
 8002e16:	4604      	mov	r4, r0
 8002e18:	460d      	mov	r5, r1
 8002e1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002e1c:	4b2e      	ldr	r3, [pc, #184]	; (8002ed8 <__ieee754_pow+0x748>)
 8002e1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e22:	4413      	add	r3, r2
 8002e24:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002e28:	4642      	mov	r2, r8
 8002e2a:	464b      	mov	r3, r9
 8002e2c:	f7fd f996 	bl	800015c <__adddf3>
 8002e30:	4632      	mov	r2, r6
 8002e32:	463b      	mov	r3, r7
 8002e34:	f7fd f992 	bl	800015c <__adddf3>
 8002e38:	4622      	mov	r2, r4
 8002e3a:	462b      	mov	r3, r5
 8002e3c:	f7fd f98e 	bl	800015c <__adddf3>
 8002e40:	f8dd a010 	ldr.w	sl, [sp, #16]
 8002e44:	4622      	mov	r2, r4
 8002e46:	462b      	mov	r3, r5
 8002e48:	4650      	mov	r0, sl
 8002e4a:	468b      	mov	fp, r1
 8002e4c:	f7fd f984 	bl	8000158 <__aeabi_dsub>
 8002e50:	4632      	mov	r2, r6
 8002e52:	463b      	mov	r3, r7
 8002e54:	f7fd f980 	bl	8000158 <__aeabi_dsub>
 8002e58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002e5c:	f7fd f97c 	bl	8000158 <__aeabi_dsub>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4640      	mov	r0, r8
 8002e66:	4649      	mov	r1, r9
 8002e68:	e608      	b.n	8002a7c <__ieee754_pow+0x2ec>
 8002e6a:	bf00      	nop
 8002e6c:	f3af 8000 	nop.w
 8002e70:	4a454eef 	.word	0x4a454eef
 8002e74:	3fca7e28 	.word	0x3fca7e28
 8002e78:	93c9db65 	.word	0x93c9db65
 8002e7c:	3fcd864a 	.word	0x3fcd864a
 8002e80:	a91d4101 	.word	0xa91d4101
 8002e84:	3fd17460 	.word	0x3fd17460
 8002e88:	518f264d 	.word	0x518f264d
 8002e8c:	3fd55555 	.word	0x3fd55555
 8002e90:	db6fabff 	.word	0xdb6fabff
 8002e94:	3fdb6db6 	.word	0x3fdb6db6
 8002e98:	33333303 	.word	0x33333303
 8002e9c:	3fe33333 	.word	0x3fe33333
 8002ea0:	e0000000 	.word	0xe0000000
 8002ea4:	3feec709 	.word	0x3feec709
 8002ea8:	dc3a03fd 	.word	0xdc3a03fd
 8002eac:	3feec709 	.word	0x3feec709
 8002eb0:	145b01f5 	.word	0x145b01f5
 8002eb4:	be3e2fe0 	.word	0xbe3e2fe0
 8002eb8:	7ff00000 	.word	0x7ff00000
 8002ebc:	43400000 	.word	0x43400000
 8002ec0:	0003988e 	.word	0x0003988e
 8002ec4:	000bb679 	.word	0x000bb679
 8002ec8:	08003598 	.word	0x08003598
 8002ecc:	3ff00000 	.word	0x3ff00000
 8002ed0:	40080000 	.word	0x40080000
 8002ed4:	080035b8 	.word	0x080035b8
 8002ed8:	080035a8 	.word	0x080035a8
 8002edc:	2601      	movs	r6, #1
 8002ede:	e667      	b.n	8002bb0 <__ieee754_pow+0x420>
 8002ee0:	a39d      	add	r3, pc, #628	; (adr r3, 8003158 <__ieee754_pow+0x9c8>)
 8002ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee6:	4640      	mov	r0, r8
 8002ee8:	4649      	mov	r1, r9
 8002eea:	f7fd f937 	bl	800015c <__adddf3>
 8002eee:	4622      	mov	r2, r4
 8002ef0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002ef4:	462b      	mov	r3, r5
 8002ef6:	4650      	mov	r0, sl
 8002ef8:	4639      	mov	r1, r7
 8002efa:	f7fd f92d 	bl	8000158 <__aeabi_dsub>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002f06:	f7fd fd6f 	bl	80009e8 <__aeabi_dcmpgt>
 8002f0a:	2800      	cmp	r0, #0
 8002f0c:	f47f ae01 	bne.w	8002b12 <__ieee754_pow+0x382>
 8002f10:	4aa5      	ldr	r2, [pc, #660]	; (80031a8 <__ieee754_pow+0xa18>)
 8002f12:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8002f16:	4293      	cmp	r3, r2
 8002f18:	f340 8103 	ble.w	8003122 <__ieee754_pow+0x992>
 8002f1c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8002f20:	2000      	movs	r0, #0
 8002f22:	151b      	asrs	r3, r3, #20
 8002f24:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8002f28:	fa4a f303 	asr.w	r3, sl, r3
 8002f2c:	4433      	add	r3, r6
 8002f2e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8002f32:	4f9e      	ldr	r7, [pc, #632]	; (80031ac <__ieee754_pow+0xa1c>)
 8002f34:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8002f38:	4117      	asrs	r7, r2
 8002f3a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8002f3e:	ea23 0107 	bic.w	r1, r3, r7
 8002f42:	f1c2 0214 	rsb	r2, r2, #20
 8002f46:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	fa4a fa02 	asr.w	sl, sl, r2
 8002f50:	2e00      	cmp	r6, #0
 8002f52:	4602      	mov	r2, r0
 8002f54:	4629      	mov	r1, r5
 8002f56:	4620      	mov	r0, r4
 8002f58:	bfb8      	it	lt
 8002f5a:	f1ca 0a00 	rsblt	sl, sl, #0
 8002f5e:	f7fd f8fb 	bl	8000158 <__aeabi_dsub>
 8002f62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f6a:	2400      	movs	r4, #0
 8002f6c:	4642      	mov	r2, r8
 8002f6e:	464b      	mov	r3, r9
 8002f70:	f7fd f8f4 	bl	800015c <__adddf3>
 8002f74:	a37a      	add	r3, pc, #488	; (adr r3, 8003160 <__ieee754_pow+0x9d0>)
 8002f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	460d      	mov	r5, r1
 8002f7e:	f7fd faa3 	bl	80004c8 <__aeabi_dmul>
 8002f82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002f86:	4606      	mov	r6, r0
 8002f88:	460f      	mov	r7, r1
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	f7fd f8e3 	bl	8000158 <__aeabi_dsub>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4640      	mov	r0, r8
 8002f98:	4649      	mov	r1, r9
 8002f9a:	f7fd f8dd 	bl	8000158 <__aeabi_dsub>
 8002f9e:	a372      	add	r3, pc, #456	; (adr r3, 8003168 <__ieee754_pow+0x9d8>)
 8002fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa4:	f7fd fa90 	bl	80004c8 <__aeabi_dmul>
 8002fa8:	a371      	add	r3, pc, #452	; (adr r3, 8003170 <__ieee754_pow+0x9e0>)
 8002faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fae:	4680      	mov	r8, r0
 8002fb0:	4689      	mov	r9, r1
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	4629      	mov	r1, r5
 8002fb6:	f7fd fa87 	bl	80004c8 <__aeabi_dmul>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4640      	mov	r0, r8
 8002fc0:	4649      	mov	r1, r9
 8002fc2:	f7fd f8cb 	bl	800015c <__adddf3>
 8002fc6:	4604      	mov	r4, r0
 8002fc8:	460d      	mov	r5, r1
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4630      	mov	r0, r6
 8002fd0:	4639      	mov	r1, r7
 8002fd2:	f7fd f8c3 	bl	800015c <__adddf3>
 8002fd6:	4632      	mov	r2, r6
 8002fd8:	463b      	mov	r3, r7
 8002fda:	4680      	mov	r8, r0
 8002fdc:	4689      	mov	r9, r1
 8002fde:	f7fd f8bb 	bl	8000158 <__aeabi_dsub>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	4629      	mov	r1, r5
 8002fea:	f7fd f8b5 	bl	8000158 <__aeabi_dsub>
 8002fee:	4642      	mov	r2, r8
 8002ff0:	4606      	mov	r6, r0
 8002ff2:	460f      	mov	r7, r1
 8002ff4:	464b      	mov	r3, r9
 8002ff6:	4640      	mov	r0, r8
 8002ff8:	4649      	mov	r1, r9
 8002ffa:	f7fd fa65 	bl	80004c8 <__aeabi_dmul>
 8002ffe:	a35e      	add	r3, pc, #376	; (adr r3, 8003178 <__ieee754_pow+0x9e8>)
 8003000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003004:	4604      	mov	r4, r0
 8003006:	460d      	mov	r5, r1
 8003008:	f7fd fa5e 	bl	80004c8 <__aeabi_dmul>
 800300c:	a35c      	add	r3, pc, #368	; (adr r3, 8003180 <__ieee754_pow+0x9f0>)
 800300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003012:	f7fd f8a1 	bl	8000158 <__aeabi_dsub>
 8003016:	4622      	mov	r2, r4
 8003018:	462b      	mov	r3, r5
 800301a:	f7fd fa55 	bl	80004c8 <__aeabi_dmul>
 800301e:	a35a      	add	r3, pc, #360	; (adr r3, 8003188 <__ieee754_pow+0x9f8>)
 8003020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003024:	f7fd f89a 	bl	800015c <__adddf3>
 8003028:	4622      	mov	r2, r4
 800302a:	462b      	mov	r3, r5
 800302c:	f7fd fa4c 	bl	80004c8 <__aeabi_dmul>
 8003030:	a357      	add	r3, pc, #348	; (adr r3, 8003190 <__ieee754_pow+0xa00>)
 8003032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003036:	f7fd f88f 	bl	8000158 <__aeabi_dsub>
 800303a:	4622      	mov	r2, r4
 800303c:	462b      	mov	r3, r5
 800303e:	f7fd fa43 	bl	80004c8 <__aeabi_dmul>
 8003042:	a355      	add	r3, pc, #340	; (adr r3, 8003198 <__ieee754_pow+0xa08>)
 8003044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003048:	f7fd f888 	bl	800015c <__adddf3>
 800304c:	4622      	mov	r2, r4
 800304e:	462b      	mov	r3, r5
 8003050:	f7fd fa3a 	bl	80004c8 <__aeabi_dmul>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4640      	mov	r0, r8
 800305a:	4649      	mov	r1, r9
 800305c:	f7fd f87c 	bl	8000158 <__aeabi_dsub>
 8003060:	4604      	mov	r4, r0
 8003062:	460d      	mov	r5, r1
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4640      	mov	r0, r8
 800306a:	4649      	mov	r1, r9
 800306c:	f7fd fa2c 	bl	80004c8 <__aeabi_dmul>
 8003070:	2200      	movs	r2, #0
 8003072:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003076:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800307a:	4620      	mov	r0, r4
 800307c:	4629      	mov	r1, r5
 800307e:	f7fd f86b 	bl	8000158 <__aeabi_dsub>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800308a:	f7fd fb47 	bl	800071c <__aeabi_ddiv>
 800308e:	4632      	mov	r2, r6
 8003090:	4604      	mov	r4, r0
 8003092:	460d      	mov	r5, r1
 8003094:	463b      	mov	r3, r7
 8003096:	4640      	mov	r0, r8
 8003098:	4649      	mov	r1, r9
 800309a:	f7fd fa15 	bl	80004c8 <__aeabi_dmul>
 800309e:	4632      	mov	r2, r6
 80030a0:	463b      	mov	r3, r7
 80030a2:	f7fd f85b 	bl	800015c <__adddf3>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4620      	mov	r0, r4
 80030ac:	4629      	mov	r1, r5
 80030ae:	f7fd f853 	bl	8000158 <__aeabi_dsub>
 80030b2:	4642      	mov	r2, r8
 80030b4:	464b      	mov	r3, r9
 80030b6:	f7fd f84f 	bl	8000158 <__aeabi_dsub>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	2000      	movs	r0, #0
 80030c0:	493b      	ldr	r1, [pc, #236]	; (80031b0 <__ieee754_pow+0xa20>)
 80030c2:	f7fd f849 	bl	8000158 <__aeabi_dsub>
 80030c6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80030ca:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80030ce:	da2b      	bge.n	8003128 <__ieee754_pow+0x998>
 80030d0:	4652      	mov	r2, sl
 80030d2:	f000 f9b9 	bl	8003448 <scalbn>
 80030d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80030da:	f7ff bbf2 	b.w	80028c2 <__ieee754_pow+0x132>
 80030de:	4b35      	ldr	r3, [pc, #212]	; (80031b4 <__ieee754_pow+0xa24>)
 80030e0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80030e4:	429f      	cmp	r7, r3
 80030e6:	f77f af13 	ble.w	8002f10 <__ieee754_pow+0x780>
 80030ea:	4b33      	ldr	r3, [pc, #204]	; (80031b8 <__ieee754_pow+0xa28>)
 80030ec:	440b      	add	r3, r1
 80030ee:	4303      	orrs	r3, r0
 80030f0:	d00b      	beq.n	800310a <__ieee754_pow+0x97a>
 80030f2:	a32b      	add	r3, pc, #172	; (adr r3, 80031a0 <__ieee754_pow+0xa10>)
 80030f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80030fc:	f7fd f9e4 	bl	80004c8 <__aeabi_dmul>
 8003100:	a327      	add	r3, pc, #156	; (adr r3, 80031a0 <__ieee754_pow+0xa10>)
 8003102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003106:	f7ff bbdc 	b.w	80028c2 <__ieee754_pow+0x132>
 800310a:	4622      	mov	r2, r4
 800310c:	462b      	mov	r3, r5
 800310e:	f7fd f823 	bl	8000158 <__aeabi_dsub>
 8003112:	4642      	mov	r2, r8
 8003114:	464b      	mov	r3, r9
 8003116:	f7fd fc5d 	bl	80009d4 <__aeabi_dcmpge>
 800311a:	2800      	cmp	r0, #0
 800311c:	f43f aef8 	beq.w	8002f10 <__ieee754_pow+0x780>
 8003120:	e7e7      	b.n	80030f2 <__ieee754_pow+0x962>
 8003122:	f04f 0a00 	mov.w	sl, #0
 8003126:	e71e      	b.n	8002f66 <__ieee754_pow+0x7d6>
 8003128:	4621      	mov	r1, r4
 800312a:	e7d4      	b.n	80030d6 <__ieee754_pow+0x946>
 800312c:	f04f 0b00 	mov.w	fp, #0
 8003130:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80031b0 <__ieee754_pow+0xa20>
 8003134:	f7ff bbb0 	b.w	8002898 <__ieee754_pow+0x108>
 8003138:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800313c:	f7ff bbac 	b.w	8002898 <__ieee754_pow+0x108>
 8003140:	4638      	mov	r0, r7
 8003142:	4641      	mov	r1, r8
 8003144:	f7ff bbbf 	b.w	80028c6 <__ieee754_pow+0x136>
 8003148:	9200      	str	r2, [sp, #0]
 800314a:	f7ff bb7f 	b.w	800284c <__ieee754_pow+0xbc>
 800314e:	2300      	movs	r3, #0
 8003150:	f7ff bb69 	b.w	8002826 <__ieee754_pow+0x96>
 8003154:	f3af 8000 	nop.w
 8003158:	652b82fe 	.word	0x652b82fe
 800315c:	3c971547 	.word	0x3c971547
 8003160:	00000000 	.word	0x00000000
 8003164:	3fe62e43 	.word	0x3fe62e43
 8003168:	fefa39ef 	.word	0xfefa39ef
 800316c:	3fe62e42 	.word	0x3fe62e42
 8003170:	0ca86c39 	.word	0x0ca86c39
 8003174:	be205c61 	.word	0xbe205c61
 8003178:	72bea4d0 	.word	0x72bea4d0
 800317c:	3e663769 	.word	0x3e663769
 8003180:	c5d26bf1 	.word	0xc5d26bf1
 8003184:	3ebbbd41 	.word	0x3ebbbd41
 8003188:	af25de2c 	.word	0xaf25de2c
 800318c:	3f11566a 	.word	0x3f11566a
 8003190:	16bebd93 	.word	0x16bebd93
 8003194:	3f66c16c 	.word	0x3f66c16c
 8003198:	5555553e 	.word	0x5555553e
 800319c:	3fc55555 	.word	0x3fc55555
 80031a0:	c2f8f359 	.word	0xc2f8f359
 80031a4:	01a56e1f 	.word	0x01a56e1f
 80031a8:	3fe00000 	.word	0x3fe00000
 80031ac:	000fffff 	.word	0x000fffff
 80031b0:	3ff00000 	.word	0x3ff00000
 80031b4:	4090cbff 	.word	0x4090cbff
 80031b8:	3f6f3400 	.word	0x3f6f3400

080031bc <__ieee754_sqrt>:
 80031bc:	f8df c150 	ldr.w	ip, [pc, #336]	; 8003310 <__ieee754_sqrt+0x154>
 80031c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031c4:	ea3c 0c01 	bics.w	ip, ip, r1
 80031c8:	460b      	mov	r3, r1
 80031ca:	4606      	mov	r6, r0
 80031cc:	460d      	mov	r5, r1
 80031ce:	460a      	mov	r2, r1
 80031d0:	4607      	mov	r7, r0
 80031d2:	4604      	mov	r4, r0
 80031d4:	d10e      	bne.n	80031f4 <__ieee754_sqrt+0x38>
 80031d6:	4602      	mov	r2, r0
 80031d8:	f7fd f976 	bl	80004c8 <__aeabi_dmul>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4630      	mov	r0, r6
 80031e2:	4629      	mov	r1, r5
 80031e4:	f7fc ffba 	bl	800015c <__adddf3>
 80031e8:	4606      	mov	r6, r0
 80031ea:	460d      	mov	r5, r1
 80031ec:	4630      	mov	r0, r6
 80031ee:	4629      	mov	r1, r5
 80031f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031f4:	2900      	cmp	r1, #0
 80031f6:	dc0d      	bgt.n	8003214 <__ieee754_sqrt+0x58>
 80031f8:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80031fc:	ea5c 0707 	orrs.w	r7, ip, r7
 8003200:	d0f4      	beq.n	80031ec <__ieee754_sqrt+0x30>
 8003202:	b139      	cbz	r1, 8003214 <__ieee754_sqrt+0x58>
 8003204:	4602      	mov	r2, r0
 8003206:	f7fc ffa7 	bl	8000158 <__aeabi_dsub>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	f7fd fa85 	bl	800071c <__aeabi_ddiv>
 8003212:	e7e9      	b.n	80031e8 <__ieee754_sqrt+0x2c>
 8003214:	1512      	asrs	r2, r2, #20
 8003216:	d074      	beq.n	8003302 <__ieee754_sqrt+0x146>
 8003218:	2000      	movs	r0, #0
 800321a:	07d5      	lsls	r5, r2, #31
 800321c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003220:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8003224:	bf5e      	ittt	pl
 8003226:	0fe3      	lsrpl	r3, r4, #31
 8003228:	0064      	lslpl	r4, r4, #1
 800322a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800322e:	0fe3      	lsrs	r3, r4, #31
 8003230:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8003234:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8003238:	2516      	movs	r5, #22
 800323a:	4601      	mov	r1, r0
 800323c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003240:	1076      	asrs	r6, r6, #1
 8003242:	0064      	lsls	r4, r4, #1
 8003244:	188f      	adds	r7, r1, r2
 8003246:	429f      	cmp	r7, r3
 8003248:	bfde      	ittt	le
 800324a:	1bdb      	suble	r3, r3, r7
 800324c:	18b9      	addle	r1, r7, r2
 800324e:	1880      	addle	r0, r0, r2
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	3d01      	subs	r5, #1
 8003254:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8003258:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800325c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8003260:	d1f0      	bne.n	8003244 <__ieee754_sqrt+0x88>
 8003262:	462a      	mov	r2, r5
 8003264:	f04f 0e20 	mov.w	lr, #32
 8003268:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800326c:	428b      	cmp	r3, r1
 800326e:	eb07 0c05 	add.w	ip, r7, r5
 8003272:	dc02      	bgt.n	800327a <__ieee754_sqrt+0xbe>
 8003274:	d113      	bne.n	800329e <__ieee754_sqrt+0xe2>
 8003276:	45a4      	cmp	ip, r4
 8003278:	d811      	bhi.n	800329e <__ieee754_sqrt+0xe2>
 800327a:	f1bc 0f00 	cmp.w	ip, #0
 800327e:	eb0c 0507 	add.w	r5, ip, r7
 8003282:	da43      	bge.n	800330c <__ieee754_sqrt+0x150>
 8003284:	2d00      	cmp	r5, #0
 8003286:	db41      	blt.n	800330c <__ieee754_sqrt+0x150>
 8003288:	f101 0801 	add.w	r8, r1, #1
 800328c:	1a5b      	subs	r3, r3, r1
 800328e:	4641      	mov	r1, r8
 8003290:	45a4      	cmp	ip, r4
 8003292:	bf88      	it	hi
 8003294:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8003298:	eba4 040c 	sub.w	r4, r4, ip
 800329c:	443a      	add	r2, r7
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	f1be 0e01 	subs.w	lr, lr, #1
 80032a4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80032a8:	ea4f 0757 	mov.w	r7, r7, lsr #1
 80032ac:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80032b0:	d1dc      	bne.n	800326c <__ieee754_sqrt+0xb0>
 80032b2:	4323      	orrs	r3, r4
 80032b4:	d006      	beq.n	80032c4 <__ieee754_sqrt+0x108>
 80032b6:	1c54      	adds	r4, r2, #1
 80032b8:	bf0b      	itete	eq
 80032ba:	4672      	moveq	r2, lr
 80032bc:	3201      	addne	r2, #1
 80032be:	3001      	addeq	r0, #1
 80032c0:	f022 0201 	bicne.w	r2, r2, #1
 80032c4:	1043      	asrs	r3, r0, #1
 80032c6:	07c1      	lsls	r1, r0, #31
 80032c8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80032cc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80032d0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80032d4:	bf48      	it	mi
 80032d6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80032da:	4610      	mov	r0, r2
 80032dc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80032e0:	e782      	b.n	80031e8 <__ieee754_sqrt+0x2c>
 80032e2:	0ae3      	lsrs	r3, r4, #11
 80032e4:	3915      	subs	r1, #21
 80032e6:	0564      	lsls	r4, r4, #21
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0fa      	beq.n	80032e2 <__ieee754_sqrt+0x126>
 80032ec:	02de      	lsls	r6, r3, #11
 80032ee:	d50a      	bpl.n	8003306 <__ieee754_sqrt+0x14a>
 80032f0:	f1c2 0020 	rsb	r0, r2, #32
 80032f4:	fa24 f000 	lsr.w	r0, r4, r0
 80032f8:	1e55      	subs	r5, r2, #1
 80032fa:	4094      	lsls	r4, r2
 80032fc:	4303      	orrs	r3, r0
 80032fe:	1b4a      	subs	r2, r1, r5
 8003300:	e78a      	b.n	8003218 <__ieee754_sqrt+0x5c>
 8003302:	4611      	mov	r1, r2
 8003304:	e7f0      	b.n	80032e8 <__ieee754_sqrt+0x12c>
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	3201      	adds	r2, #1
 800330a:	e7ef      	b.n	80032ec <__ieee754_sqrt+0x130>
 800330c:	4688      	mov	r8, r1
 800330e:	e7bd      	b.n	800328c <__ieee754_sqrt+0xd0>
 8003310:	7ff00000 	.word	0x7ff00000

08003314 <fabs>:
 8003314:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003318:	4770      	bx	lr

0800331a <finite>:
 800331a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800331e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003322:	0fc0      	lsrs	r0, r0, #31
 8003324:	4770      	bx	lr
	...

08003328 <nan>:
 8003328:	2000      	movs	r0, #0
 800332a:	4901      	ldr	r1, [pc, #4]	; (8003330 <nan+0x8>)
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	7ff80000 	.word	0x7ff80000

08003334 <rint>:
 8003334:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8003338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800333a:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800333e:	2f13      	cmp	r7, #19
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	460c      	mov	r4, r1
 8003346:	4605      	mov	r5, r0
 8003348:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800334c:	dc59      	bgt.n	8003402 <rint+0xce>
 800334e:	2f00      	cmp	r7, #0
 8003350:	da2a      	bge.n	80033a8 <rint+0x74>
 8003352:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003356:	4301      	orrs	r1, r0
 8003358:	d022      	beq.n	80033a0 <rint+0x6c>
 800335a:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800335e:	4301      	orrs	r1, r0
 8003360:	424d      	negs	r5, r1
 8003362:	430d      	orrs	r5, r1
 8003364:	4936      	ldr	r1, [pc, #216]	; (8003440 <rint+0x10c>)
 8003366:	0c5c      	lsrs	r4, r3, #17
 8003368:	0b2d      	lsrs	r5, r5, #12
 800336a:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800336e:	0464      	lsls	r4, r4, #17
 8003370:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8003374:	ea45 0304 	orr.w	r3, r5, r4
 8003378:	e9d1 4500 	ldrd	r4, r5, [r1]
 800337c:	4620      	mov	r0, r4
 800337e:	4629      	mov	r1, r5
 8003380:	f7fc feec 	bl	800015c <__adddf3>
 8003384:	e9cd 0100 	strd	r0, r1, [sp]
 8003388:	e9dd 0100 	ldrd	r0, r1, [sp]
 800338c:	462b      	mov	r3, r5
 800338e:	4622      	mov	r2, r4
 8003390:	f7fc fee2 	bl	8000158 <__aeabi_dsub>
 8003394:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003398:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4610      	mov	r0, r2
 80033a2:	4619      	mov	r1, r3
 80033a4:	b003      	add	sp, #12
 80033a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033a8:	4926      	ldr	r1, [pc, #152]	; (8003444 <rint+0x110>)
 80033aa:	4139      	asrs	r1, r7
 80033ac:	ea03 0001 	and.w	r0, r3, r1
 80033b0:	4310      	orrs	r0, r2
 80033b2:	d0f5      	beq.n	80033a0 <rint+0x6c>
 80033b4:	084b      	lsrs	r3, r1, #1
 80033b6:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 80033ba:	ea52 0501 	orrs.w	r5, r2, r1
 80033be:	d00c      	beq.n	80033da <rint+0xa6>
 80033c0:	ea24 0303 	bic.w	r3, r4, r3
 80033c4:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80033c8:	2f13      	cmp	r7, #19
 80033ca:	bf0c      	ite	eq
 80033cc:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 80033d0:	2500      	movne	r5, #0
 80033d2:	fa44 f707 	asr.w	r7, r4, r7
 80033d6:	ea43 0407 	orr.w	r4, r3, r7
 80033da:	4919      	ldr	r1, [pc, #100]	; (8003440 <rint+0x10c>)
 80033dc:	4623      	mov	r3, r4
 80033de:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80033e2:	462a      	mov	r2, r5
 80033e4:	e9d6 4500 	ldrd	r4, r5, [r6]
 80033e8:	4620      	mov	r0, r4
 80033ea:	4629      	mov	r1, r5
 80033ec:	f7fc feb6 	bl	800015c <__adddf3>
 80033f0:	e9cd 0100 	strd	r0, r1, [sp]
 80033f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80033f8:	4622      	mov	r2, r4
 80033fa:	462b      	mov	r3, r5
 80033fc:	f7fc feac 	bl	8000158 <__aeabi_dsub>
 8003400:	e7cc      	b.n	800339c <rint+0x68>
 8003402:	2f33      	cmp	r7, #51	; 0x33
 8003404:	dd05      	ble.n	8003412 <rint+0xde>
 8003406:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800340a:	d1c9      	bne.n	80033a0 <rint+0x6c>
 800340c:	f7fc fea6 	bl	800015c <__adddf3>
 8003410:	e7c4      	b.n	800339c <rint+0x68>
 8003412:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003416:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800341a:	fa21 f10c 	lsr.w	r1, r1, ip
 800341e:	4208      	tst	r0, r1
 8003420:	d0be      	beq.n	80033a0 <rint+0x6c>
 8003422:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8003426:	bf18      	it	ne
 8003428:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800342c:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8003430:	bf1e      	ittt	ne
 8003432:	ea20 0303 	bicne.w	r3, r0, r3
 8003436:	fa45 fc0c 	asrne.w	ip, r5, ip
 800343a:	ea43 050c 	orrne.w	r5, r3, ip
 800343e:	e7cc      	b.n	80033da <rint+0xa6>
 8003440:	080035c8 	.word	0x080035c8
 8003444:	000fffff 	.word	0x000fffff

08003448 <scalbn>:
 8003448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800344e:	4604      	mov	r4, r0
 8003450:	460d      	mov	r5, r1
 8003452:	4617      	mov	r7, r2
 8003454:	460b      	mov	r3, r1
 8003456:	b996      	cbnz	r6, 800347e <scalbn+0x36>
 8003458:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800345c:	4303      	orrs	r3, r0
 800345e:	d039      	beq.n	80034d4 <scalbn+0x8c>
 8003460:	4b35      	ldr	r3, [pc, #212]	; (8003538 <scalbn+0xf0>)
 8003462:	2200      	movs	r2, #0
 8003464:	f7fd f830 	bl	80004c8 <__aeabi_dmul>
 8003468:	4b34      	ldr	r3, [pc, #208]	; (800353c <scalbn+0xf4>)
 800346a:	4604      	mov	r4, r0
 800346c:	429f      	cmp	r7, r3
 800346e:	460d      	mov	r5, r1
 8003470:	da0f      	bge.n	8003492 <scalbn+0x4a>
 8003472:	a32d      	add	r3, pc, #180	; (adr r3, 8003528 <scalbn+0xe0>)
 8003474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003478:	f7fd f826 	bl	80004c8 <__aeabi_dmul>
 800347c:	e006      	b.n	800348c <scalbn+0x44>
 800347e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003482:	4296      	cmp	r6, r2
 8003484:	d10a      	bne.n	800349c <scalbn+0x54>
 8003486:	4602      	mov	r2, r0
 8003488:	f7fc fe68 	bl	800015c <__adddf3>
 800348c:	4604      	mov	r4, r0
 800348e:	460d      	mov	r5, r1
 8003490:	e020      	b.n	80034d4 <scalbn+0x8c>
 8003492:	460b      	mov	r3, r1
 8003494:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8003498:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800349c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80034a0:	19b9      	adds	r1, r7, r6
 80034a2:	4291      	cmp	r1, r2
 80034a4:	dd0e      	ble.n	80034c4 <scalbn+0x7c>
 80034a6:	a322      	add	r3, pc, #136	; (adr r3, 8003530 <scalbn+0xe8>)
 80034a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ac:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80034b0:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80034b4:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80034b8:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80034bc:	4820      	ldr	r0, [pc, #128]	; (8003540 <scalbn+0xf8>)
 80034be:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80034c2:	e7d9      	b.n	8003478 <scalbn+0x30>
 80034c4:	2900      	cmp	r1, #0
 80034c6:	dd08      	ble.n	80034da <scalbn+0x92>
 80034c8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80034cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80034d0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80034d4:	4620      	mov	r0, r4
 80034d6:	4629      	mov	r1, r5
 80034d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034da:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80034de:	da16      	bge.n	800350e <scalbn+0xc6>
 80034e0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80034e4:	429f      	cmp	r7, r3
 80034e6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80034ea:	dd08      	ble.n	80034fe <scalbn+0xb6>
 80034ec:	4c15      	ldr	r4, [pc, #84]	; (8003544 <scalbn+0xfc>)
 80034ee:	4814      	ldr	r0, [pc, #80]	; (8003540 <scalbn+0xf8>)
 80034f0:	f363 74df 	bfi	r4, r3, #31, #1
 80034f4:	a30e      	add	r3, pc, #56	; (adr r3, 8003530 <scalbn+0xe8>)
 80034f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fa:	4621      	mov	r1, r4
 80034fc:	e7bc      	b.n	8003478 <scalbn+0x30>
 80034fe:	4c12      	ldr	r4, [pc, #72]	; (8003548 <scalbn+0x100>)
 8003500:	4812      	ldr	r0, [pc, #72]	; (800354c <scalbn+0x104>)
 8003502:	f363 74df 	bfi	r4, r3, #31, #1
 8003506:	a308      	add	r3, pc, #32	; (adr r3, 8003528 <scalbn+0xe0>)
 8003508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350c:	e7f5      	b.n	80034fa <scalbn+0xb2>
 800350e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003512:	3136      	adds	r1, #54	; 0x36
 8003514:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003518:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800351c:	4620      	mov	r0, r4
 800351e:	4629      	mov	r1, r5
 8003520:	2200      	movs	r2, #0
 8003522:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <scalbn+0x108>)
 8003524:	e7a8      	b.n	8003478 <scalbn+0x30>
 8003526:	bf00      	nop
 8003528:	c2f8f359 	.word	0xc2f8f359
 800352c:	01a56e1f 	.word	0x01a56e1f
 8003530:	8800759c 	.word	0x8800759c
 8003534:	7e37e43c 	.word	0x7e37e43c
 8003538:	43500000 	.word	0x43500000
 800353c:	ffff3cb0 	.word	0xffff3cb0
 8003540:	8800759c 	.word	0x8800759c
 8003544:	7e37e43c 	.word	0x7e37e43c
 8003548:	01a56e1f 	.word	0x01a56e1f
 800354c:	c2f8f359 	.word	0xc2f8f359
 8003550:	3c900000 	.word	0x3c900000

08003554 <_init>:
 8003554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003556:	bf00      	nop
 8003558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355a:	bc08      	pop	{r3}
 800355c:	469e      	mov	lr, r3
 800355e:	4770      	bx	lr

08003560 <_fini>:
 8003560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003562:	bf00      	nop
 8003564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003566:	bc08      	pop	{r3}
 8003568:	469e      	mov	lr, r3
 800356a:	4770      	bx	lr

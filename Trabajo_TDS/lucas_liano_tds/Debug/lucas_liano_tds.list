
lucas_liano_tds.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080028e0  080028e0  000128e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a88  08002a88  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002a88  08002a88  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a88  08002a88  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a88  08002a88  00012a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a8c  08002a8c  00012a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  20000018  08002aa4  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08002aa4  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000763b  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019e3  00000000  00000000  00027678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  00029060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000688  00000000  00000000  00029790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170e6  00000000  00000000  00029e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007e94  00000000  00000000  00040efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008288d  00000000  00000000  00048d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cb61f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b54  00000000  00000000  000cb674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	080028c4 	.word	0x080028c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	080028c4 	.word	0x080028c4

0800014c <inicializar_arrebote>:
#include "arrebote.h"

void inicializar_arrebote(arrebote *s, uint8_t activo_en_cero, uint16_t debounce)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
 8000158:	4613      	mov	r3, r2
 800015a:	803b      	strh	r3, [r7, #0]
	s->debounce = debounce;
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	883a      	ldrh	r2, [r7, #0]
 8000160:	805a      	strh	r2, [r3, #2]
	s->debounce_ticks=0;
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2200      	movs	r2, #0
 8000166:	801a      	strh	r2, [r3, #0]
	s->activo_en_cero = (activo_en_cero)?1:0;
 8000168:	78fb      	ldrb	r3, [r7, #3]
 800016a:	2b00      	cmp	r3, #0
 800016c:	bf14      	ite	ne
 800016e:	2301      	movne	r3, #1
 8000170:	2300      	moveq	r3, #0
 8000172:	b2db      	uxtb	r3, r3
 8000174:	461a      	mov	r2, r3
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	71da      	strb	r2, [r3, #7]
	s->estado = 0;
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	2200      	movs	r2, #0
 800017e:	711a      	strb	r2, [r3, #4]
	s->estado_pin = (uint8_t)BTN_LIBRE;
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	2200      	movs	r2, #0
 8000184:	715a      	strb	r2, [r3, #5]
	s->estado_anterior_pin = (uint8_t)BTN_PRESIONADO;
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	2201      	movs	r2, #1
 800018a:	719a      	strb	r2, [r3, #6]
}
 800018c:	bf00      	nop
 800018e:	370c      	adds	r7, #12
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
	...

08000198 <chequear_arrebote>:

void chequear_arrebote(arrebote *s, uint32_t estado)
{
 8000198:	b480      	push	{r7}
 800019a:	b085      	sub	sp, #20
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	6039      	str	r1, [r7, #0]
	int boton;
	boton = (estado) ? 1 : 0;
 80001a2:	683b      	ldr	r3, [r7, #0]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	bf14      	ite	ne
 80001a8:	2301      	movne	r3, #1
 80001aa:	2300      	moveq	r3, #0
 80001ac:	b2db      	uxtb	r3, r3
 80001ae:	60fb      	str	r3, [r7, #12]
	boton = boton ^ s->activo_en_cero;
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	79db      	ldrb	r3, [r3, #7]
 80001b4:	461a      	mov	r2, r3
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	4053      	eors	r3, r2
 80001ba:	60fb      	str	r3, [r7, #12]

	switch (s->estado)
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	791b      	ldrb	r3, [r3, #4]
 80001c0:	2b03      	cmp	r3, #3
 80001c2:	d866      	bhi.n	8000292 <chequear_arrebote+0xfa>
 80001c4:	a201      	add	r2, pc, #4	; (adr r2, 80001cc <chequear_arrebote+0x34>)
 80001c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ca:	bf00      	nop
 80001cc:	080001dd 	.word	0x080001dd
 80001d0:	080001ff 	.word	0x080001ff
 80001d4:	08000235 	.word	0x08000235
 80001d8:	08000257 	.word	0x08000257
	{
	case 0:
		if (boton)
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d006      	beq.n	80001f0 <chequear_arrebote+0x58>
		{
			s->debounce_ticks = s->debounce;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	885a      	ldrh	r2, [r3, #2]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	801a      	strh	r2, [r3, #0]
			s->estado = 1;
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2201      	movs	r2, #1
 80001ee:	711a      	strb	r2, [r3, #4]
		}
		s->estado_pin = BTN_LIBRE;
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	2200      	movs	r2, #0
 80001f4:	715a      	strb	r2, [r3, #5]
		s->estado_anterior_pin = BTN_LIBRE;
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	2200      	movs	r2, #0
 80001fa:	719a      	strb	r2, [r3, #6]
		break;
 80001fc:	e049      	b.n	8000292 <chequear_arrebote+0xfa>
	case 1:
		if (!(--(s->debounce_ticks)))
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	881b      	ldrh	r3, [r3, #0]
 8000202:	3b01      	subs	r3, #1
 8000204:	b29a      	uxth	r2, r3
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	801a      	strh	r2, [r3, #0]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	881b      	ldrh	r3, [r3, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d13c      	bne.n	800028c <chequear_arrebote+0xf4>
		{
			if (boton)
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d009      	beq.n	800022c <chequear_arrebote+0x94>
			{
				s->estado_pin = BTN_PRESIONADO;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2201      	movs	r2, #1
 800021c:	715a      	strb	r2, [r3, #5]
				s->estado_anterior_pin = BTN_LIBRE;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2200      	movs	r2, #0
 8000222:	719a      	strb	r2, [r3, #6]
				s->estado = 2;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	2202      	movs	r2, #2
 8000228:	711a      	strb	r2, [r3, #4]
			else
			{
				s->estado = 0;
			}
		}
		break;
 800022a:	e02f      	b.n	800028c <chequear_arrebote+0xf4>
				s->estado = 0;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2200      	movs	r2, #0
 8000230:	711a      	strb	r2, [r3, #4]
		break;
 8000232:	e02b      	b.n	800028c <chequear_arrebote+0xf4>
	case 2:
		if (!boton)
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d106      	bne.n	8000248 <chequear_arrebote+0xb0>
		{
			s->debounce_ticks = s->debounce;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	885a      	ldrh	r2, [r3, #2]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	801a      	strh	r2, [r3, #0]
			s->estado = 3;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2203      	movs	r2, #3
 8000246:	711a      	strb	r2, [r3, #4]
		}
		s->estado_pin = BTN_PRESIONADO;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2201      	movs	r2, #1
 800024c:	715a      	strb	r2, [r3, #5]
		s->estado_anterior_pin = BTN_PRESIONADO;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2201      	movs	r2, #1
 8000252:	719a      	strb	r2, [r3, #6]
		break;
 8000254:	e01d      	b.n	8000292 <chequear_arrebote+0xfa>
	case 3:
		if (!(--(s->debounce_ticks)))
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	881b      	ldrh	r3, [r3, #0]
 800025a:	3b01      	subs	r3, #1
 800025c:	b29a      	uxth	r2, r3
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	801a      	strh	r2, [r3, #0]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	881b      	ldrh	r3, [r3, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d112      	bne.n	8000290 <chequear_arrebote+0xf8>
		{
			if (!boton)
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d109      	bne.n	8000284 <chequear_arrebote+0xec>
			{
				s->estado_pin = BTN_LIBRE;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2200      	movs	r2, #0
 8000274:	715a      	strb	r2, [r3, #5]
				s->estado_anterior_pin = BTN_PRESIONADO;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	2201      	movs	r2, #1
 800027a:	719a      	strb	r2, [r3, #6]
				s->estado = 0;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2200      	movs	r2, #0
 8000280:	711a      	strb	r2, [r3, #4]
			else
			{
				s->estado = 2;
			}
		}
		break;
 8000282:	e005      	b.n	8000290 <chequear_arrebote+0xf8>
				s->estado = 2;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2202      	movs	r2, #2
 8000288:	711a      	strb	r2, [r3, #4]
		break;
 800028a:	e001      	b.n	8000290 <chequear_arrebote+0xf8>
		break;
 800028c:	bf00      	nop
 800028e:	e000      	b.n	8000292 <chequear_arrebote+0xfa>
		break;
 8000290:	bf00      	nop
	}
}
 8000292:	bf00      	nop
 8000294:	3714      	adds	r7, #20
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr

0800029c <hay_flanco_arrebote>:

int hay_flanco_arrebote(arrebote *s)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	return (s->estado_pin == BTN_PRESIONADO) && (s->estado_anterior_pin == BTN_LIBRE);
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	795b      	ldrb	r3, [r3, #5]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d105      	bne.n	80002b8 <hay_flanco_arrebote+0x1c>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	799b      	ldrb	r3, [r3, #6]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d101      	bne.n	80002b8 <hay_flanco_arrebote+0x1c>
 80002b4:	2301      	movs	r3, #1
 80002b6:	e000      	b.n	80002ba <hay_flanco_arrebote+0x1e>
 80002b8:	2300      	movs	r3, #0
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr

080002c4 <falla_sistema>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void falla_sistema(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002ca:	b672      	cpsid	i
}
 80002cc:	bf00      	nop
	/*Si una tarea se pasa de ticks se hace fallar al sistema*/
	__disable_irq();
	while (1)
	{
		for (uint32_t i = 0; i < 100000; i++);
 80002ce:	2300      	movs	r3, #0
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	e002      	b.n	80002da <falla_sistema+0x16>
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	3301      	adds	r3, #1
 80002d8:	607b      	str	r3, [r7, #4]
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	4a04      	ldr	r2, [pc, #16]	; (80002f0 <falla_sistema+0x2c>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d9f8      	bls.n	80002d4 <falla_sistema+0x10>
		HAL_GPIO_TogglePin(LED_PLACA_PUERTO, LED_PLACA_PIN);
 80002e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e6:	4803      	ldr	r0, [pc, #12]	; (80002f4 <falla_sistema+0x30>)
 80002e8:	f001 fdb1 	bl	8001e4e <HAL_GPIO_TogglePin>
		for (uint32_t i = 0; i < 100000; i++);
 80002ec:	e7ef      	b.n	80002ce <falla_sistema+0xa>
 80002ee:	bf00      	nop
 80002f0:	0001869f 	.word	0x0001869f
 80002f4:	40011000 	.word	0x40011000

080002f8 <xorshift32>:
	}
}

uint32_t xorshift32(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
	static uint32_t x = 5761455;
	x ^= x << 13;
 80002fc:	4b0e      	ldr	r3, [pc, #56]	; (8000338 <xorshift32+0x40>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	035a      	lsls	r2, r3, #13
 8000302:	4b0d      	ldr	r3, [pc, #52]	; (8000338 <xorshift32+0x40>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4053      	eors	r3, r2
 8000308:	4a0b      	ldr	r2, [pc, #44]	; (8000338 <xorshift32+0x40>)
 800030a:	6013      	str	r3, [r2, #0]
	x ^= x >> 17;
 800030c:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <xorshift32+0x40>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	0c5a      	lsrs	r2, r3, #17
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <xorshift32+0x40>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4053      	eors	r3, r2
 8000318:	4a07      	ldr	r2, [pc, #28]	; (8000338 <xorshift32+0x40>)
 800031a:	6013      	str	r3, [r2, #0]
	x ^= x << 5;
 800031c:	4b06      	ldr	r3, [pc, #24]	; (8000338 <xorshift32+0x40>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	015a      	lsls	r2, r3, #5
 8000322:	4b05      	ldr	r3, [pc, #20]	; (8000338 <xorshift32+0x40>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4053      	eors	r3, r2
 8000328:	4a03      	ldr	r2, [pc, #12]	; (8000338 <xorshift32+0x40>)
 800032a:	6013      	str	r3, [r2, #0]
	return x;
 800032c:	4b02      	ldr	r3, [pc, #8]	; (8000338 <xorshift32+0x40>)
 800032e:	681b      	ldr	r3, [r3, #0]
}
 8000330:	4618      	mov	r0, r3
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr
 8000338:	20000000 	.word	0x20000000

0800033c <tarea_calculo>:

void tarea_calculo(void *p)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	uint32_t clave;
	chequear_arrebote(&pulsador, HAL_GPIO_ReadPin(PULSADOR_PUERTO, PULSADOR_PIN));
 8000344:	2101      	movs	r1, #1
 8000346:	4816      	ldr	r0, [pc, #88]	; (80003a0 <tarea_calculo+0x64>)
 8000348:	f001 fd52 	bl	8001df0 <HAL_GPIO_ReadPin>
 800034c:	4603      	mov	r3, r0
 800034e:	4619      	mov	r1, r3
 8000350:	4814      	ldr	r0, [pc, #80]	; (80003a4 <tarea_calculo+0x68>)
 8000352:	f7ff ff21 	bl	8000198 <chequear_arrebote>
	if(hay_flanco_arrebote(&pulsador) && serie_disponible)
 8000356:	4813      	ldr	r0, [pc, #76]	; (80003a4 <tarea_calculo+0x68>)
 8000358:	f7ff ffa0 	bl	800029c <hay_flanco_arrebote>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d01a      	beq.n	8000398 <tarea_calculo+0x5c>
 8000362:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <tarea_calculo+0x6c>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d016      	beq.n	8000398 <tarea_calculo+0x5c>
	{
		clave = xorshift32();
 800036a:	f7ff ffc5 	bl	80002f8 <xorshift32>
 800036e:	4603      	mov	r3, r0
 8000370:	60fb      	str	r3, [r7, #12]
		sha3_Init512(&c);
 8000372:	480e      	ldr	r0, [pc, #56]	; (80003ac <tarea_calculo+0x70>)
 8000374:	f000 fdb3 	bl	8000ede <sha3_Init512>
		sha3_Update(&c, &clave, sizeof(clave));
 8000378:	f107 030c 	add.w	r3, r7, #12
 800037c:	2204      	movs	r2, #4
 800037e:	4619      	mov	r1, r3
 8000380:	480a      	ldr	r0, [pc, #40]	; (80003ac <tarea_calculo+0x70>)
 8000382:	f000 fdb9 	bl	8000ef8 <sha3_Update>
		hash = (uint8_t*)sha3_Finalize(&c);
 8000386:	4809      	ldr	r0, [pc, #36]	; (80003ac <tarea_calculo+0x70>)
 8000388:	f000 ffe4 	bl	8001354 <sha3_Finalize>
 800038c:	4603      	mov	r3, r0
 800038e:	4a08      	ldr	r2, [pc, #32]	; (80003b0 <tarea_calculo+0x74>)
 8000390:	6013      	str	r3, [r2, #0]
		enviar_serie = 1;
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <tarea_calculo+0x78>)
 8000394:	2201      	movs	r2, #1
 8000396:	601a      	str	r2, [r3, #0]
	}
}
 8000398:	bf00      	nop
 800039a:	3710      	adds	r7, #16
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	40010c00 	.word	0x40010c00
 80003a4:	20000328 	.word	0x20000328
 80003a8:	200000d4 	.word	0x200000d4
 80003ac:	20000128 	.word	0x20000128
 80003b0:	200000d8 	.word	0x200000d8
 80003b4:	200000dc 	.word	0x200000dc

080003b8 <bin2hex>:

char bin2hex(uint8_t valor, uint32_t nibble)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	6039      	str	r1, [r7, #0]
 80003c2:	71fb      	strb	r3, [r7, #7]
	if(nibble) valor>>=4;
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d002      	beq.n	80003d0 <bin2hex+0x18>
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	091b      	lsrs	r3, r3, #4
 80003ce:	71fb      	strb	r3, [r7, #7]
	valor&=0x0F;
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	f003 030f 	and.w	r3, r3, #15
 80003d6:	71fb      	strb	r3, [r7, #7]
	valor+='0';
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	3330      	adds	r3, #48	; 0x30
 80003dc:	71fb      	strb	r3, [r7, #7]
	if(valor>'9') valor+=7;
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	2b39      	cmp	r3, #57	; 0x39
 80003e2:	d902      	bls.n	80003ea <bin2hex+0x32>
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	3307      	adds	r3, #7
 80003e8:	71fb      	strb	r3, [r7, #7]
	return valor;
 80003ea:	79fb      	ldrb	r3, [r7, #7]
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr
	...

080003f8 <tarea_serie>:

void tarea_serie(void *p)
{
 80003f8:	b590      	push	{r4, r7, lr}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	int i;
	static uint32_t estado = 0;
	if(enviar_serie && estado==0)
 8000400:	4b3e      	ldr	r3, [pc, #248]	; (80004fc <tarea_serie+0x104>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d048      	beq.n	800049a <tarea_serie+0xa2>
 8000408:	4b3d      	ldr	r3, [pc, #244]	; (8000500 <tarea_serie+0x108>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d144      	bne.n	800049a <tarea_serie+0xa2>
	{
		enviar_serie = 0;
 8000410:	4b3a      	ldr	r3, [pc, #232]	; (80004fc <tarea_serie+0x104>)
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
		serie_disponible = 0;
 8000416:	4b3b      	ldr	r3, [pc, #236]	; (8000504 <tarea_serie+0x10c>)
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
		for(i=0; i<64; i++)
 800041c:	2300      	movs	r3, #0
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	e021      	b.n	8000466 <tarea_serie+0x6e>
		{
			buffer_serie[i*2+0]=bin2hex(hash[i], 1);
 8000422:	4b39      	ldr	r3, [pc, #228]	; (8000508 <tarea_serie+0x110>)
 8000424:	681a      	ldr	r2, [r3, #0]
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	4413      	add	r3, r2
 800042a:	781a      	ldrb	r2, [r3, #0]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	005c      	lsls	r4, r3, #1
 8000430:	2101      	movs	r1, #1
 8000432:	4610      	mov	r0, r2
 8000434:	f7ff ffc0 	bl	80003b8 <bin2hex>
 8000438:	4603      	mov	r3, r0
 800043a:	461a      	mov	r2, r3
 800043c:	4b33      	ldr	r3, [pc, #204]	; (800050c <tarea_serie+0x114>)
 800043e:	551a      	strb	r2, [r3, r4]
			buffer_serie[i*2+1]=bin2hex(hash[i], 0);
 8000440:	4b31      	ldr	r3, [pc, #196]	; (8000508 <tarea_serie+0x110>)
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	4413      	add	r3, r2
 8000448:	781a      	ldrb	r2, [r3, #0]
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	1c5c      	adds	r4, r3, #1
 8000450:	2100      	movs	r1, #0
 8000452:	4610      	mov	r0, r2
 8000454:	f7ff ffb0 	bl	80003b8 <bin2hex>
 8000458:	4603      	mov	r3, r0
 800045a:	461a      	mov	r2, r3
 800045c:	4b2b      	ldr	r3, [pc, #172]	; (800050c <tarea_serie+0x114>)
 800045e:	551a      	strb	r2, [r3, r4]
		for(i=0; i<64; i++)
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	3301      	adds	r3, #1
 8000464:	60fb      	str	r3, [r7, #12]
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	2b3f      	cmp	r3, #63	; 0x3f
 800046a:	ddda      	ble.n	8000422 <tarea_serie+0x2a>
		}
		buffer_serie[64]='\r';
 800046c:	4b27      	ldr	r3, [pc, #156]	; (800050c <tarea_serie+0x114>)
 800046e:	220d      	movs	r2, #13
 8000470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		buffer_serie[65]='\n';
 8000474:	4b25      	ldr	r3, [pc, #148]	; (800050c <tarea_serie+0x114>)
 8000476:	220a      	movs	r2, #10
 8000478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		buffer_serie[66]=0;
 800047c:	4b23      	ldr	r3, [pc, #140]	; (800050c <tarea_serie+0x114>)
 800047e:	2200      	movs	r2, #0
 8000480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		huart1.Instance->DR = buffer_serie[0]; 	//cargo el primero
 8000484:	4b21      	ldr	r3, [pc, #132]	; (800050c <tarea_serie+0x114>)
 8000486:	781a      	ldrb	r2, [r3, #0]
 8000488:	4b21      	ldr	r3, [pc, #132]	; (8000510 <tarea_serie+0x118>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	605a      	str	r2, [r3, #4]
		estado++;
 800048e:	4b1c      	ldr	r3, [pc, #112]	; (8000500 <tarea_serie+0x108>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	3301      	adds	r3, #1
 8000494:	4a1a      	ldr	r2, [pc, #104]	; (8000500 <tarea_serie+0x108>)
 8000496:	6013      	str	r3, [r2, #0]
 8000498:	e02b      	b.n	80004f2 <tarea_serie+0xfa>
	}
	else if(estado>0 && estado<66)
 800049a:	4b19      	ldr	r3, [pc, #100]	; (8000500 <tarea_serie+0x108>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d015      	beq.n	80004ce <tarea_serie+0xd6>
 80004a2:	4b17      	ldr	r3, [pc, #92]	; (8000500 <tarea_serie+0x108>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2b41      	cmp	r3, #65	; 0x41
 80004a8:	d811      	bhi.n	80004ce <tarea_serie+0xd6>
	{
		if( huart1.Instance->SR&UART_FLAG_TXE)
 80004aa:	4b19      	ldr	r3, [pc, #100]	; (8000510 <tarea_serie+0x118>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d01c      	beq.n	80004f2 <tarea_serie+0xfa>
		{
			huart1.Instance->DR = buffer_serie[estado++];
 80004b8:	4b11      	ldr	r3, [pc, #68]	; (8000500 <tarea_serie+0x108>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	1c5a      	adds	r2, r3, #1
 80004be:	4910      	ldr	r1, [pc, #64]	; (8000500 <tarea_serie+0x108>)
 80004c0:	600a      	str	r2, [r1, #0]
 80004c2:	4a12      	ldr	r2, [pc, #72]	; (800050c <tarea_serie+0x114>)
 80004c4:	5cd2      	ldrb	r2, [r2, r3]
 80004c6:	4b12      	ldr	r3, [pc, #72]	; (8000510 <tarea_serie+0x118>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
		if( huart1.Instance->SR&UART_FLAG_TXE)
 80004cc:	e011      	b.n	80004f2 <tarea_serie+0xfa>
		}
	}
	else if(estado == 66)
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <tarea_serie+0x108>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b42      	cmp	r3, #66	; 0x42
 80004d4:	d10d      	bne.n	80004f2 <tarea_serie+0xfa>
	{
		if(huart1.Instance->SR&UART_FLAG_TXE)
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <tarea_serie+0x118>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d006      	beq.n	80004f2 <tarea_serie+0xfa>
		{
			estado = 0;
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <tarea_serie+0x108>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
			serie_disponible = 1;
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <tarea_serie+0x10c>)
 80004ec:	2201      	movs	r2, #1
 80004ee:	601a      	str	r2, [r3, #0]
		}
	}
}
 80004f0:	e7ff      	b.n	80004f2 <tarea_serie+0xfa>
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd90      	pop	{r4, r7, pc}
 80004fa:	bf00      	nop
 80004fc:	200000dc 	.word	0x200000dc
 8000500:	20000034 	.word	0x20000034
 8000504:	200000d4 	.word	0x200000d4
 8000508:	200000d8 	.word	0x200000d8
 800050c:	20000054 	.word	0x20000054
 8000510:	200000e0 	.word	0x200000e0

08000514 <tarea_led>:

void tarea_led(void *p)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	static uint32_t tics = LED_TICKS;
	if(!--tics)
 800051c:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <tarea_led+0x34>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	3b01      	subs	r3, #1
 8000522:	4a09      	ldr	r2, [pc, #36]	; (8000548 <tarea_led+0x34>)
 8000524:	6013      	str	r3, [r2, #0]
 8000526:	4b08      	ldr	r3, [pc, #32]	; (8000548 <tarea_led+0x34>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d107      	bne.n	800053e <tarea_led+0x2a>
	{
		tics = LED_TICKS;
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <tarea_led+0x34>)
 8000530:	222b      	movs	r2, #43	; 0x2b
 8000532:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_PLACA_PUERTO, LED_PLACA_PIN);
 8000534:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000538:	4804      	ldr	r0, [pc, #16]	; (800054c <tarea_led+0x38>)
 800053a:	f001 fc88 	bl	8001e4e <HAL_GPIO_TogglePin>
	}
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000004 	.word	0x20000004
 800054c:	40011000 	.word	0x40011000

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	uint32_t ticks = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f001 f97f 	bl	800185c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f889 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8f7 	bl	8000754 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000566:	f000 f8cb 	bl	8000700 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  init_timer_sandwich();	// Timer para demora sandwich!
 800056a:	f001 f8cb 	bl	8001704 <init_timer_sandwich>

  inic_timer(1);
 800056e:	2001      	movs	r0, #1
 8000570:	f001 f892 	bl	8001698 <inic_timer>
  inicializar_despachador(lista_tareas, LEN_TASK_LIST, start_timer, stop_timer, falla_sistema);
 8000574:	4b33      	ldr	r3, [pc, #204]	; (8000644 <main+0xf4>)
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	4b33      	ldr	r3, [pc, #204]	; (8000648 <main+0xf8>)
 800057a:	4a34      	ldr	r2, [pc, #208]	; (800064c <main+0xfc>)
 800057c:	2108      	movs	r1, #8
 800057e:	4834      	ldr	r0, [pc, #208]	; (8000650 <main+0x100>)
 8000580:	f000 f954 	bl	800082c <inicializar_despachador>
  inicializar_arrebote(&pulsador, PULSADOR_ACTIVO_BAJO, PULSADOR_TICS);
 8000584:	2214      	movs	r2, #20
 8000586:	2101      	movs	r1, #1
 8000588:	4832      	ldr	r0, [pc, #200]	; (8000654 <main+0x104>)
 800058a:	f7ff fddf 	bl	800014c <inicializar_arrebote>
  agregar_tarea(lista_tareas, tarea_calculo, NULL, 0, 1, 0, 60000, 3400);	// Sandwich = 3.4ms
 800058e:	f640 5348 	movw	r3, #3400	; 0xd48
 8000592:	9303      	str	r3, [sp, #12]
 8000594:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000598:	9302      	str	r3, [sp, #8]
 800059a:	2300      	movs	r3, #0
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2301      	movs	r3, #1
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	2200      	movs	r2, #0
 80005a6:	492c      	ldr	r1, [pc, #176]	; (8000658 <main+0x108>)
 80005a8:	4829      	ldr	r0, [pc, #164]	; (8000650 <main+0x100>)
 80005aa:	f000 f981 	bl	80008b0 <agregar_tarea>
  agregar_tarea(lista_tareas, tarea_serie,   NULL, 0, 1, 0, 60000, 200);	// Sandwich = 200us
 80005ae:	23c8      	movs	r3, #200	; 0xc8
 80005b0:	9303      	str	r3, [sp, #12]
 80005b2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80005b6:	9302      	str	r3, [sp, #8]
 80005b8:	2300      	movs	r3, #0
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	2301      	movs	r3, #1
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2300      	movs	r3, #0
 80005c2:	2200      	movs	r2, #0
 80005c4:	4925      	ldr	r1, [pc, #148]	; (800065c <main+0x10c>)
 80005c6:	4822      	ldr	r0, [pc, #136]	; (8000650 <main+0x100>)
 80005c8:	f000 f972 	bl	80008b0 <agregar_tarea>
  agregar_tarea(lista_tareas, tarea_led,     NULL, 0, 3, 0, 60000, 10);		// Sandwich = 10us
 80005cc:	230a      	movs	r3, #10
 80005ce:	9303      	str	r3, [sp, #12]
 80005d0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80005d4:	9302      	str	r3, [sp, #8]
 80005d6:	2300      	movs	r3, #0
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2303      	movs	r3, #3
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2300      	movs	r3, #0
 80005e0:	2200      	movs	r2, #0
 80005e2:	491f      	ldr	r1, [pc, #124]	; (8000660 <main+0x110>)
 80005e4:	481a      	ldr	r0, [pc, #104]	; (8000650 <main+0x100>)
 80005e6:	f000 f963 	bl	80008b0 <agregar_tarea>
  enviar_serie = 0;
 80005ea:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <main+0x114>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
  serie_disponible = 1;
 80005f0:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <main+0x118>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	601a      	str	r2, [r3, #0]
  conteo_ticks_tds = HAL_GetTick();
 80005f6:	f001 f989 	bl	800190c <HAL_GetTick>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a1b      	ldr	r2, [pc, #108]	; (800066c <main+0x11c>)
 80005fe:	6013      	str	r3, [r2, #0]
  dwt_inic();
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <main+0x120>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a1a      	ldr	r2, [pc, #104]	; (8000670 <main+0x120>)
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  dwt_reset();
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <main+0x120>)
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
	  if((HAL_GetTick()-conteo_ticks_tds)>=TICKS_SISTEMA) //HAL devuelve en ms
 8000612:	f001 f97b 	bl	800190c <HAL_GetTick>
 8000616:	4602      	mov	r2, r0
 8000618:	4b14      	ldr	r3, [pc, #80]	; (800066c <main+0x11c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	2b05      	cmp	r3, #5
 8000620:	d906      	bls.n	8000630 <main+0xe0>
	  {
		  conteo_ticks_tds = HAL_GetTick();
 8000622:	f001 f973 	bl	800190c <HAL_GetTick>
 8000626:	4603      	mov	r3, r0
 8000628:	4a10      	ldr	r2, [pc, #64]	; (800066c <main+0x11c>)
 800062a:	6013      	str	r3, [r2, #0]
		  despachar_tareas();
 800062c:	f000 fa10 	bl	8000a50 <despachar_tareas>
	  }
	  if(dwt_read()>ticks)
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <main+0x120>)
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	429a      	cmp	r2, r3
 8000638:	d2e8      	bcs.n	800060c <main+0xbc>
	  {
		  ticks = dwt_read();	//Cuanto tardo maximo (ticks/72MHz)
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <main+0x120>)
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	607b      	str	r3, [r7, #4]
	  dwt_reset();
 8000640:	e7e4      	b.n	800060c <main+0xbc>
 8000642:	bf00      	nop
 8000644:	080002c5 	.word	0x080002c5
 8000648:	08001785 	.word	0x08001785
 800064c:	08001761 	.word	0x08001761
 8000650:	20000208 	.word	0x20000208
 8000654:	20000328 	.word	0x20000328
 8000658:	0800033d 	.word	0x0800033d
 800065c:	080003f9 	.word	0x080003f9
 8000660:	08000515 	.word	0x08000515
 8000664:	200000dc 	.word	0x200000dc
 8000668:	200000d4 	.word	0x200000d4
 800066c:	20000050 	.word	0x20000050
 8000670:	e0001000 	.word	0xe0001000

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b090      	sub	sp, #64	; 0x40
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0318 	add.w	r3, r7, #24
 800067e:	2228      	movs	r2, #40	; 0x28
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f002 f916 	bl	80028b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000696:	2301      	movs	r3, #1
 8000698:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800069a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800069e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;	//72MHz
 80006b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0318 	add.w	r3, r7, #24
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fbdf 	bl	8001e80 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006c8:	f000 f8aa 	bl	8000820 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2102      	movs	r1, #2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 fe4a 	bl	8002380 <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006f2:	f000 f895 	bl	8000820 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3740      	adds	r7, #64	; 0x40
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000706:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_USART1_UART_Init+0x50>)
 8000708:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_USART1_UART_Init+0x4c>)
 800070c:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000710:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_USART1_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_USART1_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000738:	f001 ffbc 	bl	80026b4 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000742:	f000 f86d 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200000e0 	.word	0x200000e0
 8000750:	40013800 	.word	0x40013800

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000768:	4b2a      	ldr	r3, [pc, #168]	; (8000814 <MX_GPIO_Init+0xc0>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	4a29      	ldr	r2, [pc, #164]	; (8000814 <MX_GPIO_Init+0xc0>)
 800076e:	f043 0310 	orr.w	r3, r3, #16
 8000772:	6193      	str	r3, [r2, #24]
 8000774:	4b27      	ldr	r3, [pc, #156]	; (8000814 <MX_GPIO_Init+0xc0>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	f003 0310 	and.w	r3, r3, #16
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000780:	4b24      	ldr	r3, [pc, #144]	; (8000814 <MX_GPIO_Init+0xc0>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	4a23      	ldr	r2, [pc, #140]	; (8000814 <MX_GPIO_Init+0xc0>)
 8000786:	f043 0320 	orr.w	r3, r3, #32
 800078a:	6193      	str	r3, [r2, #24]
 800078c:	4b21      	ldr	r3, [pc, #132]	; (8000814 <MX_GPIO_Init+0xc0>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f003 0320 	and.w	r3, r3, #32
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000798:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <MX_GPIO_Init+0xc0>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a1d      	ldr	r2, [pc, #116]	; (8000814 <MX_GPIO_Init+0xc0>)
 800079e:	f043 0308 	orr.w	r3, r3, #8
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <MX_GPIO_Init+0xc0>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0308 	and.w	r3, r3, #8
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_GPIO_Init+0xc0>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a17      	ldr	r2, [pc, #92]	; (8000814 <MX_GPIO_Init+0xc0>)
 80007b6:	f043 0304 	orr.w	r3, r3, #4
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_GPIO_Init+0xc0>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f003 0304 	and.w	r3, r3, #4
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ce:	4812      	ldr	r0, [pc, #72]	; (8000818 <MX_GPIO_Init+0xc4>)
 80007d0:	f001 fb25 	bl	8001e1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2302      	movs	r3, #2
 80007e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	4619      	mov	r1, r3
 80007ec:	480a      	ldr	r0, [pc, #40]	; (8000818 <MX_GPIO_Init+0xc4>)
 80007ee:	f001 f97b 	bl	8001ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007f2:	2301      	movs	r3, #1
 80007f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fe:	f107 0310 	add.w	r3, r7, #16
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_GPIO_Init+0xc8>)
 8000806:	f001 f96f 	bl	8001ae8 <HAL_GPIO_Init>

}
 800080a:	bf00      	nop
 800080c:	3720      	adds	r7, #32
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000
 8000818:	40011000 	.word	0x40011000
 800081c:	40010c00 	.word	0x40010c00

08000820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000824:	b672      	cpsid	i
}
 8000826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000828:	e7fe      	b.n	8000828 <Error_Handler+0x8>
	...

0800082c <inicializar_despachador>:
static TaskStat *lista_tareas;

void inicializar_despachador(TaskStat *lista, uint32_t len,
		void (*start_timer)(void), uint32_t (*stop_timer)(void),
		void (*falla_sistema)(void))
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
 8000838:	603b      	str	r3, [r7, #0]
	uint32_t i;
	monitor_start = start_timer;
 800083a:	4a17      	ldr	r2, [pc, #92]	; (8000898 <inicializar_despachador+0x6c>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6013      	str	r3, [r2, #0]
	monitor_stop = stop_timer;
 8000840:	4a16      	ldr	r2, [pc, #88]	; (800089c <inicializar_despachador+0x70>)
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	6013      	str	r3, [r2, #0]
	fallar_sistema = falla_sistema;
 8000846:	4a16      	ldr	r2, [pc, #88]	; (80008a0 <inicializar_despachador+0x74>)
 8000848:	6a3b      	ldr	r3, [r7, #32]
 800084a:	6013      	str	r3, [r2, #0]
	tareas_a_despachar = 0;
 800084c:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <inicializar_despachador+0x78>)
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
	max_len_lista_tareas = len;
 8000852:	4a15      	ldr	r2, [pc, #84]	; (80008a8 <inicializar_despachador+0x7c>)
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	6013      	str	r3, [r2, #0]
	lista_tareas = lista;
 8000858:	4a14      	ldr	r2, [pc, #80]	; (80008ac <inicializar_despachador+0x80>)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	6013      	str	r3, [r2, #0]
	for (i = 0; i < len; i++)
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
 8000862:	e00f      	b.n	8000884 <inicializar_despachador+0x58>
		memset(&lista[i], 0, sizeof(TaskStat));
 8000864:	697a      	ldr	r2, [r7, #20]
 8000866:	4613      	mov	r3, r2
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	4413      	add	r3, r2
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	461a      	mov	r2, r3
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	4413      	add	r3, r2
 8000874:	2224      	movs	r2, #36	; 0x24
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f002 f81b 	bl	80028b4 <memset>
	for (i = 0; i < len; i++)
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	3301      	adds	r3, #1
 8000882:	617b      	str	r3, [r7, #20]
 8000884:	697a      	ldr	r2, [r7, #20]
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	429a      	cmp	r2, r3
 800088a:	d3eb      	bcc.n	8000864 <inicializar_despachador+0x38>
}
 800088c:	bf00      	nop
 800088e:	bf00      	nop
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	2000003c 	.word	0x2000003c
 800089c:	20000040 	.word	0x20000040
 80008a0:	20000038 	.word	0x20000038
 80008a4:	20000048 	.word	0x20000048
 80008a8:	20000044 	.word	0x20000044
 80008ac:	2000004c 	.word	0x2000004c

080008b0 <agregar_tarea>:

int agregar_tarea(TaskStat *lista, void (*tarea)(void *p), void *param,
		int offset, int periodo, int bcet, int wcet, int dem_sandwich)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
 80008bc:	603b      	str	r3, [r7, #0]
	// Chequeos
	if ((periodo == 0) || (tarea == NULL)
 80008be:	69bb      	ldr	r3, [r7, #24]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d008      	beq.n	80008d6 <agregar_tarea+0x26>
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d005      	beq.n	80008d6 <agregar_tarea+0x26>
			|| tareas_a_despachar == max_len_lista_tareas)
 80008ca:	4b36      	ldr	r3, [pc, #216]	; (80009a4 <agregar_tarea+0xf4>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	4b36      	ldr	r3, [pc, #216]	; (80009a8 <agregar_tarea+0xf8>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d102      	bne.n	80008dc <agregar_tarea+0x2c>
		return -1;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008da:	e05d      	b.n	8000998 <agregar_tarea+0xe8>

	//Punteros de la tarea.
	lista[tareas_a_despachar].task = tarea;
 80008dc:	4b31      	ldr	r3, [pc, #196]	; (80009a4 <agregar_tarea+0xf4>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4613      	mov	r3, r2
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	4413      	add	r3, r2
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	461a      	mov	r2, r3
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	4413      	add	r3, r2
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	619a      	str	r2, [r3, #24]
	lista[tareas_a_despachar].param = param;
 80008f2:	4b2c      	ldr	r3, [pc, #176]	; (80009a4 <agregar_tarea+0xf4>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	4613      	mov	r3, r2
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	4413      	add	r3, r2
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	461a      	mov	r2, r3
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	4413      	add	r3, r2
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	61da      	str	r2, [r3, #28]

	//Periodo y offset
	lista[tareas_a_despachar].period = periodo;
 8000908:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <agregar_tarea+0xf4>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	4613      	mov	r3, r2
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	4413      	add	r3, r2
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	461a      	mov	r2, r3
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	4413      	add	r3, r2
 800091a:	69ba      	ldr	r2, [r7, #24]
 800091c:	615a      	str	r2, [r3, #20]
	lista[tareas_a_despachar].offset = offset;
 800091e:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <agregar_tarea+0xf4>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	4613      	mov	r3, r2
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	4413      	add	r3, r2
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	461a      	mov	r2, r3
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	4413      	add	r3, r2
 8000930:	683a      	ldr	r2, [r7, #0]
 8000932:	611a      	str	r2, [r3, #16]

	//Cargo los tiempos.
	lista[tareas_a_despachar].et = 0;
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <agregar_tarea+0xf4>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4613      	mov	r3, r2
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	4413      	add	r3, r2
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	461a      	mov	r2, r3
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	4413      	add	r3, r2
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
	lista[tareas_a_despachar].bcet = bcet;
 800094a:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <agregar_tarea+0xf4>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	4613      	mov	r3, r2
 8000950:	00db      	lsls	r3, r3, #3
 8000952:	4413      	add	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	461a      	mov	r2, r3
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	4413      	add	r3, r2
 800095c:	69fa      	ldr	r2, [r7, #28]
 800095e:	601a      	str	r2, [r3, #0]
	lista[tareas_a_despachar].wcet = wcet;
 8000960:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <agregar_tarea+0xf4>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4613      	mov	r3, r2
 8000966:	00db      	lsls	r3, r3, #3
 8000968:	4413      	add	r3, r2
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	461a      	mov	r2, r3
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	4413      	add	r3, r2
 8000972:	6a3a      	ldr	r2, [r7, #32]
 8000974:	605a      	str	r2, [r3, #4]
	lista[tareas_a_despachar].dem_sandwich = dem_sandwich;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <agregar_tarea+0xf4>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	4613      	mov	r3, r2
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	4413      	add	r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	461a      	mov	r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	4413      	add	r3, r2
 8000988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800098a:	621a      	str	r2, [r3, #32]
	tareas_a_despachar++;
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <agregar_tarea+0xf4>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <agregar_tarea+0xf4>)
 8000994:	6013      	str	r3, [r2, #0]
	return 0;
 8000996:	2300      	movs	r3, #0
}
 8000998:	4618      	mov	r0, r3
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000048 	.word	0x20000048
 80009a8:	20000044 	.word	0x20000044

080009ac <despachar_tarea>:

int despachar_tarea(TaskStat *estado)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	int ret = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
	int valor_us;
	if (!estado->offset)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	691b      	ldr	r3, [r3, #16]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d138      	bne.n	8000a32 <despachar_tarea+0x86>
	{
		estado->offset = estado->period - 1;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	695b      	ldr	r3, [r3, #20]
 80009c4:	1e5a      	subs	r2, r3, #1
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	611a      	str	r2, [r3, #16]
		start_sandwich();
 80009ca:	f000 fef1 	bl	80017b0 <start_sandwich>
		monitor_start();	//inicia timer
 80009ce:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <despachar_tarea+0x9c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4798      	blx	r3
		estado->task(estado->param);	//Corro la tarea
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	69d2      	ldr	r2, [r2, #28]
 80009dc:	4610      	mov	r0, r2
 80009de:	4798      	blx	r3
		valor_us = monitor_stop();		// lo que tardo
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <despachar_tarea+0xa0>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4798      	blx	r3
 80009e6:	4603      	mov	r3, r0
 80009e8:	60bb      	str	r3, [r7, #8]
		estado->et = valor_us;			// guardo lo que tardo
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	68ba      	ldr	r2, [r7, #8]
 80009ee:	609a      	str	r2, [r3, #8]
		while(!stop_sandwich(estado->dem_sandwich));	// Esto va a bloquear la tarea hasta cumplir los tiempos.
 80009f0:	bf00      	nop
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6a1b      	ldr	r3, [r3, #32]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 feec 	bl	80017d4 <stop_sandwich>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0f7      	beq.n	80009f2 <despachar_tarea+0x46>
		if (valor_us < estado->bcet || valor_us > estado->wcet)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	db04      	blt.n	8000a16 <despachar_tarea+0x6a>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	dd02      	ble.n	8000a1c <despachar_tarea+0x70>
			ret--;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
		if (estado->et_wcet < estado->et)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	68da      	ldr	r2, [r3, #12]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	da09      	bge.n	8000a3c <despachar_tarea+0x90>
			estado->et_wcet = estado->et;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	689a      	ldr	r2, [r3, #8]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	e004      	b.n	8000a3c <despachar_tarea+0x90>
	}
	else
	{
		estado->offset--;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	691b      	ldr	r3, [r3, #16]
 8000a36:	1e5a      	subs	r2, r3, #1
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	611a      	str	r2, [r3, #16]
	}
	return ret;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	2000003c 	.word	0x2000003c
 8000a4c:	20000040 	.word	0x20000040

08000a50 <despachar_tareas>:

void despachar_tareas(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
	uint32_t i;
	int fallar = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
	for (i = 0; i < tareas_a_despachar; i++)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	e011      	b.n	8000a84 <despachar_tareas+0x34>
	{
		fallar = despachar_tarea(&lista_tareas[i]);
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <despachar_tareas+0x58>)
 8000a62:	6819      	ldr	r1, [r3, #0]
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	4613      	mov	r3, r2
 8000a68:	00db      	lsls	r3, r3, #3
 8000a6a:	4413      	add	r3, r2
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	440b      	add	r3, r1
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff9b 	bl	80009ac <despachar_tarea>
 8000a76:	6038      	str	r0, [r7, #0]
		if (fallar)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d108      	bne.n	8000a90 <despachar_tareas+0x40>
	for (i = 0; i < tareas_a_despachar; i++)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	3301      	adds	r3, #1
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <despachar_tareas+0x5c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d3e8      	bcc.n	8000a60 <despachar_tareas+0x10>
 8000a8e:	e000      	b.n	8000a92 <despachar_tareas+0x42>
		{
			break;
 8000a90:	bf00      	nop
		}
	}
	if (fallar)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <despachar_tareas+0x4e>
	{
		fallar_sistema();
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <despachar_tareas+0x60>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4798      	blx	r3
	}
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000004c 	.word	0x2000004c
 8000aac:	20000048 	.word	0x20000048
 8000ab0:	20000038 	.word	0x20000038

08000ab4 <keccakf>:
/* generally called after SHA3_KECCAK_SPONGE_WORDS-ctx->capacityWords words 
 * are XORed into the state s 
 */
static void
keccakf(uint64_t s[25])
{
 8000ab4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000ab8:	b0ab      	sub	sp, #172	; 0xac
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6678      	str	r0, [r7, #100]	; 0x64
    int i, j, round;
    uint64_t t, bc[5];
#define KECCAK_ROUNDS 24

    for(round = 0; round < KECCAK_ROUNDS; round++) {
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000ac4:	e1d1      	b.n	8000e6a <keccakf+0x3b6>

        /* Theta */
        for(i = 0; i < 5; i++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000acc:	e053      	b.n	8000b76 <keccakf+0xc2>
            bc[i] = s[i] ^ s[i + 5] ^ s[i + 10] ^ s[i + 15] ^ s[i + 20];
 8000ace:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000ad2:	00da      	lsls	r2, r3, #3
 8000ad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ad6:	4413      	add	r3, r2
 8000ad8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000adc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000ae0:	3305      	adds	r3, #5
 8000ae2:	00da      	lsls	r2, r3, #3
 8000ae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ae6:	4413      	add	r3, r2
 8000ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aec:	ea80 0402 	eor.w	r4, r0, r2
 8000af0:	653c      	str	r4, [r7, #80]	; 0x50
 8000af2:	404b      	eors	r3, r1
 8000af4:	657b      	str	r3, [r7, #84]	; 0x54
 8000af6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000afa:	330a      	adds	r3, #10
 8000afc:	00da      	lsls	r2, r3, #3
 8000afe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b00:	4413      	add	r3, r2
 8000b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b06:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8000b0a:	4621      	mov	r1, r4
 8000b0c:	4051      	eors	r1, r2
 8000b0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8000b10:	4629      	mov	r1, r5
 8000b12:	404b      	eors	r3, r1
 8000b14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000b1a:	330f      	adds	r3, #15
 8000b1c:	00da      	lsls	r2, r3, #3
 8000b1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b20:	4413      	add	r3, r2
 8000b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b26:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8000b2a:	4621      	mov	r1, r4
 8000b2c:	4051      	eors	r1, r2
 8000b2e:	6439      	str	r1, [r7, #64]	; 0x40
 8000b30:	4629      	mov	r1, r5
 8000b32:	404b      	eors	r3, r1
 8000b34:	647b      	str	r3, [r7, #68]	; 0x44
 8000b36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000b3a:	3314      	adds	r3, #20
 8000b3c:	00da      	lsls	r2, r3, #3
 8000b3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b40:	4413      	add	r3, r2
 8000b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b46:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8000b4a:	4621      	mov	r1, r4
 8000b4c:	4051      	eors	r1, r2
 8000b4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8000b50:	4629      	mov	r1, r5
 8000b52:	404b      	eors	r3, r1
 8000b54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000b60:	4413      	add	r3, r2
 8000b62:	3b40      	subs	r3, #64	; 0x40
 8000b64:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8000b68:	e9c3 1200 	strd	r1, r2, [r3]
        for(i = 0; i < 5; i++)
 8000b6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000b70:	3301      	adds	r3, #1
 8000b72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000b76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	dda7      	ble.n	8000ace <keccakf+0x1a>

        for(i = 0; i < 5; i++) {
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000b84:	e06a      	b.n	8000c5c <keccakf+0x1a8>
            t = bc[(i + 4) % 5] ^ SHA3_ROTL64(bc[(i + 1) % 5], 1);
 8000b86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000b8a:	1d19      	adds	r1, r3, #4
 8000b8c:	4bbd      	ldr	r3, [pc, #756]	; (8000e84 <keccakf+0x3d0>)
 8000b8e:	fb83 2301 	smull	r2, r3, r3, r1
 8000b92:	105a      	asrs	r2, r3, #1
 8000b94:	17cb      	asrs	r3, r1, #31
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	461a      	mov	r2, r3
 8000b9a:	0092      	lsls	r2, r2, #2
 8000b9c:	441a      	add	r2, r3
 8000b9e:	1a8b      	subs	r3, r1, r2
 8000ba0:	00db      	lsls	r3, r3, #3
 8000ba2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000ba6:	4413      	add	r3, r2
 8000ba8:	3b40      	subs	r3, #64	; 0x40
 8000baa:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000bae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000bb2:	1c59      	adds	r1, r3, #1
 8000bb4:	4bb3      	ldr	r3, [pc, #716]	; (8000e84 <keccakf+0x3d0>)
 8000bb6:	fb83 2301 	smull	r2, r3, r3, r1
 8000bba:	105a      	asrs	r2, r3, #1
 8000bbc:	17cb      	asrs	r3, r1, #31
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	0092      	lsls	r2, r2, #2
 8000bc4:	441a      	add	r2, r3
 8000bc6:	1a8b      	subs	r3, r1, r2
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000bce:	4413      	add	r3, r2
 8000bd0:	3b40      	subs	r3, #64	; 0x40
 8000bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd6:	0fd0      	lsrs	r0, r2, #31
 8000bd8:	0059      	lsls	r1, r3, #1
 8000bda:	4301      	orrs	r1, r0
 8000bdc:	6379      	str	r1, [r7, #52]	; 0x34
 8000bde:	0fd9      	lsrs	r1, r3, #31
 8000be0:	0053      	lsls	r3, r2, #1
 8000be2:	430b      	orrs	r3, r1
 8000be4:	633b      	str	r3, [r7, #48]	; 0x30
 8000be6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8000bea:	460b      	mov	r3, r1
 8000bec:	4063      	eors	r3, r4
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	406b      	eors	r3, r5
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000bfa:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
            for(j = 0; j < 25; j += 5)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000c04:	e021      	b.n	8000c4a <keccakf+0x196>
                s[j + i] ^= t;
 8000c06:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000c0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000c0e:	4413      	add	r3, r2
 8000c10:	00da      	lsls	r2, r3, #3
 8000c12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c14:	4413      	add	r3, r2
 8000c16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c1a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000c1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000c22:	4413      	add	r3, r2
 8000c24:	00da      	lsls	r2, r3, #3
 8000c26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c28:	189c      	adds	r4, r3, r2
 8000c2a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8000c2e:	ea80 0502 	eor.w	r5, r0, r2
 8000c32:	62bd      	str	r5, [r7, #40]	; 0x28
 8000c34:	404b      	eors	r3, r1
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000c3c:	e9c4 2300 	strd	r2, r3, [r4]
            for(j = 0; j < 25; j += 5)
 8000c40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000c44:	3305      	adds	r3, #5
 8000c46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000c4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000c4e:	2b18      	cmp	r3, #24
 8000c50:	ddd9      	ble.n	8000c06 <keccakf+0x152>
        for(i = 0; i < 5; i++) {
 8000c52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000c56:	3301      	adds	r3, #1
 8000c58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000c5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000c60:	2b04      	cmp	r3, #4
 8000c62:	dd90      	ble.n	8000b86 <keccakf+0xd2>
        }

        /* Rho Pi */
        t = s[1];
 8000c64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c66:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000c6a:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
        for(i = 0; i < 24; i++) {
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000c74:	e051      	b.n	8000d1a <keccakf+0x266>
            j = keccakf_piln[i];
 8000c76:	4a84      	ldr	r2, [pc, #528]	; (8000e88 <keccakf+0x3d4>)
 8000c78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            bc[0] = s[j];
 8000c84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000c88:	00da      	lsls	r2, r3, #3
 8000c8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c8c:	4413      	add	r3, r2
 8000c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c92:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            s[j] = SHA3_ROTL64(t, keccakf_rotc[i]);
 8000c96:	4a7d      	ldr	r2, [pc, #500]	; (8000e8c <keccakf+0x3d8>)
 8000c98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000c9c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000ca0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000ca4:	00da      	lsls	r2, r3, #3
 8000ca6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ca8:	189d      	adds	r5, r3, r2
 8000caa:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8000cae:	f1a4 0120 	sub.w	r1, r4, #32
 8000cb2:	f1c4 0020 	rsb	r0, r4, #32
 8000cb6:	fa03 fb04 	lsl.w	fp, r3, r4
 8000cba:	fa02 f101 	lsl.w	r1, r2, r1
 8000cbe:	ea4b 0b01 	orr.w	fp, fp, r1
 8000cc2:	fa22 f000 	lsr.w	r0, r2, r0
 8000cc6:	ea4b 0b00 	orr.w	fp, fp, r0
 8000cca:	fa02 fa04 	lsl.w	sl, r2, r4
 8000cce:	4264      	negs	r4, r4
 8000cd0:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 8000cd4:	f1c4 0120 	rsb	r1, r4, #32
 8000cd8:	f1a4 0020 	sub.w	r0, r4, #32
 8000cdc:	fa22 f804 	lsr.w	r8, r2, r4
 8000ce0:	fa03 f101 	lsl.w	r1, r3, r1
 8000ce4:	ea48 0801 	orr.w	r8, r8, r1
 8000ce8:	fa23 f000 	lsr.w	r0, r3, r0
 8000cec:	ea48 0800 	orr.w	r8, r8, r0
 8000cf0:	fa23 f904 	lsr.w	r9, r3, r4
 8000cf4:	ea4a 0308 	orr.w	r3, sl, r8
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	ea4b 0309 	orr.w	r3, fp, r9
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	e9d7 8900 	ldrd	r8, r9, [r7]
 8000d04:	e9c5 8900 	strd	r8, r9, [r5]
            t = bc[0];
 8000d08:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000d0c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
        for(i = 0; i < 24; i++) {
 8000d10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000d14:	3301      	adds	r3, #1
 8000d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000d1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000d1e:	2b17      	cmp	r3, #23
 8000d20:	dda9      	ble.n	8000c76 <keccakf+0x1c2>
        }

        /* Chi */
        for(j = 0; j < 25; j += 5) {
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000d28:	e081      	b.n	8000e2e <keccakf+0x37a>
            for(i = 0; i < 5; i++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000d30:	e017      	b.n	8000d62 <keccakf+0x2ae>
                bc[i] = s[j + i];
 8000d32:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000d36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000d3a:	4413      	add	r3, r2
 8000d3c:	00da      	lsls	r2, r3, #3
 8000d3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d40:	4413      	add	r3, r2
 8000d42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000d50:	4413      	add	r3, r2
 8000d52:	3b40      	subs	r3, #64	; 0x40
 8000d54:	e9c3 0100 	strd	r0, r1, [r3]
            for(i = 0; i < 5; i++)
 8000d58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000d62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	dde3      	ble.n	8000d32 <keccakf+0x27e>
            for(i = 0; i < 5; i++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000d70:	e054      	b.n	8000e1c <keccakf+0x368>
                s[j + i] ^= (~bc[(i + 1) % 5]) & bc[(i + 2) % 5];
 8000d72:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000d76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000d7a:	4413      	add	r3, r2
 8000d7c:	00da      	lsls	r2, r3, #3
 8000d7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d80:	4413      	add	r3, r2
 8000d82:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000d86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000d8a:	1c59      	adds	r1, r3, #1
 8000d8c:	4b3d      	ldr	r3, [pc, #244]	; (8000e84 <keccakf+0x3d0>)
 8000d8e:	fb83 2301 	smull	r2, r3, r3, r1
 8000d92:	105a      	asrs	r2, r3, #1
 8000d94:	17cb      	asrs	r3, r1, #31
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	461a      	mov	r2, r3
 8000d9a:	0092      	lsls	r2, r2, #2
 8000d9c:	441a      	add	r2, r3
 8000d9e:	1a8b      	subs	r3, r1, r2
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000da6:	4413      	add	r3, r2
 8000da8:	3b40      	subs	r3, #64	; 0x40
 8000daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dae:	43d1      	mvns	r1, r2
 8000db0:	65b9      	str	r1, [r7, #88]	; 0x58
 8000db2:	43db      	mvns	r3, r3
 8000db4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000db6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000dba:	1c99      	adds	r1, r3, #2
 8000dbc:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <keccakf+0x3d0>)
 8000dbe:	fb83 2301 	smull	r2, r3, r3, r1
 8000dc2:	105a      	asrs	r2, r3, #1
 8000dc4:	17cb      	asrs	r3, r1, #31
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	461a      	mov	r2, r3
 8000dca:	0092      	lsls	r2, r2, #2
 8000dcc:	441a      	add	r2, r3
 8000dce:	1a8b      	subs	r3, r1, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3b40      	subs	r3, #64	; 0x40
 8000dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000de0:	4011      	ands	r1, r2
 8000de2:	6239      	str	r1, [r7, #32]
 8000de4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000de6:	400b      	ands	r3, r1
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
 8000dea:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000dee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000df2:	4413      	add	r3, r2
 8000df4:	00da      	lsls	r2, r3, #3
 8000df6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000df8:	4413      	add	r3, r2
 8000dfa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000dfe:	4602      	mov	r2, r0
 8000e00:	4062      	eors	r2, r4
 8000e02:	61ba      	str	r2, [r7, #24]
 8000e04:	460a      	mov	r2, r1
 8000e06:	406a      	eors	r2, r5
 8000e08:	61fa      	str	r2, [r7, #28]
 8000e0a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000e0e:	e9c3 1200 	strd	r1, r2, [r3]
            for(i = 0; i < 5; i++)
 8000e12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e16:	3301      	adds	r3, #1
 8000e18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000e1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	dda6      	ble.n	8000d72 <keccakf+0x2be>
        for(j = 0; j < 25; j += 5) {
 8000e24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000e28:	3305      	adds	r3, #5
 8000e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000e2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000e32:	2b18      	cmp	r3, #24
 8000e34:	f77f af79 	ble.w	8000d2a <keccakf+0x276>
        }

        /* Iota */
        s[0] ^= keccakf_rndc[round];
 8000e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e3e:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <keccakf+0x3dc>)
 8000e40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	4413      	add	r3, r2
 8000e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4c:	ea80 0402 	eor.w	r4, r0, r2
 8000e50:	613c      	str	r4, [r7, #16]
 8000e52:	404b      	eors	r3, r1
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e58:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000e5c:	e9c3 1200 	strd	r1, r2, [r3]
    for(round = 0; round < KECCAK_ROUNDS; round++) {
 8000e60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e64:	3301      	adds	r3, #1
 8000e66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000e6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e6e:	2b17      	cmp	r3, #23
 8000e70:	f77f ae29 	ble.w	8000ac6 <keccakf+0x12>
    }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	37ac      	adds	r7, #172	; 0xac
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	66666667 	.word	0x66666667
 8000e88:	08002a10 	.word	0x08002a10
 8000e8c:	080029b0 	.word	0x080029b0
 8000e90:	080028f0 	.word	0x080028f0

08000e94 <sha3_Init>:

/* *************************** Public Inteface ************************ */

/* For Init or Reset call these: */
sha3_return_t
sha3_Init(void *priv, unsigned bitSize) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
    sha3_context *ctx = (sha3_context *) priv;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60fb      	str	r3, [r7, #12]
    if( bitSize != 256 && bitSize != 384 && bitSize != 512 )
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ea8:	d009      	beq.n	8000ebe <sha3_Init+0x2a>
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000eb0:	d005      	beq.n	8000ebe <sha3_Init+0x2a>
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000eb8:	d001      	beq.n	8000ebe <sha3_Init+0x2a>
        return SHA3_RETURN_BAD_PARAMS;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00b      	b.n	8000ed6 <sha3_Init+0x42>
    memset(ctx, 0, sizeof(*ctx));
 8000ebe:	22e0      	movs	r2, #224	; 0xe0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f001 fcf6 	bl	80028b4 <memset>
    ctx->capacityWords = 2 * bitSize / (8 * sizeof(uint64_t));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	099a      	lsrs	r2, r3, #6
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    return SHA3_RETURN_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <sha3_Init512>:
    sha3_Init(priv, 384);
}

void
sha3_Init512(void *priv)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
    sha3_Init(priv, 512);
 8000ee6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ffd2 	bl	8000e94 <sha3_Init>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <sha3_Update>:
}


void
sha3_Update(void *priv, void const *bufIn, size_t len)
{
 8000ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000efc:	b0a7      	sub	sp, #156	; 0x9c
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6778      	str	r0, [r7, #116]	; 0x74
 8000f02:	6739      	str	r1, [r7, #112]	; 0x70
 8000f04:	66fa      	str	r2, [r7, #108]	; 0x6c
    sha3_context *ctx = (sha3_context *) priv;
 8000f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    /* 0...7 -- how much is needed to have a word */
    unsigned old_tail = (8 - ctx->byteIndex) & 7;
 8000f0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f10:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8000f14:	425b      	negs	r3, r3
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    size_t words;
    unsigned tail;
    size_t i;

    const uint8_t *buf = bufIn;
 8000f1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    SHA3_TRACE_BUF("called to update with:", buf, len);

    SHA3_ASSERT(ctx->byteIndex < 8);
    SHA3_ASSERT(ctx->wordIndex < sizeof(ctx->u.s) / sizeof(ctx->u.s[0]));

    if(len < old_tail) {        /* have no complete word or haven't started 
 8000f24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000f26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d235      	bcs.n	8000f9a <sha3_Update+0xa2>
                                 * the word yet */
        SHA3_TRACE("because %d<%d, store it and return", (unsigned)len,
                (unsigned)old_tail);
        /* endian-independent code follows: */
        while (len--)
 8000f2e:	e02e      	b.n	8000f8e <sha3_Update+0x96>
            ctx->saved |= (uint64_t) (*(buf++)) << ((ctx->byteIndex++) * 8);
 8000f30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000f34:	1c5a      	adds	r2, r3, #1
 8000f36:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8000f46:	f8d1 10d0 	ldr.w	r1, [r1, #208]	; 0xd0
 8000f4a:	1c4c      	adds	r4, r1, #1
 8000f4c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8000f50:	f8c0 40d0 	str.w	r4, [r0, #208]	; 0xd0
 8000f54:	00c9      	lsls	r1, r1, #3
 8000f56:	f1a1 0420 	sub.w	r4, r1, #32
 8000f5a:	f1c1 0020 	rsb	r0, r1, #32
 8000f5e:	fa03 f901 	lsl.w	r9, r3, r1
 8000f62:	fa02 f404 	lsl.w	r4, r2, r4
 8000f66:	ea49 0904 	orr.w	r9, r9, r4
 8000f6a:	fa22 f000 	lsr.w	r0, r2, r0
 8000f6e:	ea49 0900 	orr.w	r9, r9, r0
 8000f72:	fa02 f801 	lsl.w	r8, r2, r1
 8000f76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7e:	ea48 0502 	orr.w	r5, r8, r2
 8000f82:	ea49 0603 	orr.w	r6, r9, r3
 8000f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f8a:	e9c3 5600 	strd	r5, r6, [r3]
        while (len--)
 8000f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f90:	1e5a      	subs	r2, r3, #1
 8000f92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1cb      	bne.n	8000f30 <sha3_Update+0x38>
        SHA3_ASSERT(ctx->byteIndex < 8);
        return;
 8000f98:	e1d8      	b.n	800134c <sha3_Update+0x454>
    }

    if(old_tail) {              /* will have one word to process */
 8000f9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 8091 	beq.w	80010c6 <sha3_Update+0x1ce>
        SHA3_TRACE("completing one word with %d bytes", (unsigned)old_tail);
        /* endian-independent code follows: */
        len -= old_tail;
 8000fa4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000fa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	66fb      	str	r3, [r7, #108]	; 0x6c
        while (old_tail--)
 8000fae:	e032      	b.n	8001016 <sha3_Update+0x11e>
            ctx->saved |= (uint64_t) (*(buf++)) << ((ctx->byteIndex++) * 8);
 8000fb0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000fb4:	1c53      	adds	r3, r2, #1
 8000fb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000fba:	7813      	ldrb	r3, [r2, #0]
 8000fbc:	b2d8      	uxtb	r0, r3
 8000fbe:	f04f 0100 	mov.w	r1, #0
 8000fc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fc6:	f8d3 40d0 	ldr.w	r4, [r3, #208]	; 0xd0
 8000fca:	1c62      	adds	r2, r4, #1
 8000fcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fd0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8000fd4:	00e4      	lsls	r4, r4, #3
 8000fd6:	f1a4 0320 	sub.w	r3, r4, #32
 8000fda:	f1c4 0220 	rsb	r2, r4, #32
 8000fde:	fa01 fb04 	lsl.w	fp, r1, r4
 8000fe2:	fa00 f303 	lsl.w	r3, r0, r3
 8000fe6:	ea4b 0b03 	orr.w	fp, fp, r3
 8000fea:	fa20 f202 	lsr.w	r2, r0, r2
 8000fee:	ea4b 0b02 	orr.w	fp, fp, r2
 8000ff2:	fa00 fa04 	lsl.w	sl, r0, r4
 8000ff6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffe:	ea4a 0102 	orr.w	r1, sl, r2
 8001002:	65b9      	str	r1, [r7, #88]	; 0x58
 8001004:	ea4b 0303 	orr.w	r3, fp, r3
 8001008:	65fb      	str	r3, [r7, #92]	; 0x5c
 800100a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800100e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8001012:	e9c3 1200 	strd	r1, r2, [r3]
        while (old_tail--)
 8001016:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800101a:	1e53      	subs	r3, r2, #1
 800101c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001020:	2a00      	cmp	r2, #0
 8001022:	d1c5      	bne.n	8000fb0 <sha3_Update+0xb8>

        /* now ready to add saved to the sponge */
        ctx->u.s[ctx->wordIndex] ^= ctx->saved;
 8001024:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001028:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800102c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001030:	3301      	adds	r3, #1
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	4413      	add	r3, r2
 8001036:	e9d3 4500 	ldrd	r4, r5, [r3]
 800103a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800103e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001042:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001046:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800104a:	ea84 0200 	eor.w	r2, r4, r0
 800104e:	653a      	str	r2, [r7, #80]	; 0x50
 8001050:	ea85 0201 	eor.w	r2, r5, r1
 8001054:	657a      	str	r2, [r7, #84]	; 0x54
 8001056:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800105a:	3301      	adds	r3, #1
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	4413      	add	r3, r2
 8001060:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8001064:	e9c3 1200 	strd	r1, r2, [r3]
        SHA3_ASSERT(ctx->byteIndex == 8);
        ctx->byteIndex = 0;
 8001068:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800106c:	2300      	movs	r3, #0
 800106e:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
        ctx->saved = 0;
 8001072:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	e9c1 2300 	strd	r2, r3, [r1]
        if(++ctx->wordIndex ==
 8001082:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001086:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001090:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001094:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001098:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
                (SHA3_KECCAK_SPONGE_WORDS - SHA3_CW(ctx->capacityWords))) {
 800109c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010a8:	f1c3 0319 	rsb	r3, r3, #25
        if(++ctx->wordIndex ==
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d10a      	bne.n	80010c6 <sha3_Update+0x1ce>
            keccakf(ctx->u.s);
 80010b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010b4:	3308      	adds	r3, #8
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fcfc 	bl	8000ab4 <keccakf>
            ctx->wordIndex = 0;
 80010bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

    /* now work in full words directly from input */

    SHA3_ASSERT(ctx->byteIndex == 0);

    words = len / sizeof(uint64_t);
 80010c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010c8:	08db      	lsrs	r3, r3, #3
 80010ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    tail = len - words * sizeof(uint64_t);
 80010ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80010d2:	00da      	lsls	r2, r3, #3
 80010d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010d6:	1a9b      	subs	r3, r3, r2
 80010d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    SHA3_TRACE("have %d full words to process", (unsigned)words);

    for(i = 0; i < words; i++, buf += sizeof(uint64_t)) {
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80010e2:	e0eb      	b.n	80012bc <sha3_Update+0x3c4>
        const uint64_t t = (uint64_t) (buf[0]) |
 80010e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b2dc      	uxtb	r4, r3
 80010ec:	f04f 0500 	mov.w	r5, #0
                ((uint64_t) (buf[1]) << 8 * 1) |
 80010f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80010f4:	3301      	adds	r3, #1
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	f04f 0300 	mov.w	r3, #0
 80010fe:	f04f 0000 	mov.w	r0, #0
 8001102:	f04f 0100 	mov.w	r1, #0
 8001106:	0219      	lsls	r1, r3, #8
 8001108:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800110c:	0210      	lsls	r0, r2, #8
        const uint64_t t = (uint64_t) (buf[0]) |
 800110e:	ea44 0300 	orr.w	r3, r4, r0
 8001112:	64bb      	str	r3, [r7, #72]	; 0x48
 8001114:	ea45 0301 	orr.w	r3, r5, r1
 8001118:	64fb      	str	r3, [r7, #76]	; 0x4c
                ((uint64_t) (buf[2]) << 8 * 2) |
 800111a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800111e:	3302      	adds	r3, #2
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	f04f 0000 	mov.w	r0, #0
 800112c:	f04f 0100 	mov.w	r1, #0
 8001130:	0419      	lsls	r1, r3, #16
 8001132:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8001136:	0410      	lsls	r0, r2, #16
                ((uint64_t) (buf[1]) << 8 * 1) |
 8001138:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800113c:	4623      	mov	r3, r4
 800113e:	4303      	orrs	r3, r0
 8001140:	643b      	str	r3, [r7, #64]	; 0x40
 8001142:	462b      	mov	r3, r5
 8001144:	430b      	orrs	r3, r1
 8001146:	647b      	str	r3, [r7, #68]	; 0x44
                ((uint64_t) (buf[3]) << 8 * 3) |
 8001148:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800114c:	3303      	adds	r3, #3
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b2da      	uxtb	r2, r3
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	0a11      	lsrs	r1, r2, #8
 8001158:	63f9      	str	r1, [r7, #60]	; 0x3c
 800115a:	0613      	lsls	r3, r2, #24
 800115c:	63bb      	str	r3, [r7, #56]	; 0x38
                ((uint64_t) (buf[2]) << 8 * 2) |
 800115e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001162:	4623      	mov	r3, r4
 8001164:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001168:	4602      	mov	r2, r0
 800116a:	4313      	orrs	r3, r2
 800116c:	633b      	str	r3, [r7, #48]	; 0x30
 800116e:	462b      	mov	r3, r5
 8001170:	460a      	mov	r2, r1
 8001172:	4313      	orrs	r3, r2
 8001174:	637b      	str	r3, [r7, #52]	; 0x34
                ((uint64_t) (buf[4]) << 8 * 4) |
 8001176:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800117a:	3304      	adds	r3, #4
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	f04f 0000 	mov.w	r0, #0
 8001188:	f04f 0100 	mov.w	r1, #0
 800118c:	0011      	movs	r1, r2
 800118e:	2000      	movs	r0, #0
                ((uint64_t) (buf[3]) << 8 * 3) |
 8001190:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001194:	4623      	mov	r3, r4
 8001196:	4303      	orrs	r3, r0
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
 800119a:	462b      	mov	r3, r5
 800119c:	430b      	orrs	r3, r1
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
                ((uint64_t) (buf[5]) << 8 * 5) |
 80011a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80011a4:	3305      	adds	r3, #5
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	f04f 0300 	mov.w	r3, #0
 80011ae:	f04f 0000 	mov.w	r0, #0
 80011b2:	f04f 0100 	mov.w	r1, #0
 80011b6:	0211      	lsls	r1, r2, #8
 80011b8:	2000      	movs	r0, #0
                ((uint64_t) (buf[4]) << 8 * 4) |
 80011ba:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80011be:	4623      	mov	r3, r4
 80011c0:	4303      	orrs	r3, r0
 80011c2:	623b      	str	r3, [r7, #32]
 80011c4:	462b      	mov	r3, r5
 80011c6:	430b      	orrs	r3, r1
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
                ((uint64_t) (buf[6]) << 8 * 6) |
 80011ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80011ce:	3306      	adds	r3, #6
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	f04f 0300 	mov.w	r3, #0
 80011d8:	f04f 0000 	mov.w	r0, #0
 80011dc:	f04f 0100 	mov.w	r1, #0
 80011e0:	0411      	lsls	r1, r2, #16
 80011e2:	2000      	movs	r0, #0
                ((uint64_t) (buf[5]) << 8 * 5) |
 80011e4:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80011e8:	4623      	mov	r3, r4
 80011ea:	4303      	orrs	r3, r0
 80011ec:	61bb      	str	r3, [r7, #24]
 80011ee:	462b      	mov	r3, r5
 80011f0:	430b      	orrs	r3, r1
 80011f2:	61fb      	str	r3, [r7, #28]
                ((uint64_t) (buf[7]) << 8 * 7);
 80011f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80011f8:	3307      	adds	r3, #7
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	f04f 0300 	mov.w	r3, #0
 8001202:	f04f 0000 	mov.w	r0, #0
 8001206:	f04f 0100 	mov.w	r1, #0
 800120a:	0611      	lsls	r1, r2, #24
 800120c:	2000      	movs	r0, #0
        const uint64_t t = (uint64_t) (buf[0]) |
 800120e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001212:	4623      	mov	r3, r4
 8001214:	4303      	orrs	r3, r0
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	462b      	mov	r3, r5
 800121a:	430b      	orrs	r3, r1
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001222:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
#if defined(__x86_64__ ) || defined(__i386__)
        SHA3_ASSERT(memcmp(&t, buf, 8) == 0);
#endif
        ctx->u.s[ctx->wordIndex] ^= t;
 8001226:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800122a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800122e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001232:	3301      	adds	r3, #1
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4413      	add	r3, r2
 8001238:	e9d3 0100 	ldrd	r0, r1, [r3]
 800123c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001240:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 8001244:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001248:	ea80 0502 	eor.w	r5, r0, r2
 800124c:	613d      	str	r5, [r7, #16]
 800124e:	404b      	eors	r3, r1
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001256:	1c63      	adds	r3, r4, #1
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	4413      	add	r3, r2
 800125c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001260:	e9c3 1200 	strd	r1, r2, [r3]
        if(++ctx->wordIndex ==
 8001264:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001268:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001272:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001276:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800127a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
                (SHA3_KECCAK_SPONGE_WORDS - SHA3_CW(ctx->capacityWords))) {
 800127e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001282:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001286:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800128a:	f1c3 0319 	rsb	r3, r3, #25
        if(++ctx->wordIndex ==
 800128e:	429a      	cmp	r2, r3
 8001290:	d10a      	bne.n	80012a8 <sha3_Update+0x3b0>
            keccakf(ctx->u.s);
 8001292:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001296:	3308      	adds	r3, #8
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fc0b 	bl	8000ab4 <keccakf>
            ctx->wordIndex = 0;
 800129e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    for(i = 0; i < words; i++, buf += sizeof(uint64_t)) {
 80012a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012ac:	3301      	adds	r3, #1
 80012ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80012b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80012b6:	3308      	adds	r3, #8
 80012b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80012bc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80012c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80012c4:	429a      	cmp	r2, r3
 80012c6:	f4ff af0d 	bcc.w	80010e4 <sha3_Update+0x1ec>

    SHA3_TRACE("have %d bytes left to process, save them", (unsigned)tail);

    /* finally, save the partial word */
    SHA3_ASSERT(ctx->byteIndex == 0 && tail < 8);
    while (tail--) {
 80012ca:	e038      	b.n	800133e <sha3_Update+0x446>
        SHA3_TRACE("Store byte %02x '%c'", *buf, *buf);
        ctx->saved |= (uint64_t) (*(buf++)) << ((ctx->byteIndex++) * 8);
 80012cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80012e2:	f8d1 10d0 	ldr.w	r1, [r1, #208]	; 0xd0
 80012e6:	1c4c      	adds	r4, r1, #1
 80012e8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80012ec:	f8c0 40d0 	str.w	r4, [r0, #208]	; 0xd0
 80012f0:	00c9      	lsls	r1, r1, #3
 80012f2:	f1a1 0420 	sub.w	r4, r1, #32
 80012f6:	f1c1 0020 	rsb	r0, r1, #32
 80012fa:	fa03 f501 	lsl.w	r5, r3, r1
 80012fe:	667d      	str	r5, [r7, #100]	; 0x64
 8001300:	fa02 f404 	lsl.w	r4, r2, r4
 8001304:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 8001306:	4325      	orrs	r5, r4
 8001308:	667d      	str	r5, [r7, #100]	; 0x64
 800130a:	fa22 f000 	lsr.w	r0, r2, r0
 800130e:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8001310:	4304      	orrs	r4, r0
 8001312:	667c      	str	r4, [r7, #100]	; 0x64
 8001314:	fa02 f301 	lsl.w	r3, r2, r1
 8001318:	663b      	str	r3, [r7, #96]	; 0x60
 800131a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001322:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001326:	4621      	mov	r1, r4
 8001328:	4311      	orrs	r1, r2
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	4629      	mov	r1, r5
 800132e:	430b      	orrs	r3, r1
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001336:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800133a:	e9c3 1200 	strd	r1, r2, [r3]
    while (tail--) {
 800133e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001342:	1e5a      	subs	r2, r3, #1
 8001344:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1bf      	bne.n	80012cc <sha3_Update+0x3d4>
    }
    SHA3_ASSERT(ctx->byteIndex < 8);
    SHA3_TRACE("Have saved=0x%016" PRIx64 " at the end", ctx->saved);
}
 800134c:	379c      	adds	r7, #156	; 0x9c
 800134e:	46bd      	mov	sp, r7
 8001350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001354 <sha3_Finalize>:
 * The padding block is 0x01 || 0x00* || 0x80. First 0x01 and last 0x80 
 * bytes are always present, but they can be the same byte.
 */
void const *
sha3_Finalize(void *priv)
{
 8001354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001358:	b08b      	sub	sp, #44	; 0x2c
 800135a:	af00      	add	r7, sp, #0
 800135c:	60f8      	str	r0, [r7, #12]
    sha3_context *ctx = (sha3_context *) priv;
 800135e:	68f9      	ldr	r1, [r7, #12]
 8001360:	61b9      	str	r1, [r7, #24]
     * Overall, we feed 0, then 1, and finally 1 to start padding. Without
     * M || 01, we would simply use 1 to start padding. */

    uint64_t t;

    if( ctx->capacityWords & SHA3_USE_KECCAK_FLAG ) {
 8001362:	69b9      	ldr	r1, [r7, #24]
 8001364:	f8d1 10d8 	ldr.w	r1, [r1, #216]	; 0xd8
 8001368:	2900      	cmp	r1, #0
 800136a:	da18      	bge.n	800139e <sha3_Finalize+0x4a>
        /* Keccak version */
        t = (uint64_t)(((uint64_t) 1) << (ctx->byteIndex * 8));
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001372:	00d9      	lsls	r1, r3, #3
 8001374:	f04f 0201 	mov.w	r2, #1
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	f1a1 0620 	sub.w	r6, r1, #32
 8001380:	f1c1 0020 	rsb	r0, r1, #32
 8001384:	fa03 f501 	lsl.w	r5, r3, r1
 8001388:	fa02 f606 	lsl.w	r6, r2, r6
 800138c:	4335      	orrs	r5, r6
 800138e:	fa22 f000 	lsr.w	r0, r2, r0
 8001392:	4305      	orrs	r5, r0
 8001394:	fa02 f401 	lsl.w	r4, r2, r1
 8001398:	e9c7 4508 	strd	r4, r5, [r7, #32]
 800139c:	e017      	b.n	80013ce <sha3_Finalize+0x7a>
    }
    else {
        /* SHA3 version */
        t = (uint64_t)(((uint64_t)(0x02 | (1 << 2))) << ((ctx->byteIndex) * 8));
 800139e:	69b9      	ldr	r1, [r7, #24]
 80013a0:	f8d1 10d0 	ldr.w	r1, [r1, #208]	; 0xd0
 80013a4:	00cc      	lsls	r4, r1, #3
 80013a6:	f04f 0006 	mov.w	r0, #6
 80013aa:	f04f 0100 	mov.w	r1, #0
 80013ae:	f1a4 0620 	sub.w	r6, r4, #32
 80013b2:	f1c4 0520 	rsb	r5, r4, #32
 80013b6:	fa01 f304 	lsl.w	r3, r1, r4
 80013ba:	fa00 f606 	lsl.w	r6, r0, r6
 80013be:	4333      	orrs	r3, r6
 80013c0:	fa20 f505 	lsr.w	r5, r0, r5
 80013c4:	432b      	orrs	r3, r5
 80013c6:	fa00 f204 	lsl.w	r2, r0, r4
 80013ca:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }

    ctx->u.s[ctx->wordIndex] ^= ctx->saved ^ t;
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	3301      	adds	r3, #1
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	4413      	add	r3, r2
 80013dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e0:	69b9      	ldr	r1, [r7, #24]
 80013e2:	e9d1 4500 	ldrd	r4, r5, [r1]
 80013e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013ea:	ea84 0800 	eor.w	r8, r4, r0
 80013ee:	ea85 0901 	eor.w	r9, r5, r1
 80013f2:	69b9      	ldr	r1, [r7, #24]
 80013f4:	f8d1 10d4 	ldr.w	r1, [r1, #212]	; 0xd4
 80013f8:	ea82 0a08 	eor.w	sl, r2, r8
 80013fc:	ea83 0b09 	eor.w	fp, r3, r9
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	1c4b      	adds	r3, r1, #1
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	4413      	add	r3, r2
 8001408:	e9c3 ab00 	strd	sl, fp, [r3]

    ctx->u.s[SHA3_KECCAK_SPONGE_WORDS - SHA3_CW(ctx->capacityWords) - 1] ^=
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001412:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001416:	f1c3 0318 	rsb	r3, r3, #24
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	3301      	adds	r3, #1
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4413      	add	r3, r2
 8001422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001426:	69b9      	ldr	r1, [r7, #24]
 8001428:	f8d1 10d8 	ldr.w	r1, [r1, #216]	; 0xd8
 800142c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001430:	f1c1 0118 	rsb	r1, r1, #24
 8001434:	603a      	str	r2, [r7, #0]
 8001436:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	1c4b      	adds	r3, r1, #1
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4413      	add	r3, r2
 8001444:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001448:	e9c3 1200 	strd	r1, r2, [r3]
            SHA3_CONST(0x8000000000000000UL);
    keccakf(ctx->u.s);
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	3308      	adds	r3, #8
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fb2f 	bl	8000ab4 <keccakf>
     * || !defined(__ORDER_LITTLE_ENDIAN__) || __BYTE_ORDER__!=__ORDER_LITTLE_ENDIAN__ 
     *    ... the conversion below ...
     * #endif */
    {
        unsigned i;
        for(i = 0; i < SHA3_KECCAK_SPONGE_WORDS; i++) {
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
 800145a:	e067      	b.n	800152c <sha3_Finalize+0x1d8>
            const unsigned t1 = (uint32_t) ctx->u.s[i];
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3301      	adds	r3, #1
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4413      	add	r3, r2
 8001466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146a:	4613      	mov	r3, r2
 800146c:	617b      	str	r3, [r7, #20]
            const unsigned t2 = (uint32_t) ((ctx->u.s[i] >> 16) >> 16);
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	3301      	adds	r3, #1
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4413      	add	r3, r2
 8001478:	e9d3 0100 	ldrd	r0, r1, [r3]
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	000a      	movs	r2, r1
 8001486:	2300      	movs	r3, #0
 8001488:	4613      	mov	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
            ctx->u.sb[i * 8 + 0] = (uint8_t) (t1);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	b2d1      	uxtb	r1, r2
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4413      	add	r3, r2
 8001498:	460a      	mov	r2, r1
 800149a:	721a      	strb	r2, [r3, #8]
            ctx->u.sb[i * 8 + 1] = (uint8_t) (t1 >> 8);
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	0a1a      	lsrs	r2, r3, #8
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	3301      	adds	r3, #1
 80014a6:	b2d1      	uxtb	r1, r2
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4413      	add	r3, r2
 80014ac:	460a      	mov	r2, r1
 80014ae:	721a      	strb	r2, [r3, #8]
            ctx->u.sb[i * 8 + 2] = (uint8_t) (t1 >> 16);
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	0c1a      	lsrs	r2, r3, #16
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	3302      	adds	r3, #2
 80014ba:	b2d1      	uxtb	r1, r2
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4413      	add	r3, r2
 80014c0:	460a      	mov	r2, r1
 80014c2:	721a      	strb	r2, [r3, #8]
            ctx->u.sb[i * 8 + 3] = (uint8_t) (t1 >> 24);
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	0e1a      	lsrs	r2, r3, #24
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	3303      	adds	r3, #3
 80014ce:	b2d1      	uxtb	r1, r2
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4413      	add	r3, r2
 80014d4:	460a      	mov	r2, r1
 80014d6:	721a      	strb	r2, [r3, #8]
            ctx->u.sb[i * 8 + 4] = (uint8_t) (t2);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	3304      	adds	r3, #4
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	b2d1      	uxtb	r1, r2
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4413      	add	r3, r2
 80014e6:	460a      	mov	r2, r1
 80014e8:	721a      	strb	r2, [r3, #8]
            ctx->u.sb[i * 8 + 5] = (uint8_t) (t2 >> 8);
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	0a1a      	lsrs	r2, r3, #8
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	3305      	adds	r3, #5
 80014f4:	b2d1      	uxtb	r1, r2
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4413      	add	r3, r2
 80014fa:	460a      	mov	r2, r1
 80014fc:	721a      	strb	r2, [r3, #8]
            ctx->u.sb[i * 8 + 6] = (uint8_t) (t2 >> 16);
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	0c1a      	lsrs	r2, r3, #16
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	3306      	adds	r3, #6
 8001508:	b2d1      	uxtb	r1, r2
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4413      	add	r3, r2
 800150e:	460a      	mov	r2, r1
 8001510:	721a      	strb	r2, [r3, #8]
            ctx->u.sb[i * 8 + 7] = (uint8_t) (t2 >> 24);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	0e1a      	lsrs	r2, r3, #24
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	3307      	adds	r3, #7
 800151c:	b2d1      	uxtb	r1, r2
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4413      	add	r3, r2
 8001522:	460a      	mov	r2, r1
 8001524:	721a      	strb	r2, [r3, #8]
        for(i = 0; i < SHA3_KECCAK_SPONGE_WORDS; i++) {
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3301      	adds	r3, #1
 800152a:	61fb      	str	r3, [r7, #28]
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	2b18      	cmp	r3, #24
 8001530:	d994      	bls.n	800145c <sha3_Finalize+0x108>
        }
    }

    SHA3_TRACE_BUF("Hash: (first 32 bytes)", ctx->u.sb, 256 / 8);

    return (ctx->u.sb);
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	3308      	adds	r3, #8
}
 8001536:	4618      	mov	r0, r3
 8001538:	372c      	adds	r7, #44	; 0x2c
 800153a:	46bd      	mov	sp, r7
 800153c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <HAL_MspInit+0x5c>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	4a14      	ldr	r2, [pc, #80]	; (800159c <HAL_MspInit+0x5c>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6193      	str	r3, [r2, #24]
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_MspInit+0x5c>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_MspInit+0x5c>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	4a0e      	ldr	r2, [pc, #56]	; (800159c <HAL_MspInit+0x5c>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001568:	61d3      	str	r3, [r2, #28]
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <HAL_MspInit+0x5c>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <HAL_MspInit+0x60>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <HAL_MspInit+0x60>)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	40021000 	.word	0x40021000
 80015a0:	40010000 	.word	0x40010000

080015a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <HAL_UART_MspInit+0x8c>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d131      	bne.n	8001628 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <HAL_UART_MspInit+0x90>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a1a      	ldr	r2, [pc, #104]	; (8001634 <HAL_UART_MspInit+0x90>)
 80015ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <HAL_UART_MspInit+0x90>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_UART_MspInit+0x90>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a14      	ldr	r2, [pc, #80]	; (8001634 <HAL_UART_MspInit+0x90>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_UART_MspInit+0x90>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 0310 	add.w	r3, r7, #16
 8001606:	4619      	mov	r1, r3
 8001608:	480b      	ldr	r0, [pc, #44]	; (8001638 <HAL_UART_MspInit+0x94>)
 800160a:	f000 fa6d 	bl	8001ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800160e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001612:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 0310 	add.w	r3, r7, #16
 8001620:	4619      	mov	r1, r3
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <HAL_UART_MspInit+0x94>)
 8001624:	f000 fa60 	bl	8001ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001628:	bf00      	nop
 800162a:	3720      	adds	r7, #32
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40013800 	.word	0x40013800
 8001634:	40021000 	.word	0x40021000
 8001638:	40010800 	.word	0x40010800

0800163c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <NMI_Handler+0x4>

08001642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <MemManage_Handler+0x4>

0800164e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <BusFault_Handler+0x4>

08001654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <UsageFault_Handler+0x4>

0800165a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr

08001666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr

08001672 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr

0800167e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001682:	f000 f931 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}

0800168a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
	...

08001698 <inic_timer>:
#include "stm32f1xx_hal.h"
#include <stdint.h>
void inic_timer(uint32_t divisor_us)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	/*
	 * Uso el timer 2 para el monitor del sistema.
	 */
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80016a0:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <inic_timer+0x60>)
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <inic_timer+0x60>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	61d3      	str	r3, [r2, #28]
	/*
	 * Esta línea configura el prescaler del timer
	 * que cuenta tiempo del procesador. Prestar atención.
	 */
	TIM2->PSC = (SystemCoreClock / (1000000*divisor_us)) - 1;	//LLamo cada 1us
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <inic_timer+0x64>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4913      	ldr	r1, [pc, #76]	; (8001700 <inic_timer+0x68>)
 80016b4:	fb01 f303 	mul.w	r3, r1, r3
 80016b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016c0:	3b01      	subs	r3, #1
 80016c2:	6293      	str	r3, [r2, #40]	; 0x28
	TIM2->CNT = -1;
 80016c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 |= TIM_CR1_CEN;
 80016ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 80016de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6013      	str	r3, [r2, #0]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	40021000 	.word	0x40021000
 80016fc:	20000008 	.word	0x20000008
 8001700:	000f4240 	.word	0x000f4240

08001704 <init_timer_sandwich>:

void init_timer_sandwich(void){
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
	// ACÁ SE AGREGA EL TIMER 3 PARA SANDWICH
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <init_timer_sandwich+0x4c>)
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	4a10      	ldr	r2, [pc, #64]	; (8001750 <init_timer_sandwich+0x4c>)
 800170e:	f043 0302 	orr.w	r3, r3, #2
 8001712:	61d3      	str	r3, [r2, #28]
	//SANDWICH
	TIM3->PSC = (SystemCoreClock / (1000000)) - 1;	//LLamo cada 1us
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <init_timer_sandwich+0x50>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0f      	ldr	r2, [pc, #60]	; (8001758 <init_timer_sandwich+0x54>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	0c9b      	lsrs	r3, r3, #18
 8001720:	4a0e      	ldr	r2, [pc, #56]	; (800175c <init_timer_sandwich+0x58>)
 8001722:	3b01      	subs	r3, #1
 8001724:	6293      	str	r3, [r2, #40]	; 0x28
	TIM3->CNT = -1;
 8001726:	4b0d      	ldr	r3, [pc, #52]	; (800175c <init_timer_sandwich+0x58>)
 8001728:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CR1 |= TIM_CR1_CEN;
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <init_timer_sandwich+0x58>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <init_timer_sandwich+0x58>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~TIM_CR1_CEN;
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <init_timer_sandwich+0x58>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a07      	ldr	r2, [pc, #28]	; (800175c <init_timer_sandwich+0x58>)
 8001740:	f023 0301 	bic.w	r3, r3, #1
 8001744:	6013      	str	r3, [r2, #0]
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000
 8001754:	20000008 	.word	0x20000008
 8001758:	431bde83 	.word	0x431bde83
 800175c:	40000400 	.word	0x40000400

08001760 <start_timer>:

void start_timer(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
	TIM2->CNT = 0;
 8001764:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001768:	2200      	movs	r2, #0
 800176a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 |= TIM_CR1_CEN;
 800176c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <stop_timer>:

uint32_t stop_timer(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
	uint32_t ret = TIM2->CNT;
 800178a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001790:	607b      	str	r3, [r7, #4]
	TIM2->CR1 &= ~TIM_CR1_CEN; //Bajo el enable
 8001792:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800179c:	f023 0301 	bic.w	r3, r3, #1
 80017a0:	6013      	str	r3, [r2, #0]
	return ret;
 80017a2:	687b      	ldr	r3, [r7, #4]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
	...

080017b0 <start_sandwich>:

void start_sandwich(){
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
	TIM3->CNT = 0;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <start_sandwich+0x20>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CR1 |= TIM_CR1_CEN;
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <start_sandwich+0x20>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <start_sandwich+0x20>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6013      	str	r3, [r2, #0]
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40000400 	.word	0x40000400

080017d4 <stop_sandwich>:

uint8_t stop_sandwich(uint32_t demora)  //demora en us
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	uint8_t ret=0;
 80017dc:	2300      	movs	r3, #0
 80017de:	73fb      	strb	r3, [r7, #15]
	uint32_t timer=TIM3->CNT;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <stop_sandwich+0x38>)
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	60bb      	str	r3, [r7, #8]
	if(timer>=demora){
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d307      	bcc.n	80017fe <stop_sandwich+0x2a>
		TIM3->CR1 &= ~TIM_CR1_CEN; //Bajo el enable
 80017ee:	4b07      	ldr	r3, [pc, #28]	; (800180c <stop_sandwich+0x38>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a06      	ldr	r2, [pc, #24]	; (800180c <stop_sandwich+0x38>)
 80017f4:	f023 0301 	bic.w	r3, r3, #1
 80017f8:	6013      	str	r3, [r2, #0]
		ret=1;
 80017fa:	2301      	movs	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40000400 	.word	0x40000400

08001810 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001810:	480c      	ldr	r0, [pc, #48]	; (8001844 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001812:	490d      	ldr	r1, [pc, #52]	; (8001848 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001814:	4a0d      	ldr	r2, [pc, #52]	; (800184c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001818:	e002      	b.n	8001820 <LoopCopyDataInit>

0800181a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800181c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181e:	3304      	adds	r3, #4

08001820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001824:	d3f9      	bcc.n	800181a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001826:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001828:	4c0a      	ldr	r4, [pc, #40]	; (8001854 <LoopFillZerobss+0x22>)
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800182c:	e001      	b.n	8001832 <LoopFillZerobss>

0800182e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001830:	3204      	adds	r2, #4

08001832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001834:	d3fb      	bcc.n	800182e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001836:	f7ff ff28 	bl	800168a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800183a:	f001 f817 	bl	800286c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800183e:	f7fe fe87 	bl	8000550 <main>
  bx lr
 8001842:	4770      	bx	lr
  ldr r0, =_sdata
 8001844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001848:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800184c:	08002a90 	.word	0x08002a90
  ldr r2, =_sbss
 8001850:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001854:	20000334 	.word	0x20000334

08001858 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC1_2_IRQHandler>
	...

0800185c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_Init+0x28>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a07      	ldr	r2, [pc, #28]	; (8001884 <HAL_Init+0x28>)
 8001866:	f043 0310 	orr.w	r3, r3, #16
 800186a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186c:	2003      	movs	r0, #3
 800186e:	f000 f907 	bl	8001a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001872:	200f      	movs	r0, #15
 8001874:	f000 f808 	bl	8001888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001878:	f7ff fe62 	bl	8001540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40022000 	.word	0x40022000

08001888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_InitTick+0x54>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_InitTick+0x58>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189e:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f911 	bl	8001ace <HAL_SYSTICK_Config>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00e      	b.n	80018d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b0f      	cmp	r3, #15
 80018ba:	d80a      	bhi.n	80018d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018bc:	2200      	movs	r2, #0
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018c4:	f000 f8e7 	bl	8001a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c8:	4a06      	ldr	r2, [pc, #24]	; (80018e4 <HAL_InitTick+0x5c>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000008 	.word	0x20000008
 80018e0:	20000010 	.word	0x20000010
 80018e4:	2000000c 	.word	0x2000000c

080018e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_IncTick+0x1c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_IncTick+0x20>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a03      	ldr	r2, [pc, #12]	; (8001908 <HAL_IncTick+0x20>)
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	20000010 	.word	0x20000010
 8001908:	20000330 	.word	0x20000330

0800190c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;
 8001910:	4b02      	ldr	r3, [pc, #8]	; (800191c <HAL_GetTick+0x10>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	20000330 	.word	0x20000330

08001920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800193c:	4013      	ands	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800194c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001952:	4a04      	ldr	r2, [pc, #16]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	60d3      	str	r3, [r2, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <__NVIC_GetPriorityGrouping+0x18>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	f003 0307 	and.w	r3, r3, #7
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	6039      	str	r1, [r7, #0]
 800198e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001994:	2b00      	cmp	r3, #0
 8001996:	db0a      	blt.n	80019ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	490c      	ldr	r1, [pc, #48]	; (80019d0 <__NVIC_SetPriority+0x4c>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	0112      	lsls	r2, r2, #4
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	440b      	add	r3, r1
 80019a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019ac:	e00a      	b.n	80019c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4908      	ldr	r1, [pc, #32]	; (80019d4 <__NVIC_SetPriority+0x50>)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	3b04      	subs	r3, #4
 80019bc:	0112      	lsls	r2, r2, #4
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	440b      	add	r3, r1
 80019c2:	761a      	strb	r2, [r3, #24]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000e100 	.word	0xe000e100
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f1c3 0307 	rsb	r3, r3, #7
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	bf28      	it	cs
 80019f6:	2304      	movcs	r3, #4
 80019f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3304      	adds	r3, #4
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d902      	bls.n	8001a08 <NVIC_EncodePriority+0x30>
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3b03      	subs	r3, #3
 8001a06:	e000      	b.n	8001a0a <NVIC_EncodePriority+0x32>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43da      	mvns	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	43d9      	mvns	r1, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	4313      	orrs	r3, r2
         );
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3724      	adds	r7, #36	; 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a4c:	d301      	bcc.n	8001a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00f      	b.n	8001a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <SysTick_Config+0x40>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a5a:	210f      	movs	r1, #15
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a60:	f7ff ff90 	bl	8001984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <SysTick_Config+0x40>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <SysTick_Config+0x40>)
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	e000e010 	.word	0xe000e010

08001a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ff49 	bl	8001920 <__NVIC_SetPriorityGrouping>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa8:	f7ff ff5e 	bl	8001968 <__NVIC_GetPriorityGrouping>
 8001aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	6978      	ldr	r0, [r7, #20]
 8001ab4:	f7ff ff90 	bl	80019d8 <NVIC_EncodePriority>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff5f 	bl	8001984 <__NVIC_SetPriority>
}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ffb0 	bl	8001a3c <SysTick_Config>
 8001adc:	4603      	mov	r3, r0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b08b      	sub	sp, #44	; 0x2c
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001af6:	2300      	movs	r3, #0
 8001af8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afa:	e169      	b.n	8001dd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001afc:	2201      	movs	r2, #1
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	69fa      	ldr	r2, [r7, #28]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	f040 8158 	bne.w	8001dca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4a9a      	ldr	r2, [pc, #616]	; (8001d88 <HAL_GPIO_Init+0x2a0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d05e      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b24:	4a98      	ldr	r2, [pc, #608]	; (8001d88 <HAL_GPIO_Init+0x2a0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d875      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b2a:	4a98      	ldr	r2, [pc, #608]	; (8001d8c <HAL_GPIO_Init+0x2a4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d058      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b30:	4a96      	ldr	r2, [pc, #600]	; (8001d8c <HAL_GPIO_Init+0x2a4>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d86f      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b36:	4a96      	ldr	r2, [pc, #600]	; (8001d90 <HAL_GPIO_Init+0x2a8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d052      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b3c:	4a94      	ldr	r2, [pc, #592]	; (8001d90 <HAL_GPIO_Init+0x2a8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d869      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b42:	4a94      	ldr	r2, [pc, #592]	; (8001d94 <HAL_GPIO_Init+0x2ac>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d04c      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b48:	4a92      	ldr	r2, [pc, #584]	; (8001d94 <HAL_GPIO_Init+0x2ac>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d863      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b4e:	4a92      	ldr	r2, [pc, #584]	; (8001d98 <HAL_GPIO_Init+0x2b0>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d046      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b54:	4a90      	ldr	r2, [pc, #576]	; (8001d98 <HAL_GPIO_Init+0x2b0>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d85d      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b5a:	2b12      	cmp	r3, #18
 8001b5c:	d82a      	bhi.n	8001bb4 <HAL_GPIO_Init+0xcc>
 8001b5e:	2b12      	cmp	r3, #18
 8001b60:	d859      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b62:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <HAL_GPIO_Init+0x80>)
 8001b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b68:	08001be3 	.word	0x08001be3
 8001b6c:	08001bbd 	.word	0x08001bbd
 8001b70:	08001bcf 	.word	0x08001bcf
 8001b74:	08001c11 	.word	0x08001c11
 8001b78:	08001c17 	.word	0x08001c17
 8001b7c:	08001c17 	.word	0x08001c17
 8001b80:	08001c17 	.word	0x08001c17
 8001b84:	08001c17 	.word	0x08001c17
 8001b88:	08001c17 	.word	0x08001c17
 8001b8c:	08001c17 	.word	0x08001c17
 8001b90:	08001c17 	.word	0x08001c17
 8001b94:	08001c17 	.word	0x08001c17
 8001b98:	08001c17 	.word	0x08001c17
 8001b9c:	08001c17 	.word	0x08001c17
 8001ba0:	08001c17 	.word	0x08001c17
 8001ba4:	08001c17 	.word	0x08001c17
 8001ba8:	08001c17 	.word	0x08001c17
 8001bac:	08001bc5 	.word	0x08001bc5
 8001bb0:	08001bd9 	.word	0x08001bd9
 8001bb4:	4a79      	ldr	r2, [pc, #484]	; (8001d9c <HAL_GPIO_Init+0x2b4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d013      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bba:	e02c      	b.n	8001c16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	623b      	str	r3, [r7, #32]
          break;
 8001bc2:	e029      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	623b      	str	r3, [r7, #32]
          break;
 8001bcc:	e024      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	3308      	adds	r3, #8
 8001bd4:	623b      	str	r3, [r7, #32]
          break;
 8001bd6:	e01f      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	330c      	adds	r3, #12
 8001bde:	623b      	str	r3, [r7, #32]
          break;
 8001be0:	e01a      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d102      	bne.n	8001bf0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bea:	2304      	movs	r3, #4
 8001bec:	623b      	str	r3, [r7, #32]
          break;
 8001bee:	e013      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d105      	bne.n	8001c04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	611a      	str	r2, [r3, #16]
          break;
 8001c02:	e009      	b.n	8001c18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c04:	2308      	movs	r3, #8
 8001c06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	615a      	str	r2, [r3, #20]
          break;
 8001c0e:	e003      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c10:	2300      	movs	r3, #0
 8001c12:	623b      	str	r3, [r7, #32]
          break;
 8001c14:	e000      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          break;
 8001c16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2bff      	cmp	r3, #255	; 0xff
 8001c1c:	d801      	bhi.n	8001c22 <HAL_GPIO_Init+0x13a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	e001      	b.n	8001c26 <HAL_GPIO_Init+0x13e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3304      	adds	r3, #4
 8001c26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2bff      	cmp	r3, #255	; 0xff
 8001c2c:	d802      	bhi.n	8001c34 <HAL_GPIO_Init+0x14c>
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	e002      	b.n	8001c3a <HAL_GPIO_Init+0x152>
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	3b08      	subs	r3, #8
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	210f      	movs	r1, #15
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	fa01 f303 	lsl.w	r3, r1, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	6a39      	ldr	r1, [r7, #32]
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	fa01 f303 	lsl.w	r3, r1, r3
 8001c54:	431a      	orrs	r2, r3
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 80b1 	beq.w	8001dca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c68:	4b4d      	ldr	r3, [pc, #308]	; (8001da0 <HAL_GPIO_Init+0x2b8>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4a4c      	ldr	r2, [pc, #304]	; (8001da0 <HAL_GPIO_Init+0x2b8>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6193      	str	r3, [r2, #24]
 8001c74:	4b4a      	ldr	r3, [pc, #296]	; (8001da0 <HAL_GPIO_Init+0x2b8>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c80:	4a48      	ldr	r2, [pc, #288]	; (8001da4 <HAL_GPIO_Init+0x2bc>)
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	089b      	lsrs	r3, r3, #2
 8001c86:	3302      	adds	r3, #2
 8001c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	220f      	movs	r2, #15
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a40      	ldr	r2, [pc, #256]	; (8001da8 <HAL_GPIO_Init+0x2c0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d013      	beq.n	8001cd4 <HAL_GPIO_Init+0x1ec>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a3f      	ldr	r2, [pc, #252]	; (8001dac <HAL_GPIO_Init+0x2c4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d00d      	beq.n	8001cd0 <HAL_GPIO_Init+0x1e8>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a3e      	ldr	r2, [pc, #248]	; (8001db0 <HAL_GPIO_Init+0x2c8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d007      	beq.n	8001ccc <HAL_GPIO_Init+0x1e4>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a3d      	ldr	r2, [pc, #244]	; (8001db4 <HAL_GPIO_Init+0x2cc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d101      	bne.n	8001cc8 <HAL_GPIO_Init+0x1e0>
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e006      	b.n	8001cd6 <HAL_GPIO_Init+0x1ee>
 8001cc8:	2304      	movs	r3, #4
 8001cca:	e004      	b.n	8001cd6 <HAL_GPIO_Init+0x1ee>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e002      	b.n	8001cd6 <HAL_GPIO_Init+0x1ee>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <HAL_GPIO_Init+0x1ee>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd8:	f002 0203 	and.w	r2, r2, #3
 8001cdc:	0092      	lsls	r2, r2, #2
 8001cde:	4093      	lsls	r3, r2
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ce6:	492f      	ldr	r1, [pc, #188]	; (8001da4 <HAL_GPIO_Init+0x2bc>)
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	089b      	lsrs	r3, r3, #2
 8001cec:	3302      	adds	r3, #2
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d006      	beq.n	8001d0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d00:	4b2d      	ldr	r3, [pc, #180]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	492c      	ldr	r1, [pc, #176]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]
 8001d0c:	e006      	b.n	8001d1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	4928      	ldr	r1, [pc, #160]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d28:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	4922      	ldr	r1, [pc, #136]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
 8001d34:	e006      	b.n	8001d44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d36:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	491e      	ldr	r1, [pc, #120]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d006      	beq.n	8001d5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	4918      	ldr	r1, [pc, #96]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	608b      	str	r3, [r1, #8]
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d5e:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	4914      	ldr	r1, [pc, #80]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d021      	beq.n	8001dbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	490e      	ldr	r1, [pc, #56]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	60cb      	str	r3, [r1, #12]
 8001d84:	e021      	b.n	8001dca <HAL_GPIO_Init+0x2e2>
 8001d86:	bf00      	nop
 8001d88:	10320000 	.word	0x10320000
 8001d8c:	10310000 	.word	0x10310000
 8001d90:	10220000 	.word	0x10220000
 8001d94:	10210000 	.word	0x10210000
 8001d98:	10120000 	.word	0x10120000
 8001d9c:	10110000 	.word	0x10110000
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40010000 	.word	0x40010000
 8001da8:	40010800 	.word	0x40010800
 8001dac:	40010c00 	.word	0x40010c00
 8001db0:	40011000 	.word	0x40011000
 8001db4:	40011400 	.word	0x40011400
 8001db8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_GPIO_Init+0x304>)
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	4909      	ldr	r1, [pc, #36]	; (8001dec <HAL_GPIO_Init+0x304>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	3301      	adds	r3, #1
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f47f ae8e 	bne.w	8001afc <HAL_GPIO_Init+0x14>
  }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	372c      	adds	r7, #44	; 0x2c
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	40010400 	.word	0x40010400

08001df0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	887b      	ldrh	r3, [r7, #2]
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	e001      	b.n	8001e12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr

08001e1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	807b      	strh	r3, [r7, #2]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e2e:	787b      	ldrb	r3, [r7, #1]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e34:	887a      	ldrh	r2, [r7, #2]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e3a:	e003      	b.n	8001e44 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e3c:	887b      	ldrh	r3, [r7, #2]
 8001e3e:	041a      	lsls	r2, r3, #16
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	611a      	str	r2, [r3, #16]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr

08001e4e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b085      	sub	sp, #20
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e60:	887a      	ldrh	r2, [r7, #2]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4013      	ands	r3, r2
 8001e66:	041a      	lsls	r2, r3, #16
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	43d9      	mvns	r1, r3
 8001e6c:	887b      	ldrh	r3, [r7, #2]
 8001e6e:	400b      	ands	r3, r1
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	611a      	str	r2, [r3, #16]
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e26c      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8087 	beq.w	8001fae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ea0:	4b92      	ldr	r3, [pc, #584]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 030c 	and.w	r3, r3, #12
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d00c      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001eac:	4b8f      	ldr	r3, [pc, #572]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 030c 	and.w	r3, r3, #12
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d112      	bne.n	8001ede <HAL_RCC_OscConfig+0x5e>
 8001eb8:	4b8c      	ldr	r3, [pc, #560]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec4:	d10b      	bne.n	8001ede <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec6:	4b89      	ldr	r3, [pc, #548]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d06c      	beq.n	8001fac <HAL_RCC_OscConfig+0x12c>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d168      	bne.n	8001fac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e246      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x76>
 8001ee8:	4b80      	ldr	r3, [pc, #512]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a7f      	ldr	r2, [pc, #508]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	e02e      	b.n	8001f54 <HAL_RCC_OscConfig+0xd4>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x98>
 8001efe:	4b7b      	ldr	r3, [pc, #492]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a7a      	ldr	r2, [pc, #488]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	4b78      	ldr	r3, [pc, #480]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a77      	ldr	r2, [pc, #476]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e01d      	b.n	8001f54 <HAL_RCC_OscConfig+0xd4>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0xbc>
 8001f22:	4b72      	ldr	r3, [pc, #456]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a71      	ldr	r2, [pc, #452]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	4b6f      	ldr	r3, [pc, #444]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a6e      	ldr	r2, [pc, #440]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	e00b      	b.n	8001f54 <HAL_RCC_OscConfig+0xd4>
 8001f3c:	4b6b      	ldr	r3, [pc, #428]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a6a      	ldr	r2, [pc, #424]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b68      	ldr	r3, [pc, #416]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a67      	ldr	r2, [pc, #412]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d013      	beq.n	8001f84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7ff fcd6 	bl	800190c <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f64:	f7ff fcd2 	bl	800190c <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e1fa      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	4b5d      	ldr	r3, [pc, #372]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0xe4>
 8001f82:	e014      	b.n	8001fae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7ff fcc2 	bl	800190c <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7ff fcbe 	bl	800190c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e1e6      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9e:	4b53      	ldr	r3, [pc, #332]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x10c>
 8001faa:	e000      	b.n	8001fae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d063      	beq.n	8002082 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fba:	4b4c      	ldr	r3, [pc, #304]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00b      	beq.n	8001fde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fc6:	4b49      	ldr	r3, [pc, #292]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d11c      	bne.n	800200c <HAL_RCC_OscConfig+0x18c>
 8001fd2:	4b46      	ldr	r3, [pc, #280]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d116      	bne.n	800200c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fde:	4b43      	ldr	r3, [pc, #268]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d005      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x176>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d001      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e1ba      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4939      	ldr	r1, [pc, #228]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200a:	e03a      	b.n	8002082 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d020      	beq.n	8002056 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002014:	4b36      	ldr	r3, [pc, #216]	; (80020f0 <HAL_RCC_OscConfig+0x270>)
 8002016:	2201      	movs	r2, #1
 8002018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201a:	f7ff fc77 	bl	800190c <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002022:	f7ff fc73 	bl	800190c <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e19b      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002034:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002040:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4927      	ldr	r1, [pc, #156]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]
 8002054:	e015      	b.n	8002082 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002056:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <HAL_RCC_OscConfig+0x270>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7ff fc56 	bl	800190c <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002064:	f7ff fc52 	bl	800190c <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e17a      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002076:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d03a      	beq.n	8002104 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d019      	beq.n	80020ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002096:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <HAL_RCC_OscConfig+0x274>)
 8002098:	2201      	movs	r2, #1
 800209a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209c:	f7ff fc36 	bl	800190c <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a4:	f7ff fc32 	bl	800190c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e15a      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020c2:	2001      	movs	r0, #1
 80020c4:	f000 fad8 	bl	8002678 <RCC_Delay>
 80020c8:	e01c      	b.n	8002104 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_RCC_OscConfig+0x274>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d0:	f7ff fc1c 	bl	800190c <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d6:	e00f      	b.n	80020f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d8:	f7ff fc18 	bl	800190c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d908      	bls.n	80020f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e140      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	42420000 	.word	0x42420000
 80020f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f8:	4b9e      	ldr	r3, [pc, #632]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1e9      	bne.n	80020d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80a6 	beq.w	800225e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002116:	4b97      	ldr	r3, [pc, #604]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10d      	bne.n	800213e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	4b94      	ldr	r3, [pc, #592]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4a93      	ldr	r2, [pc, #588]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212c:	61d3      	str	r3, [r2, #28]
 800212e:	4b91      	ldr	r3, [pc, #580]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800213a:	2301      	movs	r3, #1
 800213c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213e:	4b8e      	ldr	r3, [pc, #568]	; (8002378 <HAL_RCC_OscConfig+0x4f8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d118      	bne.n	800217c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800214a:	4b8b      	ldr	r3, [pc, #556]	; (8002378 <HAL_RCC_OscConfig+0x4f8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a8a      	ldr	r2, [pc, #552]	; (8002378 <HAL_RCC_OscConfig+0x4f8>)
 8002150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002156:	f7ff fbd9 	bl	800190c <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215e:	f7ff fbd5 	bl	800190c <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b64      	cmp	r3, #100	; 0x64
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0fd      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002170:	4b81      	ldr	r3, [pc, #516]	; (8002378 <HAL_RCC_OscConfig+0x4f8>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0f0      	beq.n	800215e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x312>
 8002184:	4b7b      	ldr	r3, [pc, #492]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	4a7a      	ldr	r2, [pc, #488]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6213      	str	r3, [r2, #32]
 8002190:	e02d      	b.n	80021ee <HAL_RCC_OscConfig+0x36e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x334>
 800219a:	4b76      	ldr	r3, [pc, #472]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4a75      	ldr	r2, [pc, #468]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	f023 0301 	bic.w	r3, r3, #1
 80021a4:	6213      	str	r3, [r2, #32]
 80021a6:	4b73      	ldr	r3, [pc, #460]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4a72      	ldr	r2, [pc, #456]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021ac:	f023 0304 	bic.w	r3, r3, #4
 80021b0:	6213      	str	r3, [r2, #32]
 80021b2:	e01c      	b.n	80021ee <HAL_RCC_OscConfig+0x36e>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b05      	cmp	r3, #5
 80021ba:	d10c      	bne.n	80021d6 <HAL_RCC_OscConfig+0x356>
 80021bc:	4b6d      	ldr	r3, [pc, #436]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	4a6c      	ldr	r2, [pc, #432]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021c2:	f043 0304 	orr.w	r3, r3, #4
 80021c6:	6213      	str	r3, [r2, #32]
 80021c8:	4b6a      	ldr	r3, [pc, #424]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	4a69      	ldr	r2, [pc, #420]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	6213      	str	r3, [r2, #32]
 80021d4:	e00b      	b.n	80021ee <HAL_RCC_OscConfig+0x36e>
 80021d6:	4b67      	ldr	r3, [pc, #412]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	4a66      	ldr	r2, [pc, #408]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021dc:	f023 0301 	bic.w	r3, r3, #1
 80021e0:	6213      	str	r3, [r2, #32]
 80021e2:	4b64      	ldr	r3, [pc, #400]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	4a63      	ldr	r2, [pc, #396]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021e8:	f023 0304 	bic.w	r3, r3, #4
 80021ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d015      	beq.n	8002222 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f6:	f7ff fb89 	bl	800190c <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fc:	e00a      	b.n	8002214 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fe:	f7ff fb85 	bl	800190c <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	f241 3288 	movw	r2, #5000	; 0x1388
 800220c:	4293      	cmp	r3, r2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e0ab      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002214:	4b57      	ldr	r3, [pc, #348]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0ee      	beq.n	80021fe <HAL_RCC_OscConfig+0x37e>
 8002220:	e014      	b.n	800224c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002222:	f7ff fb73 	bl	800190c <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002228:	e00a      	b.n	8002240 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222a:	f7ff fb6f 	bl	800190c <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	f241 3288 	movw	r2, #5000	; 0x1388
 8002238:	4293      	cmp	r3, r2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e095      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002240:	4b4c      	ldr	r3, [pc, #304]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1ee      	bne.n	800222a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800224c:	7dfb      	ldrb	r3, [r7, #23]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d105      	bne.n	800225e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002252:	4b48      	ldr	r3, [pc, #288]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	4a47      	ldr	r2, [pc, #284]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800225c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 8081 	beq.w	800236a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002268:	4b42      	ldr	r3, [pc, #264]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 030c 	and.w	r3, r3, #12
 8002270:	2b08      	cmp	r3, #8
 8002272:	d061      	beq.n	8002338 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	2b02      	cmp	r3, #2
 800227a:	d146      	bne.n	800230a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227c:	4b3f      	ldr	r3, [pc, #252]	; (800237c <HAL_RCC_OscConfig+0x4fc>)
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7ff fb43 	bl	800190c <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228a:	f7ff fb3f 	bl	800190c <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e067      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229c:	4b35      	ldr	r3, [pc, #212]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1f0      	bne.n	800228a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b0:	d108      	bne.n	80022c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022b2:	4b30      	ldr	r3, [pc, #192]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	492d      	ldr	r1, [pc, #180]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022c4:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a19      	ldr	r1, [r3, #32]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	430b      	orrs	r3, r1
 80022d6:	4927      	ldr	r1, [pc, #156]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022dc:	4b27      	ldr	r3, [pc, #156]	; (800237c <HAL_RCC_OscConfig+0x4fc>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e2:	f7ff fb13 	bl	800190c <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ea:	f7ff fb0f 	bl	800190c <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e037      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022fc:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x46a>
 8002308:	e02f      	b.n	800236a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230a:	4b1c      	ldr	r3, [pc, #112]	; (800237c <HAL_RCC_OscConfig+0x4fc>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7ff fafc 	bl	800190c <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002318:	f7ff faf8 	bl	800190c <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e020      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x498>
 8002336:	e018      	b.n	800236a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e013      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	429a      	cmp	r2, r3
 8002356:	d106      	bne.n	8002366 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002362:	429a      	cmp	r2, r3
 8002364:	d001      	beq.n	800236a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000
 8002378:	40007000 	.word	0x40007000
 800237c:	42420060 	.word	0x42420060

08002380 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0d0      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002394:	4b6a      	ldr	r3, [pc, #424]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d910      	bls.n	80023c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a2:	4b67      	ldr	r3, [pc, #412]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 0207 	bic.w	r2, r3, #7
 80023aa:	4965      	ldr	r1, [pc, #404]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	4b63      	ldr	r3, [pc, #396]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0b8      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d020      	beq.n	8002412 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023dc:	4b59      	ldr	r3, [pc, #356]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	4a58      	ldr	r2, [pc, #352]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f4:	4b53      	ldr	r3, [pc, #332]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4a52      	ldr	r2, [pc, #328]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002400:	4b50      	ldr	r3, [pc, #320]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	494d      	ldr	r1, [pc, #308]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 800240e:	4313      	orrs	r3, r2
 8002410:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d040      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	4b47      	ldr	r3, [pc, #284]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d115      	bne.n	800245e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e07f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d107      	bne.n	800244e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243e:	4b41      	ldr	r3, [pc, #260]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d109      	bne.n	800245e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e073      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244e:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e06b      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800245e:	4b39      	ldr	r3, [pc, #228]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f023 0203 	bic.w	r2, r3, #3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	4936      	ldr	r1, [pc, #216]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	4313      	orrs	r3, r2
 800246e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002470:	f7ff fa4c 	bl	800190c <HAL_GetTick>
 8002474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002476:	e00a      	b.n	800248e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002478:	f7ff fa48 	bl	800190c <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f241 3288 	movw	r2, #5000	; 0x1388
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e053      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248e:	4b2d      	ldr	r3, [pc, #180]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 020c 	and.w	r2, r3, #12
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	429a      	cmp	r2, r3
 800249e:	d1eb      	bne.n	8002478 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024a0:	4b27      	ldr	r3, [pc, #156]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d210      	bcs.n	80024d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ae:	4b24      	ldr	r3, [pc, #144]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 0207 	bic.w	r2, r3, #7
 80024b6:	4922      	ldr	r1, [pc, #136]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	4b20      	ldr	r3, [pc, #128]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e032      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4916      	ldr	r1, [pc, #88]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d009      	beq.n	800250e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	490e      	ldr	r1, [pc, #56]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	4313      	orrs	r3, r2
 800250c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800250e:	f000 f821 	bl	8002554 <HAL_RCC_GetSysClockFreq>
 8002512:	4602      	mov	r2, r0
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	490a      	ldr	r1, [pc, #40]	; (8002548 <HAL_RCC_ClockConfig+0x1c8>)
 8002520:	5ccb      	ldrb	r3, [r1, r3]
 8002522:	fa22 f303 	lsr.w	r3, r2, r3
 8002526:	4a09      	ldr	r2, [pc, #36]	; (800254c <HAL_RCC_ClockConfig+0x1cc>)
 8002528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_RCC_ClockConfig+0x1d0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff f9aa 	bl	8001888 <HAL_InitTick>

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40022000 	.word	0x40022000
 8002544:	40021000 	.word	0x40021000
 8002548:	08002a70 	.word	0x08002a70
 800254c:	20000008 	.word	0x20000008
 8002550:	2000000c 	.word	0x2000000c

08002554 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002554:	b490      	push	{r4, r7}
 8002556:	b08a      	sub	sp, #40	; 0x28
 8002558:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800255a:	4b2a      	ldr	r3, [pc, #168]	; (8002604 <HAL_RCC_GetSysClockFreq+0xb0>)
 800255c:	1d3c      	adds	r4, r7, #4
 800255e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002560:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002564:	f240 2301 	movw	r3, #513	; 0x201
 8002568:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	2300      	movs	r3, #0
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	2300      	movs	r3, #0
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800257a:	2300      	movs	r3, #0
 800257c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800257e:	4b22      	ldr	r3, [pc, #136]	; (8002608 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b04      	cmp	r3, #4
 800258c:	d002      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0x40>
 800258e:	2b08      	cmp	r3, #8
 8002590:	d003      	beq.n	800259a <HAL_RCC_GetSysClockFreq+0x46>
 8002592:	e02d      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002594:	4b1d      	ldr	r3, [pc, #116]	; (800260c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002596:	623b      	str	r3, [r7, #32]
      break;
 8002598:	e02d      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	0c9b      	lsrs	r3, r3, #18
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025a6:	4413      	add	r3, r2
 80025a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025ac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d013      	beq.n	80025e0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025b8:	4b13      	ldr	r3, [pc, #76]	; (8002608 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	0c5b      	lsrs	r3, r3, #17
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025c6:	4413      	add	r3, r2
 80025c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	4a0e      	ldr	r2, [pc, #56]	; (800260c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d2:	fb02 f203 	mul.w	r2, r2, r3
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
 80025de:	e004      	b.n	80025ea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	4a0b      	ldr	r2, [pc, #44]	; (8002610 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025e4:	fb02 f303 	mul.w	r3, r2, r3
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	623b      	str	r3, [r7, #32]
      break;
 80025ee:	e002      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f2:	623b      	str	r3, [r7, #32]
      break;
 80025f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025f6:	6a3b      	ldr	r3, [r7, #32]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3728      	adds	r7, #40	; 0x28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc90      	pop	{r4, r7}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	080028e0 	.word	0x080028e0
 8002608:	40021000 	.word	0x40021000
 800260c:	007a1200 	.word	0x007a1200
 8002610:	003d0900 	.word	0x003d0900

08002614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002618:	4b02      	ldr	r3, [pc, #8]	; (8002624 <HAL_RCC_GetHCLKFreq+0x10>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr
 8002624:	20000008 	.word	0x20000008

08002628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800262c:	f7ff fff2 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	4903      	ldr	r1, [pc, #12]	; (800264c <HAL_RCC_GetPCLK1Freq+0x24>)
 800263e:	5ccb      	ldrb	r3, [r1, r3]
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	08002a80 	.word	0x08002a80

08002650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002654:	f7ff ffde 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8002658:	4602      	mov	r2, r0
 800265a:	4b05      	ldr	r3, [pc, #20]	; (8002670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	0adb      	lsrs	r3, r3, #11
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	4903      	ldr	r1, [pc, #12]	; (8002674 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002666:	5ccb      	ldrb	r3, [r1, r3]
 8002668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800266c:	4618      	mov	r0, r3
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000
 8002674:	08002a80 	.word	0x08002a80

08002678 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002680:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <RCC_Delay+0x34>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <RCC_Delay+0x38>)
 8002686:	fba2 2303 	umull	r2, r3, r2, r3
 800268a:	0a5b      	lsrs	r3, r3, #9
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	fb02 f303 	mul.w	r3, r2, r3
 8002692:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002694:	bf00      	nop
  }
  while (Delay --);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1e5a      	subs	r2, r3, #1
 800269a:	60fa      	str	r2, [r7, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f9      	bne.n	8002694 <RCC_Delay+0x1c>
}
 80026a0:	bf00      	nop
 80026a2:	bf00      	nop
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	20000008 	.word	0x20000008
 80026b0:	10624dd3 	.word	0x10624dd3

080026b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e03f      	b.n	8002746 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fe ff62 	bl	80015a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2224      	movs	r2, #36	; 0x24
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f829 	bl	8002750 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800270c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695a      	ldr	r2, [r3, #20]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800271c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800272c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	4313      	orrs	r3, r2
 800277e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800278a:	f023 030c 	bic.w	r3, r3, #12
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	68b9      	ldr	r1, [r7, #8]
 8002794:	430b      	orrs	r3, r1
 8002796:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699a      	ldr	r2, [r3, #24]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a2c      	ldr	r2, [pc, #176]	; (8002864 <UART_SetConfig+0x114>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d103      	bne.n	80027c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027b8:	f7ff ff4a 	bl	8002650 <HAL_RCC_GetPCLK2Freq>
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	e002      	b.n	80027c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027c0:	f7ff ff32 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 80027c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	009a      	lsls	r2, r3, #2
 80027d0:	441a      	add	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027dc:	4a22      	ldr	r2, [pc, #136]	; (8002868 <UART_SetConfig+0x118>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	0119      	lsls	r1, r3, #4
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	009a      	lsls	r2, r3, #2
 80027f0:	441a      	add	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027fc:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <UART_SetConfig+0x118>)
 80027fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	2064      	movs	r0, #100	; 0x64
 8002806:	fb00 f303 	mul.w	r3, r0, r3
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	3332      	adds	r3, #50	; 0x32
 8002810:	4a15      	ldr	r2, [pc, #84]	; (8002868 <UART_SetConfig+0x118>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800281c:	4419      	add	r1, r3
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	009a      	lsls	r2, r3, #2
 8002828:	441a      	add	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	fbb2 f2f3 	udiv	r2, r2, r3
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <UART_SetConfig+0x118>)
 8002836:	fba3 0302 	umull	r0, r3, r3, r2
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	2064      	movs	r0, #100	; 0x64
 800283e:	fb00 f303 	mul.w	r3, r0, r3
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	3332      	adds	r3, #50	; 0x32
 8002848:	4a07      	ldr	r2, [pc, #28]	; (8002868 <UART_SetConfig+0x118>)
 800284a:	fba2 2303 	umull	r2, r3, r2, r3
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	f003 020f 	and.w	r2, r3, #15
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	440a      	add	r2, r1
 800285a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800285c:	bf00      	nop
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40013800 	.word	0x40013800
 8002868:	51eb851f 	.word	0x51eb851f

0800286c <__libc_init_array>:
 800286c:	b570      	push	{r4, r5, r6, lr}
 800286e:	2600      	movs	r6, #0
 8002870:	4d0c      	ldr	r5, [pc, #48]	; (80028a4 <__libc_init_array+0x38>)
 8002872:	4c0d      	ldr	r4, [pc, #52]	; (80028a8 <__libc_init_array+0x3c>)
 8002874:	1b64      	subs	r4, r4, r5
 8002876:	10a4      	asrs	r4, r4, #2
 8002878:	42a6      	cmp	r6, r4
 800287a:	d109      	bne.n	8002890 <__libc_init_array+0x24>
 800287c:	f000 f822 	bl	80028c4 <_init>
 8002880:	2600      	movs	r6, #0
 8002882:	4d0a      	ldr	r5, [pc, #40]	; (80028ac <__libc_init_array+0x40>)
 8002884:	4c0a      	ldr	r4, [pc, #40]	; (80028b0 <__libc_init_array+0x44>)
 8002886:	1b64      	subs	r4, r4, r5
 8002888:	10a4      	asrs	r4, r4, #2
 800288a:	42a6      	cmp	r6, r4
 800288c:	d105      	bne.n	800289a <__libc_init_array+0x2e>
 800288e:	bd70      	pop	{r4, r5, r6, pc}
 8002890:	f855 3b04 	ldr.w	r3, [r5], #4
 8002894:	4798      	blx	r3
 8002896:	3601      	adds	r6, #1
 8002898:	e7ee      	b.n	8002878 <__libc_init_array+0xc>
 800289a:	f855 3b04 	ldr.w	r3, [r5], #4
 800289e:	4798      	blx	r3
 80028a0:	3601      	adds	r6, #1
 80028a2:	e7f2      	b.n	800288a <__libc_init_array+0x1e>
 80028a4:	08002a88 	.word	0x08002a88
 80028a8:	08002a88 	.word	0x08002a88
 80028ac:	08002a88 	.word	0x08002a88
 80028b0:	08002a8c 	.word	0x08002a8c

080028b4 <memset>:
 80028b4:	4603      	mov	r3, r0
 80028b6:	4402      	add	r2, r0
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d100      	bne.n	80028be <memset+0xa>
 80028bc:	4770      	bx	lr
 80028be:	f803 1b01 	strb.w	r1, [r3], #1
 80028c2:	e7f9      	b.n	80028b8 <memset+0x4>

080028c4 <_init>:
 80028c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c6:	bf00      	nop
 80028c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ca:	bc08      	pop	{r3}
 80028cc:	469e      	mov	lr, r3
 80028ce:	4770      	bx	lr

080028d0 <_fini>:
 80028d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d2:	bf00      	nop
 80028d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028d6:	bc08      	pop	{r3}
 80028d8:	469e      	mov	lr, r3
 80028da:	4770      	bx	lr
